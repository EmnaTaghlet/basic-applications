
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800a044  0800a044  0001a044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a068  0800a068  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a068  0800a068  0001a068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a070  0800a070  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a070  0800a070  0001a070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a074  0800a074  0001a074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000090  0800a108  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  0800a108  00020a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c685  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040f8  00000000  00000000  0003c745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  00040840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001688  00000000  00000000  00042078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3b9  00000000  00000000  00043700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1c1  00000000  00000000  0005eab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2ce7  00000000  00000000  0007dc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120961  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006918  00000000  00000000  001209b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a02c 	.word	0x0800a02c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a02c 	.word	0x0800a02c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 ff24 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f840 	bl	8000568 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e8:	f000 f8a6 	bl	8000638 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 fac6 	bl	8000a7c <MX_GPIO_Init>
  MX_DMA_Init();
 80004f0:	f000 faa4 	bl	8000a3c <MX_DMA_Init>
  MX_I2C1_Init();
 80004f4:	f000 f912 	bl	800071c <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f8:	f000 f93e 	bl	8000778 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004fc:	f000 f96a 	bl	80007d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000500:	f000 f998 	bl	8000834 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000504:	f009 f94a 	bl	800979c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000508:	f000 f8b6 	bl	8000678 <MX_ADC1_Init>
  MX_TIM2_Init();
 800050c:	f000 f9c8 	bl	80008a0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000510:	f000 fa1e 	bl	8000950 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000514:	2104      	movs	r1, #4
 8000516:	4810      	ldr	r0, [pc, #64]	; (8000558 <main+0x7c>)
 8000518:	f005 fbf8 	bl	8005d0c <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1,&AD_RES,2);
 800051c:	2202      	movs	r2, #2
 800051e:	490f      	ldr	r1, [pc, #60]	; (800055c <main+0x80>)
 8000520:	480f      	ldr	r0, [pc, #60]	; (8000560 <main+0x84>)
 8000522:	f001 f91d 	bl	8001760 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //pollforconversion
	 HAL_ADC_Start(&hadc1);
 8000526:	480e      	ldr	r0, [pc, #56]	; (8000560 <main+0x84>)
 8000528:	f000 ffda 	bl	80014e0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1);
 800052c:	2101      	movs	r1, #1
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x84>)
 8000530:	f001 f88a 	bl	8001648 <HAL_ADC_PollForConversion>
	  AD_RES = HAL_ADC_GetValue(&hadc1);
 8000534:	480a      	ldr	r0, [pc, #40]	; (8000560 <main+0x84>)
 8000536:	f001 fa03 	bl	8001940 <HAL_ADC_GetValue>
 800053a:	4603      	mov	r3, r0
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <main+0x80>)
 800053e:	6013      	str	r3, [r2, #0]
	  TIM4->CCR2 = (AD_RES<<4);
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <main+0x80>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a07      	ldr	r2, [pc, #28]	; (8000564 <main+0x88>)
 8000546:	011b      	lsls	r3, r3, #4
 8000548:	6393      	str	r3, [r2, #56]	; 0x38
	  HAL_Delay(1);
 800054a:	2001      	movs	r0, #1
 800054c:	f000 ff60 	bl	8001410 <HAL_Delay>
	  HAL_Delay(1);*/
     //continuous conv polling
	  //HAL_ADC_Start_DMA(&hadc1,&AD_RES,2);

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000550:	f009 f94a 	bl	80097e8 <MX_USB_HOST_Process>
	 HAL_ADC_Start(&hadc1);
 8000554:	e7e7      	b.n	8000526 <main+0x4a>
 8000556:	bf00      	nop
 8000558:	200002d8 	.word	0x200002d8
 800055c:	20000320 	.word	0x20000320
 8000560:	200000ac 	.word	0x200000ac
 8000564:	40000800 	.word	0x40000800

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f009 fc52 	bl	8009e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <SystemClock_Config+0xc8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a26      	ldr	r2, [pc, #152]	; (8000630 <SystemClock_Config+0xc8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <SystemClock_Config+0xc8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <SystemClock_Config+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a20      	ldr	r2, [pc, #128]	; (8000634 <SystemClock_Config+0xcc>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <SystemClock_Config+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005dc:	2348      	movs	r3, #72	; 0x48
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005e4:	2303      	movs	r3, #3
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 fc91 	bl	8004f14 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f8:	f000 fb1a 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2102      	movs	r1, #2
 8000618:	4618      	mov	r0, r3
 800061a:	f004 fef3 	bl	8005404 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000624:	f000 fb04 	bl	8000c30 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800064e:	2301      	movs	r3, #1
 8000650:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000652:	23c8      	movs	r3, #200	; 0xc8
 8000654:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000656:	2305      	movs	r3, #5
 8000658:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800065a:	2302      	movs	r3, #2
 800065c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	4618      	mov	r0, r3
 8000662:	f005 f8db 	bl	800581c <HAL_RCCEx_PeriphCLKConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800066c:	f000 fae0 	bl	8000c30 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_ADC1_Init+0x98>)
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <MX_ADC1_Init+0x9c>)
 800068e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_ADC1_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_ADC1_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_ADC1_Init+0x98>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_ADC1_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_ADC1_Init+0x98>)
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <MX_ADC1_Init+0xa0>)
 80006ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_ADC1_Init+0x98>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_ADC1_Init+0x98>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_ADC1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_ADC1_Init+0x98>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_ADC1_Init+0x98>)
 80006d8:	f000 febe 	bl	8001458 <HAL_ADC_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006e2:	f000 faa5 	bl	8000c30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006e6:	2308      	movs	r3, #8
 80006e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_ADC1_Init+0x98>)
 80006f8:	f001 f94e 	bl	8001998 <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000702:	f000 fa95 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000ac 	.word	0x200000ac
 8000714:	40012000 	.word	0x40012000
 8000718:	0f000001 	.word	0x0f000001

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2C1_Init+0x50>)
 8000722:	4a13      	ldr	r2, [pc, #76]	; (8000770 <MX_I2C1_Init+0x54>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_I2C1_Init+0x50>)
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_I2C1_Init+0x58>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_I2C1_Init+0x50>)
 800073a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_I2C1_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_I2C1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_I2C1_Init+0x50>)
 800075a:	f003 fdf7 	bl	800434c <HAL_I2C_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000764:	f000 fa64 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000154 	.word	0x20000154
 8000770:	40005400 	.word	0x40005400
 8000774:	000186a0 	.word	0x000186a0

08000778 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2S2_Init+0x50>)
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <MX_I2S2_Init+0x54>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2S2_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_I2S2_Init+0x50>)
 800079e:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <MX_I2S2_Init+0x58>)
 80007a0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007b6:	f003 ff0d 	bl	80045d4 <HAL_I2S_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 fa36 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200001a8 	.word	0x200001a8
 80007cc:	40003800 	.word	0x40003800
 80007d0:	00017700 	.word	0x00017700

080007d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_I2S3_Init+0x54>)
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <MX_I2S3_Init+0x58>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2S3_Init+0x54>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_I2S3_Init+0x54>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_I2S3_Init+0x54>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_I2S3_Init+0x54>)
 80007fc:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <MX_I2S3_Init+0x5c>)
 80007fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_I2S3_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_I2S3_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_I2S3_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2S3_Init+0x54>)
 8000814:	f003 fede 	bl	80045d4 <HAL_I2S_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800081e:	f000 fa07 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200001f0 	.word	0x200001f0
 800082c:	40003c00 	.word	0x40003c00
 8000830:	00017700 	.word	0x00017700

08000834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_SPI1_Init+0x64>)
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <MX_SPI1_Init+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_SPI1_Init+0x64>)
 8000840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_SPI1_Init+0x64>)
 8000860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000864:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_SPI1_Init+0x64>)
 8000880:	220a      	movs	r2, #10
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_SPI1_Init+0x64>)
 8000886:	f005 f919 	bl	8005abc <HAL_SPI_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000890:	f000 f9ce 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000238 	.word	0x20000238
 800089c:	40013000 	.word	0x40013000

080008a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008c2:	4b22      	ldr	r3, [pc, #136]	; (800094c <MX_TIM2_Init+0xac>)
 80008c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <MX_TIM2_Init+0xac>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <MX_TIM2_Init+0xac>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_TIM2_Init+0xac>)
 80008d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_TIM2_Init+0xac>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_TIM2_Init+0xac>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ea:	4818      	ldr	r0, [pc, #96]	; (800094c <MX_TIM2_Init+0xac>)
 80008ec:	f005 f9be 	bl	8005c6c <HAL_TIM_PWM_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80008f6:	f000 f99b 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	4619      	mov	r1, r3
 8000908:	4810      	ldr	r0, [pc, #64]	; (800094c <MX_TIM2_Init+0xac>)
 800090a:	f005 ff05 	bl	8006718 <HAL_TIMEx_MasterConfigSynchronization>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000914:	f000 f98c 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000918:	2360      	movs	r3, #96	; 0x60
 800091a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	4619      	mov	r1, r3
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <MX_TIM2_Init+0xac>)
 8000930:	f005 fa9c 	bl	8005e6c <HAL_TIM_PWM_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800093a:	f000 f979 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <MX_TIM2_Init+0xac>)
 8000940:	f000 fbe2 	bl	8001108 <HAL_TIM_MspPostInit>

}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000290 	.word	0x20000290

08000950 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08e      	sub	sp, #56	; 0x38
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	f107 0320 	add.w	r3, r7, #32
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
 800097c:	615a      	str	r2, [r3, #20]
 800097e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000980:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <MX_TIM4_Init+0xe4>)
 8000982:	4a2d      	ldr	r2, [pc, #180]	; (8000a38 <MX_TIM4_Init+0xe8>)
 8000984:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000986:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <MX_TIM4_Init+0xe4>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <MX_TIM4_Init+0xe4>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_TIM4_Init+0xe4>)
 8000994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000998:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_TIM4_Init+0xe4>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a0:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <MX_TIM4_Init+0xe4>)
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009a6:	4823      	ldr	r0, [pc, #140]	; (8000a34 <MX_TIM4_Init+0xe4>)
 80009a8:	f005 f911 	bl	8005bce <HAL_TIM_Base_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80009b2:	f000 f93d 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c0:	4619      	mov	r1, r3
 80009c2:	481c      	ldr	r0, [pc, #112]	; (8000a34 <MX_TIM4_Init+0xe4>)
 80009c4:	f005 fb14 	bl	8005ff0 <HAL_TIM_ConfigClockSource>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80009ce:	f000 f92f 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009d2:	4818      	ldr	r0, [pc, #96]	; (8000a34 <MX_TIM4_Init+0xe4>)
 80009d4:	f005 f94a 	bl	8005c6c <HAL_TIM_PWM_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80009de:	f000 f927 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	4619      	mov	r1, r3
 80009f0:	4810      	ldr	r0, [pc, #64]	; (8000a34 <MX_TIM4_Init+0xe4>)
 80009f2:	f005 fe91 	bl	8006718 <HAL_TIMEx_MasterConfigSynchronization>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80009fc:	f000 f918 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a00:	2360      	movs	r3, #96	; 0x60
 8000a02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2204      	movs	r2, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4807      	ldr	r0, [pc, #28]	; (8000a34 <MX_TIM4_Init+0xe4>)
 8000a18:	f005 fa28 	bl	8005e6c <HAL_TIM_PWM_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a22:	f000 f905 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <MX_TIM4_Init+0xe4>)
 8000a28:	f000 fb6e 	bl	8001108 <HAL_TIM_MspPostInit>

}
 8000a2c:	bf00      	nop
 8000a2e:	3738      	adds	r7, #56	; 0x38
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200002d8 	.word	0x200002d8
 8000a38:	40000800 	.word	0x40000800

08000a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_DMA_Init+0x3c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <MX_DMA_Init+0x3c>)
 8000a4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_DMA_Init+0x3c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2038      	movs	r0, #56	; 0x38
 8000a64:	f001 fb23 	bl	80020ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a68:	2038      	movs	r0, #56	; 0x38
 8000a6a:	f001 fb3c 	bl	80020e6 <HAL_NVIC_EnableIRQ>

}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	4b61      	ldr	r3, [pc, #388]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a60      	ldr	r2, [pc, #384]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b5e      	ldr	r3, [pc, #376]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	4b5a      	ldr	r3, [pc, #360]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a59      	ldr	r2, [pc, #356]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b57      	ldr	r3, [pc, #348]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b53      	ldr	r3, [pc, #332]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a52      	ldr	r2, [pc, #328]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b50      	ldr	r3, [pc, #320]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b4c      	ldr	r3, [pc, #304]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a4b      	ldr	r2, [pc, #300]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b49      	ldr	r3, [pc, #292]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	4b45      	ldr	r3, [pc, #276]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a44      	ldr	r2, [pc, #272]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b42      	ldr	r3, [pc, #264]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b3e      	ldr	r3, [pc, #248]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a3d      	ldr	r2, [pc, #244]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <MX_GPIO_Init+0x1a0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	4838      	ldr	r0, [pc, #224]	; (8000c20 <MX_GPIO_Init+0x1a4>)
 8000b40:	f001 ffe0 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2101      	movs	r1, #1
 8000b48:	4836      	ldr	r0, [pc, #216]	; (8000c24 <MX_GPIO_Init+0x1a8>)
 8000b4a:	f001 ffdb 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f244 0110 	movw	r1, #16400	; 0x4010
 8000b54:	4834      	ldr	r0, [pc, #208]	; (8000c28 <MX_GPIO_Init+0x1ac>)
 8000b56:	f001 ffd5 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	482c      	ldr	r0, [pc, #176]	; (8000c20 <MX_GPIO_Init+0x1a4>)
 8000b6e:	f001 fe45 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b72:	2308      	movs	r3, #8
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4825      	ldr	r0, [pc, #148]	; (8000c20 <MX_GPIO_Init+0x1a4>)
 8000b8a:	f001 fe37 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000b8e:	2332      	movs	r3, #50	; 0x32
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b92:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481f      	ldr	r0, [pc, #124]	; (8000c20 <MX_GPIO_Init+0x1a4>)
 8000ba4:	f001 fe2a 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4819      	ldr	r0, [pc, #100]	; (8000c24 <MX_GPIO_Init+0x1a8>)
 8000bc0:	f001 fe1c 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bc8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4814      	ldr	r0, [pc, #80]	; (8000c2c <MX_GPIO_Init+0x1b0>)
 8000bda:	f001 fe0f 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD5_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD5_Pin|Audio_RST_Pin;
 8000bde:	f244 0310 	movw	r3, #16400	; 0x4010
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MX_GPIO_Init+0x1ac>)
 8000bf8:	f001 fe00 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <MX_GPIO_Init+0x1ac>)
 8000c10:	f001 fdf4 	bl	80027fc <HAL_GPIO_Init>

}
 8000c14:	bf00      	nop
 8000c16:	3730      	adds	r7, #48	; 0x30
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020c00 	.word	0x40020c00
 8000c2c:	40020000 	.word	0x40020000

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c7a:	2007      	movs	r0, #7
 8000c7c:	f001 fa0c 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a2f      	ldr	r2, [pc, #188]	; (8000d68 <HAL_ADC_MspInit+0xdc>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d157      	bne.n	8000d5e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <HAL_ADC_MspInit+0xe0>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <HAL_ADC_MspInit+0xe0>)
 8000cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <HAL_ADC_MspInit+0xe0>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <HAL_ADC_MspInit+0xe0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a26      	ldr	r2, [pc, #152]	; (8000d6c <HAL_ADC_MspInit+0xe0>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <HAL_ADC_MspInit+0xe0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cea:	2303      	movs	r3, #3
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	481d      	ldr	r0, [pc, #116]	; (8000d70 <HAL_ADC_MspInit+0xe4>)
 8000cfa:	f001 fd7f 	bl	80027fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d00:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <HAL_ADC_MspInit+0xec>)
 8000d02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d44:	f001 f9ea 	bl	800211c <HAL_DMA_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000d4e:	f7ff ff6f 	bl	8000c30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d56:	639a      	str	r2, [r3, #56]	; 0x38
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_ADC_MspInit+0xe8>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40012000 	.word	0x40012000
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400
 8000d74:	200000f4 	.word	0x200000f4
 8000d78:	40026410 	.word	0x40026410

08000d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <HAL_I2C_MspInit+0x84>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d12c      	bne.n	8000df8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc0:	2312      	movs	r3, #18
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <HAL_I2C_MspInit+0x8c>)
 8000dd8:	f001 fd10 	bl	80027fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000de6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40005400 	.word	0x40005400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400

08000e0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08e      	sub	sp, #56	; 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a59      	ldr	r2, [pc, #356]	; (8000f90 <HAL_I2S_MspInit+0x184>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d15b      	bne.n	8000ee6 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
 8000e32:	4b58      	ldr	r3, [pc, #352]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a57      	ldr	r2, [pc, #348]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b55      	ldr	r3, [pc, #340]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	623b      	str	r3, [r7, #32]
 8000e48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	4b51      	ldr	r3, [pc, #324]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a50      	ldr	r2, [pc, #320]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a49      	ldr	r2, [pc, #292]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b47      	ldr	r3, [pc, #284]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e82:	2304      	movs	r3, #4
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e92:	2306      	movs	r3, #6
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	483e      	ldr	r0, [pc, #248]	; (8000f98 <HAL_I2S_MspInit+0x18c>)
 8000e9e:	f001 fcad 	bl	80027fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4836      	ldr	r0, [pc, #216]	; (8000f98 <HAL_I2S_MspInit+0x18c>)
 8000ebe:	f001 fc9d 	bl	80027fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000ec2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	482f      	ldr	r0, [pc, #188]	; (8000f9c <HAL_I2S_MspInit+0x190>)
 8000ee0:	f001 fc8c 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ee4:	e04f      	b.n	8000f86 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a2d      	ldr	r2, [pc, #180]	; (8000fa0 <HAL_I2S_MspInit+0x194>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d14a      	bne.n	8000f86 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000efe:	6413      	str	r3, [r2, #64]	; 0x40
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f44:	2310      	movs	r3, #16
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f54:	2306      	movs	r3, #6
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <HAL_I2S_MspInit+0x198>)
 8000f60:	f001 fc4c 	bl	80027fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f64:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f76:	2306      	movs	r3, #6
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <HAL_I2S_MspInit+0x18c>)
 8000f82:	f001 fc3b 	bl	80027fc <HAL_GPIO_Init>
}
 8000f86:	bf00      	nop
 8000f88:	3738      	adds	r7, #56	; 0x38
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40003800 	.word	0x40003800
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40003c00 	.word	0x40003c00
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a19      	ldr	r2, [pc, #100]	; (800102c <HAL_SPI_MspInit+0x84>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12b      	bne.n	8001022 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001002:	23e0      	movs	r3, #224	; 0xe0
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001012:	2305      	movs	r3, #5
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_SPI_MspInit+0x8c>)
 800101e:	f001 fbed 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40013000 	.word	0x40013000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001048:	d10d      	bne.n	8001066 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_TIM_PWM_MspInit+0x3c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_TIM_PWM_MspInit+0x3c>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_TIM_PWM_MspInit+0x3c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800

08001078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_TIM_Base_MspInit+0x84>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12c      	bne.n	80010f4 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_TIM_Base_MspInit+0x88>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a17      	ldr	r2, [pc, #92]	; (8001100 <HAL_TIM_Base_MspInit+0x88>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_TIM_Base_MspInit+0x88>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_TIM_Base_MspInit+0x88>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <HAL_TIM_Base_MspInit+0x88>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_TIM_Base_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010e4:	2302      	movs	r3, #2
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_TIM_Base_MspInit+0x8c>)
 80010f0:	f001 fb84 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40000800 	.word	0x40000800
 8001100:	40023800 	.word	0x40023800
 8001104:	40020c00 	.word	0x40020c00

08001108 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001128:	d11f      	bne.n	800116a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_TIM_MspPostInit+0xb4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a22      	ldr	r2, [pc, #136]	; (80011bc <HAL_TIM_MspPostInit+0xb4>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_TIM_MspPostInit+0xb4>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001158:	2301      	movs	r3, #1
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4817      	ldr	r0, [pc, #92]	; (80011c0 <HAL_TIM_MspPostInit+0xb8>)
 8001164:	f001 fb4a 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001168:	e023      	b.n	80011b2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <HAL_TIM_MspPostInit+0xbc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d11e      	bne.n	80011b2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_TIM_MspPostInit+0xb4>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <HAL_TIM_MspPostInit+0xb4>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6313      	str	r3, [r2, #48]	; 0x30
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_TIM_MspPostInit+0xb4>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011a2:	2302      	movs	r3, #2
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <HAL_TIM_MspPostInit+0xc0>)
 80011ae:	f001 fb25 	bl	80027fc <HAL_GPIO_Init>
}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40000800 	.word	0x40000800
 80011c8:	40020c00 	.word	0x40020c00

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <NMI_Handler+0x4>

080011d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler+0x4>

080011de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001218:	f000 f8da 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <DMA2_Stream0_IRQHandler+0x10>)
 8001226:	f001 f87f 	bl	8002328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200000f4 	.word	0x200000f4

08001234 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <OTG_FS_IRQHandler+0x10>)
 800123a:	f001 fee7 	bl	800300c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000708 	.word	0x20000708

08001248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001250:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <_sbrk+0x5c>)
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <_sbrk+0x60>)
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <_sbrk+0x64>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <_sbrk+0x68>)
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	429a      	cmp	r2, r3
 8001276:	d207      	bcs.n	8001288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001278:	f008 fd98 	bl	8009dac <__errno>
 800127c:	4603      	mov	r3, r0
 800127e:	220c      	movs	r2, #12
 8001280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e009      	b.n	800129c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <_sbrk+0x64>)
 8001298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20020000 	.word	0x20020000
 80012a8:	00000400 	.word	0x00000400
 80012ac:	20000324 	.word	0x20000324
 80012b0:	20000a20 	.word	0x20000a20

080012b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <SystemInit+0x20>)
 80012ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <SystemInit+0x20>)
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001310 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012de:	490e      	ldr	r1, [pc, #56]	; (8001318 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012f4:	4c0b      	ldr	r4, [pc, #44]	; (8001324 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001302:	f7ff ffd7 	bl	80012b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001306:	f008 fd57 	bl	8009db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f7ff f8e7 	bl	80004dc <main>
  bx  lr    
 800130e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800131c:	0800a078 	.word	0x0800a078
  ldr r2, =_sbss
 8001320:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001324:	20000a1c 	.word	0x20000a1c

08001328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC_IRQHandler>
	...

0800132c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <HAL_Init+0x40>)
 8001336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0a      	ldr	r2, [pc, #40]	; (800136c <HAL_Init+0x40>)
 8001342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_Init+0x40>)
 800134e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001354:	2003      	movs	r0, #3
 8001356:	f000 fe9f 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135a:	2000      	movs	r0, #0
 800135c:	f000 f808 	bl	8001370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001360:	f7ff fc6c 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023c00 	.word	0x40023c00

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_InitTick+0x54>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_InitTick+0x58>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f000 feb7 	bl	8002102 <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00e      	b.n	80013bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d80a      	bhi.n	80013ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f000 fe7f 	bl	80020ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <HAL_InitTick+0x5c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008
 80013f4:	20000328 	.word	0x20000328

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000328 	.word	0x20000328

08001410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff ffee 	bl	80013f8 <HAL_GetTick>
 800141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d005      	beq.n	8001436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_Delay+0x44>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001436:	bf00      	nop
 8001438:	f7ff ffde 	bl	80013f8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8f7      	bhi.n	8001438 <HAL_Delay+0x28>
  {
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008

08001458 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e033      	b.n	80014d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2b00      	cmp	r3, #0
 8001474:	d109      	bne.n	800148a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fc08 	bl	8000c8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	2b00      	cmp	r3, #0
 8001494:	d118      	bne.n	80014c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800149e:	f023 0302 	bic.w	r3, r3, #2
 80014a2:	f043 0202 	orr.w	r2, r3, #2
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 fba6 	bl	8001bfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f023 0303 	bic.w	r3, r3, #3
 80014be:	f043 0201 	orr.w	r2, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40
 80014c6:	e001      	b.n	80014cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_Start+0x1a>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e097      	b.n	800162a <HAL_ADC_Start+0x14a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b01      	cmp	r3, #1
 800150e:	d018      	beq.n	8001542 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001520:	4b45      	ldr	r3, [pc, #276]	; (8001638 <HAL_ADC_Start+0x158>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a45      	ldr	r2, [pc, #276]	; (800163c <HAL_ADC_Start+0x15c>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0c9a      	lsrs	r2, r3, #18
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001534:	e002      	b.n	800153c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3b01      	subs	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f9      	bne.n	8001536 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b01      	cmp	r3, #1
 800154e:	d15f      	bne.n	8001610 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800157a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158e:	d106      	bne.n	800159e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	f023 0206 	bic.w	r2, r3, #6
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	645a      	str	r2, [r3, #68]	; 0x44
 800159c:	e002      	b.n	80015a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <HAL_ADC_Start+0x160>)
 80015ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015b8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10f      	bne.n	80015e6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d129      	bne.n	8001628 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	e020      	b.n	8001628 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a16      	ldr	r2, [pc, #88]	; (8001644 <HAL_ADC_Start+0x164>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d11b      	bne.n	8001628 <HAL_ADC_Start+0x148>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d114      	bne.n	8001628 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	e00b      	b.n	8001628 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f043 0210 	orr.w	r2, r3, #16
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000000 	.word	0x20000000
 800163c:	431bde83 	.word	0x431bde83
 8001640:	40012300 	.word	0x40012300
 8001644:	40012000 	.word	0x40012000

08001648 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001664:	d113      	bne.n	800168e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001674:	d10b      	bne.n	800168e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f043 0220 	orr.w	r2, r3, #32
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e063      	b.n	8001756 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800168e:	f7ff feb3 	bl	80013f8 <HAL_GetTick>
 8001692:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001694:	e021      	b.n	80016da <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d01d      	beq.n	80016da <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d007      	beq.n	80016b4 <HAL_ADC_PollForConversion+0x6c>
 80016a4:	f7ff fea8 	bl	80013f8 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d212      	bcs.n	80016da <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d00b      	beq.n	80016da <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f043 0204 	orr.w	r2, r3, #4
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e03d      	b.n	8001756 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d1d6      	bne.n	8001696 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0212 	mvn.w	r2, #18
 80016f0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d123      	bne.n	8001754 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001710:	2b00      	cmp	r3, #0
 8001712:	d11f      	bne.n	8001754 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800171e:	2b00      	cmp	r3, #0
 8001720:	d006      	beq.n	8001730 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800172c:	2b00      	cmp	r3, #0
 800172e:	d111      	bne.n	8001754 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f043 0201 	orr.w	r2, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_ADC_Start_DMA+0x1e>
 800177a:	2302      	movs	r3, #2
 800177c:	e0ce      	b.n	800191c <HAL_ADC_Start_DMA+0x1bc>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b01      	cmp	r3, #1
 8001792:	d018      	beq.n	80017c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017a4:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <HAL_ADC_Start_DMA+0x1c4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a5f      	ldr	r2, [pc, #380]	; (8001928 <HAL_ADC_Start_DMA+0x1c8>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0c9a      	lsrs	r2, r3, #18
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80017b8:	e002      	b.n	80017c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	3b01      	subs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f9      	bne.n	80017ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d4:	d107      	bne.n	80017e6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	f040 8086 	bne.w	8001902 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d007      	beq.n	8001828 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001820:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001834:	d106      	bne.n	8001844 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f023 0206 	bic.w	r2, r3, #6
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	645a      	str	r2, [r3, #68]	; 0x44
 8001842:	e002      	b.n	800184a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001852:	4b36      	ldr	r3, [pc, #216]	; (800192c <HAL_ADC_Start_DMA+0x1cc>)
 8001854:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185a:	4a35      	ldr	r2, [pc, #212]	; (8001930 <HAL_ADC_Start_DMA+0x1d0>)
 800185c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001862:	4a34      	ldr	r2, [pc, #208]	; (8001934 <HAL_ADC_Start_DMA+0x1d4>)
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186a:	4a33      	ldr	r2, [pc, #204]	; (8001938 <HAL_ADC_Start_DMA+0x1d8>)
 800186c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001876:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001886:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001896:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	334c      	adds	r3, #76	; 0x4c
 80018a2:	4619      	mov	r1, r3
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f000 fce6 	bl	8002278 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10f      	bne.n	80018d8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d129      	bne.n	800191a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	e020      	b.n	800191a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a17      	ldr	r2, [pc, #92]	; (800193c <HAL_ADC_Start_DMA+0x1dc>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d11b      	bne.n	800191a <HAL_ADC_Start_DMA+0x1ba>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d114      	bne.n	800191a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	e00b      	b.n	800191a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f043 0210 	orr.w	r2, r3, #16
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000000 	.word	0x20000000
 8001928:	431bde83 	.word	0x431bde83
 800192c:	40012300 	.word	0x40012300
 8001930:	08001df5 	.word	0x08001df5
 8001934:	08001eaf 	.word	0x08001eaf
 8001938:	08001ecb 	.word	0x08001ecb
 800193c:	40012000 	.word	0x40012000

08001940 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1c>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e113      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x244>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b09      	cmp	r3, #9
 80019c2:	d925      	bls.n	8001a10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68d9      	ldr	r1, [r3, #12]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	3b1e      	subs	r3, #30
 80019da:	2207      	movs	r2, #7
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43da      	mvns	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68d9      	ldr	r1, [r3, #12]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	4603      	mov	r3, r0
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4403      	add	r3, r0
 8001a02:	3b1e      	subs	r3, #30
 8001a04:	409a      	lsls	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	e022      	b.n	8001a56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6919      	ldr	r1, [r3, #16]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	2207      	movs	r2, #7
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	400a      	ands	r2, r1
 8001a32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6919      	ldr	r1, [r3, #16]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4403      	add	r3, r0
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d824      	bhi.n	8001aa8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b05      	subs	r3, #5
 8001a70:	221f      	movs	r2, #31
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3b05      	subs	r3, #5
 8001a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8001aa6:	e04c      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b0c      	cmp	r3, #12
 8001aae:	d824      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b23      	subs	r3, #35	; 0x23
 8001ac2:	221f      	movs	r2, #31
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	400a      	ands	r2, r1
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b23      	subs	r3, #35	; 0x23
 8001aec:	fa00 f203 	lsl.w	r2, r0, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
 8001af8:	e023      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	3b41      	subs	r3, #65	; 0x41
 8001b0c:	221f      	movs	r2, #31
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	400a      	ands	r2, r1
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	3b41      	subs	r3, #65	; 0x41
 8001b36:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_ADC_ConfigChannel+0x250>)
 8001b44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a28      	ldr	r2, [pc, #160]	; (8001bec <HAL_ADC_ConfigChannel+0x254>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10f      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1d8>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b12      	cmp	r3, #18
 8001b56:	d10b      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_ADC_ConfigChannel+0x254>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d12b      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x23a>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <HAL_ADC_ConfigChannel+0x258>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d003      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0x1f4>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b11      	cmp	r3, #17
 8001b8a:	d122      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_ADC_ConfigChannel+0x258>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d111      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_ADC_ConfigChannel+0x25c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <HAL_ADC_ConfigChannel+0x260>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	0c9a      	lsrs	r2, r3, #18
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bc4:	e002      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f9      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40012300 	.word	0x40012300
 8001bec:	40012000 	.word	0x40012000
 8001bf0:	10000012 	.word	0x10000012
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	431bde83 	.word	0x431bde83

08001bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c04:	4b79      	ldr	r3, [pc, #484]	; (8001dec <ADC_Init+0x1f0>)
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	021a      	lsls	r2, r3, #8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6899      	ldr	r1, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <ADC_Init+0x1f4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d022      	beq.n	8001cda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6899      	ldr	r1, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	e00f      	b.n	8001cfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0202 	bic.w	r2, r2, #2
 8001d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6899      	ldr	r1, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7e1b      	ldrb	r3, [r3, #24]
 8001d14:	005a      	lsls	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01b      	beq.n	8001d60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6859      	ldr	r1, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	3b01      	subs	r3, #1
 8001d54:	035a      	lsls	r2, r3, #13
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	e007      	b.n	8001d70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	051a      	lsls	r2, r3, #20
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001da4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6899      	ldr	r1, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001db2:	025a      	lsls	r2, r3, #9
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6899      	ldr	r1, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	029a      	lsls	r2, r3, #10
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40012300 	.word	0x40012300
 8001df0:	0f000001 	.word	0x0f000001

08001df4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e00:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d13c      	bne.n	8001e88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d12b      	bne.n	8001e80 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d127      	bne.n	8001e80 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d119      	bne.n	8001e80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0220 	bic.w	r2, r2, #32
 8001e5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7ff fd6a 	bl	800195a <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e86:	e00e      	b.n	8001ea6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f7ff fd74 	bl	8001982 <HAL_ADC_ErrorCallback>
}
 8001e9a:	e004      	b.n	8001ea6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f7ff fd56 	bl	800196e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f043 0204 	orr.w	r2, r3, #4
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7ff fd49 	bl	8001982 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <__NVIC_EnableIRQ+0x38>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	; (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002064:	d301      	bcc.n	800206a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002066:	2301      	movs	r3, #1
 8002068:	e00f      	b.n	800208a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <SysTick_Config+0x40>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002072:	210f      	movs	r1, #15
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f7ff ff8e 	bl	8001f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <SysTick_Config+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <SysTick_Config+0x40>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff29 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c0:	f7ff ff3e 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 80020c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f7ff ff8e 	bl	8001fec <NVIC_EncodePriority>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff5d 	bl	8001f98 <__NVIC_SetPriority>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff31 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffa2 	bl	8002054 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff f966 	bl	80013f8 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e099      	b.n	800226c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002158:	e00f      	b.n	800217a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800215a:	f7ff f94d 	bl	80013f8 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b05      	cmp	r3, #5
 8002166:	d908      	bls.n	800217a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2203      	movs	r2, #3
 8002172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e078      	b.n	800226c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1e8      	bne.n	800215a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <HAL_DMA_Init+0x158>)
 8002194:	4013      	ands	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d107      	bne.n	80021e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	4313      	orrs	r3, r2
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f023 0307 	bic.w	r3, r3, #7
 80021fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	2b04      	cmp	r3, #4
 800220c:	d117      	bne.n	800223e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00e      	beq.n	800223e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fa6f 	bl	8002704 <DMA_CheckFifoParam>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2240      	movs	r2, #64	; 0x40
 8002230:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800223a:	2301      	movs	r3, #1
 800223c:	e016      	b.n	800226c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fa26 	bl	8002698 <DMA_CalcBaseAndBitshift>
 800224c:	4603      	mov	r3, r0
 800224e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	223f      	movs	r2, #63	; 0x3f
 8002256:	409a      	lsls	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	f010803f 	.word	0xf010803f

08002278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_DMA_Start_IT+0x26>
 800229a:	2302      	movs	r3, #2
 800229c:	e040      	b.n	8002320 <HAL_DMA_Start_IT+0xa8>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d12f      	bne.n	8002312 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2202      	movs	r2, #2
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f9b8 	bl	800263c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	223f      	movs	r2, #63	; 0x3f
 80022d2:	409a      	lsls	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0216 	orr.w	r2, r2, #22
 80022e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0208 	orr.w	r2, r2, #8
 80022fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	e005      	b.n	800231e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800231a:	2302      	movs	r3, #2
 800231c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800231e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002334:	4b8e      	ldr	r3, [pc, #568]	; (8002570 <HAL_DMA_IRQHandler+0x248>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a8e      	ldr	r2, [pc, #568]	; (8002574 <HAL_DMA_IRQHandler+0x24c>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	0a9b      	lsrs	r3, r3, #10
 8002340:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2208      	movs	r2, #8
 8002354:	409a      	lsls	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d01a      	beq.n	8002394 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0204 	bic.w	r2, r2, #4
 800237a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	2208      	movs	r2, #8
 8002382:	409a      	lsls	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2201      	movs	r2, #1
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d012      	beq.n	80023ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2201      	movs	r2, #1
 80023b8:	409a      	lsls	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f043 0202 	orr.w	r2, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2204      	movs	r2, #4
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d012      	beq.n	8002400 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00b      	beq.n	8002400 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	2204      	movs	r2, #4
 80023ee:	409a      	lsls	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	f043 0204 	orr.w	r2, r3, #4
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	2210      	movs	r2, #16
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d043      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d03c      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2210      	movs	r2, #16
 8002424:	409a      	lsls	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d018      	beq.n	800246a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d108      	bne.n	8002458 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	d024      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	4798      	blx	r3
 8002456:	e01f      	b.n	8002498 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01b      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
 8002468:	e016      	b.n	8002498 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d107      	bne.n	8002488 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0208 	bic.w	r2, r2, #8
 8002486:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	2220      	movs	r2, #32
 800249e:	409a      	lsls	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 808f 	beq.w	80025c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 8087 	beq.w	80025c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	2220      	movs	r2, #32
 80024c0:	409a      	lsls	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d136      	bne.n	8002540 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0216 	bic.w	r2, r2, #22
 80024e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <HAL_DMA_IRQHandler+0x1da>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0208 	bic.w	r2, r2, #8
 8002510:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	223f      	movs	r2, #63	; 0x3f
 8002518:	409a      	lsls	r2, r3
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002532:	2b00      	cmp	r3, #0
 8002534:	d07e      	beq.n	8002634 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
        }
        return;
 800253e:	e079      	b.n	8002634 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01d      	beq.n	800258a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10d      	bne.n	8002578 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	2b00      	cmp	r3, #0
 8002562:	d031      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
 800256c:	e02c      	b.n	80025c8 <HAL_DMA_IRQHandler+0x2a0>
 800256e:	bf00      	nop
 8002570:	20000000 	.word	0x20000000
 8002574:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d023      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	4798      	blx	r3
 8002588:	e01e      	b.n	80025c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10f      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0210 	bic.w	r2, r2, #16
 80025a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d032      	beq.n	8002636 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d022      	beq.n	8002622 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2205      	movs	r2, #5
 80025e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	3301      	adds	r3, #1
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d307      	bcc.n	8002610 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f2      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x2cc>
 800260e:	e000      	b.n	8002612 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002610:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
 8002632:	e000      	b.n	8002636 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002634:	bf00      	nop
    }
  }
}
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002658:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	d108      	bne.n	800267c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800267a:	e007      	b.n	800268c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	3b10      	subs	r3, #16
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <DMA_CalcBaseAndBitshift+0x64>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026b2:	4a13      	ldr	r2, [pc, #76]	; (8002700 <DMA_CalcBaseAndBitshift+0x68>)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d909      	bls.n	80026da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	1d1a      	adds	r2, r3, #4
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	; 0x58
 80026d8:	e007      	b.n	80026ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	aaaaaaab 	.word	0xaaaaaaab
 8002700:	0800a060 	.word	0x0800a060

08002704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d11f      	bne.n	800275e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d856      	bhi.n	80027d2 <DMA_CheckFifoParam+0xce>
 8002724:	a201      	add	r2, pc, #4	; (adr r2, 800272c <DMA_CheckFifoParam+0x28>)
 8002726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272a:	bf00      	nop
 800272c:	0800273d 	.word	0x0800273d
 8002730:	0800274f 	.word	0x0800274f
 8002734:	0800273d 	.word	0x0800273d
 8002738:	080027d3 	.word	0x080027d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d046      	beq.n	80027d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274c:	e043      	b.n	80027d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002756:	d140      	bne.n	80027da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275c:	e03d      	b.n	80027da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002766:	d121      	bne.n	80027ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d837      	bhi.n	80027de <DMA_CheckFifoParam+0xda>
 800276e:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <DMA_CheckFifoParam+0x70>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	08002785 	.word	0x08002785
 8002778:	0800278b 	.word	0x0800278b
 800277c:	08002785 	.word	0x08002785
 8002780:	0800279d 	.word	0x0800279d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      break;
 8002788:	e030      	b.n	80027ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d025      	beq.n	80027e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279a:	e022      	b.n	80027e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027a4:	d11f      	bne.n	80027e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027aa:	e01c      	b.n	80027e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d903      	bls.n	80027ba <DMA_CheckFifoParam+0xb6>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d003      	beq.n	80027c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027b8:	e018      	b.n	80027ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      break;
 80027be:	e015      	b.n	80027ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00e      	beq.n	80027ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      break;
 80027d0:	e00b      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;
 80027d2:	bf00      	nop
 80027d4:	e00a      	b.n	80027ec <DMA_CheckFifoParam+0xe8>
      break;
 80027d6:	bf00      	nop
 80027d8:	e008      	b.n	80027ec <DMA_CheckFifoParam+0xe8>
      break;
 80027da:	bf00      	nop
 80027dc:	e006      	b.n	80027ec <DMA_CheckFifoParam+0xe8>
      break;
 80027de:	bf00      	nop
 80027e0:	e004      	b.n	80027ec <DMA_CheckFifoParam+0xe8>
      break;
 80027e2:	bf00      	nop
 80027e4:	e002      	b.n	80027ec <DMA_CheckFifoParam+0xe8>
      break;   
 80027e6:	bf00      	nop
 80027e8:	e000      	b.n	80027ec <DMA_CheckFifoParam+0xe8>
      break;
 80027ea:	bf00      	nop
    }
  } 
  
  return status; 
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop

080027fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	e159      	b.n	8002acc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	f040 8148 	bne.w	8002ac6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d005      	beq.n	800284e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284a:	2b02      	cmp	r3, #2
 800284c:	d130      	bne.n	80028b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002884:	2201      	movs	r2, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 0201 	and.w	r2, r3, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d017      	beq.n	80028ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d123      	bne.n	8002940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	08da      	lsrs	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3208      	adds	r2, #8
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	220f      	movs	r2, #15
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	08da      	lsrs	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3208      	adds	r2, #8
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80a2 	beq.w	8002ac6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b57      	ldr	r3, [pc, #348]	; (8002ae4 <HAL_GPIO_Init+0x2e8>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	4a56      	ldr	r2, [pc, #344]	; (8002ae4 <HAL_GPIO_Init+0x2e8>)
 800298c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002990:	6453      	str	r3, [r2, #68]	; 0x44
 8002992:	4b54      	ldr	r3, [pc, #336]	; (8002ae4 <HAL_GPIO_Init+0x2e8>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800299e:	4a52      	ldr	r2, [pc, #328]	; (8002ae8 <HAL_GPIO_Init+0x2ec>)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a49      	ldr	r2, [pc, #292]	; (8002aec <HAL_GPIO_Init+0x2f0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d019      	beq.n	80029fe <HAL_GPIO_Init+0x202>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a48      	ldr	r2, [pc, #288]	; (8002af0 <HAL_GPIO_Init+0x2f4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0x1fe>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a47      	ldr	r2, [pc, #284]	; (8002af4 <HAL_GPIO_Init+0x2f8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00d      	beq.n	80029f6 <HAL_GPIO_Init+0x1fa>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a46      	ldr	r2, [pc, #280]	; (8002af8 <HAL_GPIO_Init+0x2fc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <HAL_GPIO_Init+0x1f6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a45      	ldr	r2, [pc, #276]	; (8002afc <HAL_GPIO_Init+0x300>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_GPIO_Init+0x1f2>
 80029ea:	2304      	movs	r3, #4
 80029ec:	e008      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029ee:	2307      	movs	r3, #7
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029f2:	2303      	movs	r3, #3
 80029f4:	e004      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029fe:	2300      	movs	r3, #0
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	f002 0203 	and.w	r2, r2, #3
 8002a06:	0092      	lsls	r2, r2, #2
 8002a08:	4093      	lsls	r3, r2
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a10:	4935      	ldr	r1, [pc, #212]	; (8002ae8 <HAL_GPIO_Init+0x2ec>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3302      	adds	r3, #2
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a1e:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a42:	4a2f      	ldr	r2, [pc, #188]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a48:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a6c:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a96:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a9c:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac0:	4a0f      	ldr	r2, [pc, #60]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	f67f aea2 	bls.w	8002818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3724      	adds	r7, #36	; 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	40020400 	.word	0x40020400
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40020c00 	.word	0x40020c00
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40013c00 	.word	0x40013c00

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b20:	e003      	b.n	8002b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	041a      	lsls	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b38:	b08f      	sub	sp, #60	; 0x3c
 8002b3a:	af0a      	add	r7, sp, #40	; 0x28
 8002b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e054      	b.n	8002bf2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f006 fe78 	bl	8009858 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 fea6 	bl	80068d8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	687e      	ldr	r6, [r7, #4]
 8002b94:	466d      	mov	r5, sp
 8002b96:	f106 0410 	add.w	r4, r6, #16
 8002b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ba6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002baa:	1d33      	adds	r3, r6, #4
 8002bac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bae:	6838      	ldr	r0, [r7, #0]
 8002bb0:	f003 fe20 	bl	80067f4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f003 fe9d 	bl	80068fa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	687e      	ldr	r6, [r7, #4]
 8002bc8:	466d      	mov	r5, sp
 8002bca:	f106 0410 	add.w	r4, r6, #16
 8002bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bda:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bde:	1d33      	adds	r3, r6, #4
 8002be0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be2:	6838      	ldr	r0, [r7, #0]
 8002be4:	f004 f826 	bl	8006c34 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bfa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002bfa:	b590      	push	{r4, r7, lr}
 8002bfc:	b089      	sub	sp, #36	; 0x24
 8002bfe:	af04      	add	r7, sp, #16
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	4608      	mov	r0, r1
 8002c04:	4611      	mov	r1, r2
 8002c06:	461a      	mov	r2, r3
 8002c08:	4603      	mov	r3, r0
 8002c0a:	70fb      	strb	r3, [r7, #3]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	70bb      	strb	r3, [r7, #2]
 8002c10:	4613      	mov	r3, r2
 8002c12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_HCD_HC_Init+0x28>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e076      	b.n	8002d10 <HAL_HCD_HC_Init+0x116>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	333d      	adds	r3, #61	; 0x3d
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3338      	adds	r3, #56	; 0x38
 8002c4a:	787a      	ldrb	r2, [r7, #1]
 8002c4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3340      	adds	r3, #64	; 0x40
 8002c5c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002c5e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3339      	adds	r3, #57	; 0x39
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	333f      	adds	r3, #63	; 0x3f
 8002c80:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002c84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	78ba      	ldrb	r2, [r7, #2]
 8002c8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c8e:	b2d0      	uxtb	r0, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	333a      	adds	r3, #58	; 0x3a
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002ca0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da09      	bge.n	8002cbc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	333b      	adds	r3, #59	; 0x3b
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e008      	b.n	8002cce <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	333b      	adds	r3, #59	; 0x3b
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	333c      	adds	r3, #60	; 0x3c
 8002cdc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ce0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	787c      	ldrb	r4, [r7, #1]
 8002ce8:	78ba      	ldrb	r2, [r7, #2]
 8002cea:	78f9      	ldrb	r1, [r7, #3]
 8002cec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002cee:	9302      	str	r3, [sp, #8]
 8002cf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	4623      	mov	r3, r4
 8002cfe:	f004 f91f 	bl	8006f40 <USB_HC_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd90      	pop	{r4, r7, pc}

08002d18 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_HCD_HC_Halt+0x1e>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e00f      	b.n	8002d56 <HAL_HCD_HC_Halt+0x3e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f004 fb6f 	bl	800742a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	4608      	mov	r0, r1
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	70fb      	strb	r3, [r7, #3]
 8002d72:	460b      	mov	r3, r1
 8002d74:	70bb      	strb	r3, [r7, #2]
 8002d76:	4613      	mov	r3, r2
 8002d78:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	333b      	adds	r3, #59	; 0x3b
 8002d88:	78ba      	ldrb	r2, [r7, #2]
 8002d8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	333f      	adds	r3, #63	; 0x3f
 8002d9a:	787a      	ldrb	r2, [r7, #1]
 8002d9c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002d9e:	7c3b      	ldrb	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d112      	bne.n	8002dca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	3342      	adds	r3, #66	; 0x42
 8002db2:	2203      	movs	r2, #3
 8002db4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	333d      	adds	r3, #61	; 0x3d
 8002dc4:	7f3a      	ldrb	r2, [r7, #28]
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e008      	b.n	8002ddc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3342      	adds	r3, #66	; 0x42
 8002dd8:	2202      	movs	r2, #2
 8002dda:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ddc:	787b      	ldrb	r3, [r7, #1]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	f200 80c6 	bhi.w	8002f70 <HAL_HCD_HC_SubmitRequest+0x210>
 8002de4:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dea:	bf00      	nop
 8002dec:	08002dfd 	.word	0x08002dfd
 8002df0:	08002f5d 	.word	0x08002f5d
 8002df4:	08002e61 	.word	0x08002e61
 8002df8:	08002edf 	.word	0x08002edf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002dfc:	7c3b      	ldrb	r3, [r7, #16]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	f040 80b8 	bne.w	8002f74 <HAL_HCD_HC_SubmitRequest+0x214>
 8002e04:	78bb      	ldrb	r3, [r7, #2]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 80b4 	bne.w	8002f74 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002e0c:	8b3b      	ldrh	r3, [r7, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d108      	bne.n	8002e24 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3355      	adds	r3, #85	; 0x55
 8002e20:	2201      	movs	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3355      	adds	r3, #85	; 0x55
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3342      	adds	r3, #66	; 0x42
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e4a:	e093      	b.n	8002f74 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3342      	adds	r3, #66	; 0x42
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	701a      	strb	r2, [r3, #0]
      break;
 8002e5e:	e089      	b.n	8002f74 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002e60:	78bb      	ldrb	r3, [r7, #2]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d11d      	bne.n	8002ea2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3355      	adds	r3, #85	; 0x55
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3342      	adds	r3, #66	; 0x42
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002e8c:	e073      	b.n	8002f76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3342      	adds	r3, #66	; 0x42
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	701a      	strb	r2, [r3, #0]
      break;
 8002ea0:	e069      	b.n	8002f76 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3354      	adds	r3, #84	; 0x54
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3342      	adds	r3, #66	; 0x42
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
      break;
 8002ec8:	e055      	b.n	8002f76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3342      	adds	r3, #66	; 0x42
 8002ed8:	2202      	movs	r2, #2
 8002eda:	701a      	strb	r2, [r3, #0]
      break;
 8002edc:	e04b      	b.n	8002f76 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002ede:	78bb      	ldrb	r3, [r7, #2]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d11d      	bne.n	8002f20 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3355      	adds	r3, #85	; 0x55
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3342      	adds	r3, #66	; 0x42
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f0a:	e034      	b.n	8002f76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	3342      	adds	r3, #66	; 0x42
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	701a      	strb	r2, [r3, #0]
      break;
 8002f1e:	e02a      	b.n	8002f76 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3354      	adds	r3, #84	; 0x54
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	212c      	movs	r1, #44	; 0x2c
 8002f3a:	fb01 f303 	mul.w	r3, r1, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	3342      	adds	r3, #66	; 0x42
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
      break;
 8002f46:	e016      	b.n	8002f76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	3342      	adds	r3, #66	; 0x42
 8002f56:	2202      	movs	r2, #2
 8002f58:	701a      	strb	r2, [r3, #0]
      break;
 8002f5a:	e00c      	b.n	8002f76 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3342      	adds	r3, #66	; 0x42
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
      break;
 8002f6e:	e002      	b.n	8002f76 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002f70:	bf00      	nop
 8002f72:	e000      	b.n	8002f76 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002f74:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3344      	adds	r3, #68	; 0x44
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	8b3a      	ldrh	r2, [r7, #24]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	202c      	movs	r0, #44	; 0x2c
 8002f90:	fb00 f303 	mul.w	r3, r0, r3
 8002f94:	440b      	add	r3, r1
 8002f96:	334c      	adds	r3, #76	; 0x4c
 8002f98:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3360      	adds	r3, #96	; 0x60
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	fb01 f303 	mul.w	r3, r1, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3350      	adds	r3, #80	; 0x50
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	3339      	adds	r3, #57	; 0x39
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3361      	adds	r3, #97	; 0x61
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	222c      	movs	r2, #44	; 0x2c
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	3338      	adds	r3, #56	; 0x38
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	18d1      	adds	r1, r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f004 f8c2 	bl	8007184 <USB_HC_StartXfer>
 8003000:	4603      	mov	r3, r0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop

0800300c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f003 fdc3 	bl	8006bae <USB_GetMode>
 8003028:	4603      	mov	r3, r0
 800302a:	2b01      	cmp	r3, #1
 800302c:	f040 80f6 	bne.w	800321c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f003 fda7 	bl	8006b88 <USB_ReadInterrupts>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80ec 	beq.w	800321a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fd9e 	bl	8006b88 <USB_ReadInterrupts>
 800304c:	4603      	mov	r3, r0
 800304e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003056:	d104      	bne.n	8003062 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003060:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f003 fd8e 	bl	8006b88 <USB_ReadInterrupts>
 800306c:	4603      	mov	r3, r0
 800306e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003076:	d104      	bne.n	8003082 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003080:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f003 fd7e 	bl	8006b88 <USB_ReadInterrupts>
 800308c:	4603      	mov	r3, r0
 800308e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003092:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003096:	d104      	bne.n	80030a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f003 fd6e 	bl	8006b88 <USB_ReadInterrupts>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d103      	bne.n	80030be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2202      	movs	r2, #2
 80030bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 fd60 	bl	8006b88 <USB_ReadInterrupts>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d2:	d11c      	bne.n	800310e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80030dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80030ee:	2110      	movs	r1, #16
 80030f0:	6938      	ldr	r0, [r7, #16]
 80030f2:	f003 fc4f 	bl	8006994 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80030f6:	6938      	ldr	r0, [r7, #16]
 80030f8:	f003 fc80 	bl	80069fc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fe56 	bl	8006db4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f006 fc23 	bl	8009954 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f003 fd38 	bl	8006b88 <USB_ReadInterrupts>
 8003118:	4603      	mov	r3, r0
 800311a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800311e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003122:	d102      	bne.n	800312a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f001 f89e 	bl	8004266 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f003 fd2a 	bl	8006b88 <USB_ReadInterrupts>
 8003134:	4603      	mov	r3, r0
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b08      	cmp	r3, #8
 800313c:	d106      	bne.n	800314c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f006 fbec 	bl	800991c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2208      	movs	r2, #8
 800314a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f003 fd19 	bl	8006b88 <USB_ReadInterrupts>
 8003156:	4603      	mov	r3, r0
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b10      	cmp	r3, #16
 800315e:	d101      	bne.n	8003164 <HAL_HCD_IRQHandler+0x158>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_HCD_IRQHandler+0x15a>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d012      	beq.n	8003190 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0210 	bic.w	r2, r2, #16
 8003178:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 ffa1 	bl	80040c2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0210 	orr.w	r2, r2, #16
 800318e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fcf7 	bl	8006b88 <USB_ReadInterrupts>
 800319a:	4603      	mov	r3, r0
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031a4:	d13a      	bne.n	800321c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f004 f92c 	bl	8007408 <USB_HC_ReadInterrupt>
 80031b0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e025      	b.n	8003204 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d018      	beq.n	80031fe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e2:	d106      	bne.n	80031f2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8ab 	bl	8003346 <HCD_HC_IN_IRQHandler>
 80031f0:	e005      	b.n	80031fe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	4619      	mov	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fbf9 	bl	80039f0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	3301      	adds	r3, #1
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	429a      	cmp	r2, r3
 800320c:	d3d4      	bcc.n	80031b8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003216:	615a      	str	r2, [r3, #20]
 8003218:	e000      	b.n	800321c <HAL_HCD_IRQHandler+0x210>
      return;
 800321a:	bf00      	nop
    }
  }
}
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_HCD_Start+0x16>
 8003234:	2302      	movs	r3, #2
 8003236:	e013      	b.n	8003260 <HAL_HCD_Start+0x3e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2101      	movs	r1, #1
 8003246:	4618      	mov	r0, r3
 8003248:	f003 fe18 	bl	8006e7c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f003 fb30 	bl	80068b6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_HCD_Stop+0x16>
 800327a:	2302      	movs	r3, #2
 800327c:	e00d      	b.n	800329a <HAL_HCD_Stop+0x32>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f004 fa06 	bl	800769c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f003 fdba 	bl	8006e28 <USB_ResetPort>
 80032b4:	4603      	mov	r3, r0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	460b      	mov	r3, r1
 80032c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	3360      	adds	r3, #96	; 0x60
 80032d8:	781b      	ldrb	r3, [r3, #0]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	3350      	adds	r3, #80	; 0x50
 8003300:	681b      	ldr	r3, [r3, #0]
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f003 fdfe 	bl	8006f1c <USB_GetCurrentFrame>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f003 fdd9 	bl	8006eee <USB_GetHostSpeed>
 800333c:	4603      	mov	r3, r0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d11a      	bne.n	80033ac <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4413      	add	r3, r2
 800337e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003382:	461a      	mov	r2, r3
 8003384:	2304      	movs	r3, #4
 8003386:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3361      	adds	r3, #97	; 0x61
 8003396:	2206      	movs	r2, #6
 8003398:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f004 f840 	bl	800742a <USB_HC_Halt>
 80033aa:	e0af      	b.n	800350c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c2:	d11b      	bne.n	80033fc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	461a      	mov	r2, r3
 80033d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	212c      	movs	r1, #44	; 0x2c
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	3361      	adds	r3, #97	; 0x61
 80033e6:	2207      	movs	r2, #7
 80033e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f004 f818 	bl	800742a <USB_HC_Halt>
 80033fa:	e087      	b.n	800350c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b20      	cmp	r3, #32
 8003410:	d109      	bne.n	8003426 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4413      	add	r3, r2
 800341a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341e:	461a      	mov	r2, r3
 8003420:	2320      	movs	r3, #32
 8003422:	6093      	str	r3, [r2, #8]
 8003424:	e072      	b.n	800350c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4413      	add	r3, r2
 800342e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b08      	cmp	r3, #8
 800343a:	d11a      	bne.n	8003472 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	461a      	mov	r2, r3
 800344a:	2308      	movs	r3, #8
 800344c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	3361      	adds	r3, #97	; 0x61
 800345c:	2205      	movs	r2, #5
 800345e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	4611      	mov	r1, r2
 800346a:	4618      	mov	r0, r3
 800346c:	f003 ffdd 	bl	800742a <USB_HC_Halt>
 8003470:	e04c      	b.n	800350c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003488:	d11b      	bne.n	80034c2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4413      	add	r3, r2
 8003492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003496:	461a      	mov	r2, r3
 8003498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800349c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3361      	adds	r3, #97	; 0x61
 80034ac:	2208      	movs	r2, #8
 80034ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f003 ffb5 	bl	800742a <USB_HC_Halt>
 80034c0:	e024      	b.n	800350c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b80      	cmp	r3, #128	; 0x80
 80034d6:	d119      	bne.n	800350c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e4:	461a      	mov	r2, r3
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3361      	adds	r3, #97	; 0x61
 80034f8:	2206      	movs	r2, #6
 80034fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f003 ff8f 	bl	800742a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003522:	d112      	bne.n	800354a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f003 ff7b 	bl	800742a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	461a      	mov	r2, r3
 8003542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003546:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003548:	e24e      	b.n	80039e8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4413      	add	r3, r2
 8003552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	f040 80df 	bne.w	8003720 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d019      	beq.n	800359e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3348      	adds	r3, #72	; 0x48
 8003578:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	0159      	lsls	r1, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	440b      	add	r3, r1
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800358c:	1ad2      	subs	r2, r2, r3
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	202c      	movs	r0, #44	; 0x2c
 8003594:	fb00 f303 	mul.w	r3, r0, r3
 8003598:	440b      	add	r3, r1
 800359a:	3350      	adds	r3, #80	; 0x50
 800359c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	3361      	adds	r3, #97	; 0x61
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	212c      	movs	r1, #44	; 0x2c
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	335c      	adds	r3, #92	; 0x5c
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ce:	461a      	mov	r2, r3
 80035d0:	2301      	movs	r3, #1
 80035d2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	333f      	adds	r3, #63	; 0x3f
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d009      	beq.n	80035fc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	333f      	adds	r3, #63	; 0x3f
 80035f6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d111      	bne.n	8003620 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f003 ff0f 	bl	800742a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003618:	461a      	mov	r2, r3
 800361a:	2310      	movs	r3, #16
 800361c:	6093      	str	r3, [r2, #8]
 800361e:	e03a      	b.n	8003696 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	333f      	adds	r3, #63	; 0x3f
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d009      	beq.n	8003648 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	333f      	adds	r3, #63	; 0x3f
 8003642:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003644:	2b01      	cmp	r3, #1
 8003646:	d126      	bne.n	8003696 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	0151      	lsls	r1, r2, #5
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	440a      	add	r2, r1
 800365e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003662:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003666:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	3360      	adds	r3, #96	; 0x60
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	b2d9      	uxtb	r1, r3
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	202c      	movs	r0, #44	; 0x2c
 8003684:	fb00 f303 	mul.w	r3, r0, r3
 8003688:	4413      	add	r3, r2
 800368a:	3360      	adds	r3, #96	; 0x60
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f006 f96d 	bl	8009970 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d12b      	bne.n	80036f6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	3348      	adds	r3, #72	; 0x48
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	202c      	movs	r0, #44	; 0x2c
 80036b4:	fb00 f202 	mul.w	r2, r0, r2
 80036b8:	440a      	add	r2, r1
 80036ba:	3240      	adds	r2, #64	; 0x40
 80036bc:	8812      	ldrh	r2, [r2, #0]
 80036be:	fbb3 f3f2 	udiv	r3, r3, r2
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 818e 	beq.w	80039e8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3354      	adds	r3, #84	; 0x54
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	f083 0301 	eor.w	r3, r3, #1
 80036e0:	b2d8      	uxtb	r0, r3
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3354      	adds	r3, #84	; 0x54
 80036f0:	4602      	mov	r2, r0
 80036f2:	701a      	strb	r2, [r3, #0]
}
 80036f4:	e178      	b.n	80039e8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	212c      	movs	r1, #44	; 0x2c
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	4413      	add	r3, r2
 8003702:	3354      	adds	r3, #84	; 0x54
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	f083 0301 	eor.w	r3, r3, #1
 800370a:	b2d8      	uxtb	r0, r3
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3354      	adds	r3, #84	; 0x54
 800371a:	4602      	mov	r2, r0
 800371c:	701a      	strb	r2, [r3, #0]
}
 800371e:	e163      	b.n	80039e8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b02      	cmp	r3, #2
 8003734:	f040 80f6 	bne.w	8003924 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	212c      	movs	r1, #44	; 0x2c
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3361      	adds	r3, #97	; 0x61
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d109      	bne.n	8003760 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	3360      	adds	r3, #96	; 0x60
 800375a:	2201      	movs	r2, #1
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e0c9      	b.n	80038f4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	212c      	movs	r1, #44	; 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	3361      	adds	r3, #97	; 0x61
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b05      	cmp	r3, #5
 8003772:	d109      	bne.n	8003788 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3360      	adds	r3, #96	; 0x60
 8003782:	2205      	movs	r2, #5
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e0b5      	b.n	80038f4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3361      	adds	r3, #97	; 0x61
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b06      	cmp	r3, #6
 800379a:	d009      	beq.n	80037b0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	3361      	adds	r3, #97	; 0x61
 80037aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d150      	bne.n	8003852 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	335c      	adds	r3, #92	; 0x5c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	202c      	movs	r0, #44	; 0x2c
 80037c8:	fb00 f303 	mul.w	r3, r0, r3
 80037cc:	440b      	add	r3, r1
 80037ce:	335c      	adds	r3, #92	; 0x5c
 80037d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	335c      	adds	r3, #92	; 0x5c
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d912      	bls.n	800380c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	335c      	adds	r3, #92	; 0x5c
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	212c      	movs	r1, #44	; 0x2c
 80037fe:	fb01 f303 	mul.w	r3, r1, r3
 8003802:	4413      	add	r3, r2
 8003804:	3360      	adds	r3, #96	; 0x60
 8003806:	2204      	movs	r2, #4
 8003808:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800380a:	e073      	b.n	80038f4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3360      	adds	r3, #96	; 0x60
 800381a:	2202      	movs	r2, #2
 800381c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003834:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800383c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4413      	add	r3, r2
 8003846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384a:	461a      	mov	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003850:	e050      	b.n	80038f4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3361      	adds	r3, #97	; 0x61
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d122      	bne.n	80038ac <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	212c      	movs	r1, #44	; 0x2c
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	4413      	add	r3, r2
 8003872:	3360      	adds	r3, #96	; 0x60
 8003874:	2202      	movs	r2, #2
 8003876:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4413      	add	r3, r2
 8003880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800388e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003896:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a4:	461a      	mov	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e023      	b.n	80038f4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3361      	adds	r3, #97	; 0x61
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b07      	cmp	r3, #7
 80038be:	d119      	bne.n	80038f4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	335c      	adds	r3, #92	; 0x5c
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	202c      	movs	r0, #44	; 0x2c
 80038d8:	fb00 f303 	mul.w	r3, r0, r3
 80038dc:	440b      	add	r3, r1
 80038de:	335c      	adds	r3, #92	; 0x5c
 80038e0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	3360      	adds	r3, #96	; 0x60
 80038f0:	2204      	movs	r2, #4
 80038f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	461a      	mov	r2, r3
 8003902:	2302      	movs	r3, #2
 8003904:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	b2d9      	uxtb	r1, r3
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	202c      	movs	r0, #44	; 0x2c
 8003910:	fb00 f303 	mul.w	r3, r0, r3
 8003914:	4413      	add	r3, r2
 8003916:	3360      	adds	r3, #96	; 0x60
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f006 f827 	bl	8009970 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003922:	e061      	b.n	80039e8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b10      	cmp	r3, #16
 8003938:	d156      	bne.n	80039e8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	212c      	movs	r1, #44	; 0x2c
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	4413      	add	r3, r2
 8003946:	333f      	adds	r3, #63	; 0x3f
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d111      	bne.n	8003972 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	212c      	movs	r1, #44	; 0x2c
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	335c      	adds	r3, #92	; 0x5c
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f003 fd5d 	bl	800742a <USB_HC_Halt>
 8003970:	e031      	b.n	80039d6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	333f      	adds	r3, #63	; 0x3f
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	333f      	adds	r3, #63	; 0x3f
 8003994:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003996:	2b02      	cmp	r3, #2
 8003998:	d11d      	bne.n	80039d6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	335c      	adds	r3, #92	; 0x5c
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d110      	bne.n	80039d6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3361      	adds	r3, #97	; 0x61
 80039c2:	2203      	movs	r2, #3
 80039c4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 fd2a 	bl	800742a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e2:	461a      	mov	r2, r3
 80039e4:	2310      	movs	r3, #16
 80039e6:	6093      	str	r3, [r2, #8]
}
 80039e8:	bf00      	nop
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d11a      	bne.n	8003a56 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2304      	movs	r3, #4
 8003a30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	212c      	movs	r1, #44	; 0x2c
 8003a38:	fb01 f303 	mul.w	r3, r1, r3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3361      	adds	r3, #97	; 0x61
 8003a40:	2206      	movs	r2, #6
 8003a42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f003 fceb 	bl	800742a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003a54:	e331      	b.n	80040ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d12e      	bne.n	8003aca <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2320      	movs	r3, #32
 8003a7c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	333d      	adds	r3, #61	; 0x3d
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	f040 8313 	bne.w	80040ba <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	333d      	adds	r3, #61	; 0x3d
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3360      	adds	r3, #96	; 0x60
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f003 fcb1 	bl	800742a <USB_HC_Halt>
}
 8003ac8:	e2f7      	b.n	80040ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae0:	d112      	bne.n	8003b08 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aee:	461a      	mov	r2, r3
 8003af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003af4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f003 fc92 	bl	800742a <USB_HC_Halt>
}
 8003b06:	e2d8      	b.n	80040ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d140      	bne.n	8003ba0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	212c      	movs	r1, #44	; 0x2c
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	335c      	adds	r3, #92	; 0x5c
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d111      	bne.n	8003b6a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	333d      	adds	r3, #61	; 0x3d
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b64:	461a      	mov	r2, r3
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b76:	461a      	mov	r2, r3
 8003b78:	2301      	movs	r3, #1
 8003b7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	3361      	adds	r3, #97	; 0x61
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f003 fc46 	bl	800742a <USB_HC_Halt>
}
 8003b9e:	e28c      	b.n	80040ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b40      	cmp	r3, #64	; 0x40
 8003bb4:	d12c      	bne.n	8003c10 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	212c      	movs	r1, #44	; 0x2c
 8003bbc:	fb01 f303 	mul.w	r3, r1, r3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3361      	adds	r3, #97	; 0x61
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	333d      	adds	r3, #61	; 0x3d
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	335c      	adds	r3, #92	; 0x5c
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f003 fc17 	bl	800742a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2340      	movs	r3, #64	; 0x40
 8003c0c:	6093      	str	r3, [r2, #8]
}
 8003c0e:	e254      	b.n	80040ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d11a      	bne.n	8003c5c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c32:	461a      	mov	r2, r3
 8003c34:	2308      	movs	r3, #8
 8003c36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3361      	adds	r3, #97	; 0x61
 8003c46:	2205      	movs	r2, #5
 8003c48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f003 fbe8 	bl	800742a <USB_HC_Halt>
}
 8003c5a:	e22e      	b.n	80040ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d140      	bne.n	8003cf4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	335c      	adds	r3, #92	; 0x5c
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	212c      	movs	r1, #44	; 0x2c
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	3361      	adds	r3, #97	; 0x61
 8003c92:	2203      	movs	r2, #3
 8003c94:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	333d      	adds	r3, #61	; 0x3d
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d112      	bne.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	333c      	adds	r3, #60	; 0x3c
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d108      	bne.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	212c      	movs	r1, #44	; 0x2c
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	333d      	adds	r3, #61	; 0x3d
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	4611      	mov	r1, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f003 fba5 	bl	800742a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cec:	461a      	mov	r2, r3
 8003cee:	2310      	movs	r3, #16
 8003cf0:	6093      	str	r3, [r2, #8]
}
 8003cf2:	e1e2      	b.n	80040ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d06:	2b80      	cmp	r3, #128	; 0x80
 8003d08:	d164      	bne.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d111      	bne.n	8003d36 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3361      	adds	r3, #97	; 0x61
 8003d20:	2206      	movs	r2, #6
 8003d22:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f003 fb7b 	bl	800742a <USB_HC_Halt>
 8003d34:	e044      	b.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	212c      	movs	r1, #44	; 0x2c
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	335c      	adds	r3, #92	; 0x5c
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	202c      	movs	r0, #44	; 0x2c
 8003d4e:	fb00 f303 	mul.w	r3, r0, r3
 8003d52:	440b      	add	r3, r1
 8003d54:	335c      	adds	r3, #92	; 0x5c
 8003d56:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	212c      	movs	r1, #44	; 0x2c
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	4413      	add	r3, r2
 8003d64:	335c      	adds	r3, #92	; 0x5c
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d920      	bls.n	8003dae <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	212c      	movs	r1, #44	; 0x2c
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	335c      	adds	r3, #92	; 0x5c
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	212c      	movs	r1, #44	; 0x2c
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	3360      	adds	r3, #96	; 0x60
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	b2d9      	uxtb	r1, r3
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	202c      	movs	r0, #44	; 0x2c
 8003d9a:	fb00 f303 	mul.w	r3, r0, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	3360      	adds	r3, #96	; 0x60
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f005 fde2 	bl	8009970 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003dac:	e008      	b.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	212c      	movs	r1, #44	; 0x2c
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	4413      	add	r3, r2
 8003dba:	3360      	adds	r3, #96	; 0x60
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	461a      	mov	r2, r3
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	6093      	str	r3, [r2, #8]
}
 8003dd2:	e172      	b.n	80040ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dea:	d11b      	bne.n	8003e24 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	212c      	movs	r1, #44	; 0x2c
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	3361      	adds	r3, #97	; 0x61
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f003 fb0e 	bl	800742a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e20:	6093      	str	r3, [r2, #8]
}
 8003e22:	e14a      	b.n	80040ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	f040 813f 	bne.w	80040ba <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	212c      	movs	r1, #44	; 0x2c
 8003e42:	fb01 f303 	mul.w	r3, r1, r3
 8003e46:	4413      	add	r3, r2
 8003e48:	3361      	adds	r3, #97	; 0x61
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d17d      	bne.n	8003f4c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	212c      	movs	r1, #44	; 0x2c
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3360      	adds	r3, #96	; 0x60
 8003e5e:	2201      	movs	r2, #1
 8003e60:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	212c      	movs	r1, #44	; 0x2c
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	333f      	adds	r3, #63	; 0x3f
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d00a      	beq.n	8003e8c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	212c      	movs	r1, #44	; 0x2c
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	333f      	adds	r3, #63	; 0x3f
 8003e84:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	f040 8100 	bne.w	800408c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d113      	bne.n	8003ebc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3355      	adds	r3, #85	; 0x55
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	f083 0301 	eor.w	r3, r3, #1
 8003ea8:	b2d8      	uxtb	r0, r3
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	212c      	movs	r1, #44	; 0x2c
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3355      	adds	r3, #85	; 0x55
 8003eb8:	4602      	mov	r2, r0
 8003eba:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	f040 80e3 	bne.w	800408c <HCD_HC_OUT_IRQHandler+0x69c>
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	212c      	movs	r1, #44	; 0x2c
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	334c      	adds	r3, #76	; 0x4c
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80d8 	beq.w	800408c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	212c      	movs	r1, #44	; 0x2c
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	334c      	adds	r3, #76	; 0x4c
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	202c      	movs	r0, #44	; 0x2c
 8003ef2:	fb00 f202 	mul.w	r2, r0, r2
 8003ef6:	440a      	add	r2, r1
 8003ef8:	3240      	adds	r2, #64	; 0x40
 8003efa:	8812      	ldrh	r2, [r2, #0]
 8003efc:	4413      	add	r3, r2
 8003efe:	3b01      	subs	r3, #1
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	202c      	movs	r0, #44	; 0x2c
 8003f06:	fb00 f202 	mul.w	r2, r0, r2
 8003f0a:	440a      	add	r2, r1
 8003f0c:	3240      	adds	r2, #64	; 0x40
 8003f0e:	8812      	ldrh	r2, [r2, #0]
 8003f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80b5 	beq.w	800408c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3355      	adds	r3, #85	; 0x55
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	f083 0301 	eor.w	r3, r3, #1
 8003f36:	b2d8      	uxtb	r0, r3
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	212c      	movs	r1, #44	; 0x2c
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	3355      	adds	r3, #85	; 0x55
 8003f46:	4602      	mov	r2, r0
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e09f      	b.n	800408c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	212c      	movs	r1, #44	; 0x2c
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	3361      	adds	r3, #97	; 0x61
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d109      	bne.n	8003f74 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3360      	adds	r3, #96	; 0x60
 8003f6e:	2202      	movs	r2, #2
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	e08b      	b.n	800408c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	212c      	movs	r1, #44	; 0x2c
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	4413      	add	r3, r2
 8003f80:	3361      	adds	r3, #97	; 0x61
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d109      	bne.n	8003f9c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	212c      	movs	r1, #44	; 0x2c
 8003f8e:	fb01 f303 	mul.w	r3, r1, r3
 8003f92:	4413      	add	r3, r2
 8003f94:	3360      	adds	r3, #96	; 0x60
 8003f96:	2202      	movs	r2, #2
 8003f98:	701a      	strb	r2, [r3, #0]
 8003f9a:	e077      	b.n	800408c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	212c      	movs	r1, #44	; 0x2c
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3361      	adds	r3, #97	; 0x61
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	d109      	bne.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	212c      	movs	r1, #44	; 0x2c
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	4413      	add	r3, r2
 8003fbc:	3360      	adds	r3, #96	; 0x60
 8003fbe:	2205      	movs	r2, #5
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e063      	b.n	800408c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	212c      	movs	r1, #44	; 0x2c
 8003fca:	fb01 f303 	mul.w	r3, r1, r3
 8003fce:	4413      	add	r3, r2
 8003fd0:	3361      	adds	r3, #97	; 0x61
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b06      	cmp	r3, #6
 8003fd6:	d009      	beq.n	8003fec <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	212c      	movs	r1, #44	; 0x2c
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3361      	adds	r3, #97	; 0x61
 8003fe6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d14f      	bne.n	800408c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	212c      	movs	r1, #44	; 0x2c
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	335c      	adds	r3, #92	; 0x5c
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	202c      	movs	r0, #44	; 0x2c
 8004004:	fb00 f303 	mul.w	r3, r0, r3
 8004008:	440b      	add	r3, r1
 800400a:	335c      	adds	r3, #92	; 0x5c
 800400c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	212c      	movs	r1, #44	; 0x2c
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	4413      	add	r3, r2
 800401a:	335c      	adds	r3, #92	; 0x5c
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d912      	bls.n	8004048 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	335c      	adds	r3, #92	; 0x5c
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	212c      	movs	r1, #44	; 0x2c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	3360      	adds	r3, #96	; 0x60
 8004042:	2204      	movs	r2, #4
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e021      	b.n	800408c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	212c      	movs	r1, #44	; 0x2c
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	4413      	add	r3, r2
 8004054:	3360      	adds	r3, #96	; 0x60
 8004056:	2202      	movs	r2, #2
 8004058:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	4413      	add	r3, r2
 8004062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004070:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004078:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	4413      	add	r3, r2
 8004082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004086:	461a      	mov	r2, r3
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	4413      	add	r3, r2
 8004094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004098:	461a      	mov	r2, r3
 800409a:	2302      	movs	r3, #2
 800409c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	b2d9      	uxtb	r1, r3
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	202c      	movs	r0, #44	; 0x2c
 80040a8:	fb00 f303 	mul.w	r3, r0, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	3360      	adds	r3, #96	; 0x60
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f005 fc5b 	bl	8009970 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80040ba:	bf00      	nop
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b08a      	sub	sp, #40	; 0x28
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	0c5b      	lsrs	r3, r3, #17
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040f6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d004      	beq.n	8004108 <HCD_RXQLVL_IRQHandler+0x46>
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2b05      	cmp	r3, #5
 8004102:	f000 80a9 	beq.w	8004258 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004106:	e0aa      	b.n	800425e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80a6 	beq.w	800425c <HCD_RXQLVL_IRQHandler+0x19a>
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	212c      	movs	r1, #44	; 0x2c
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	3344      	adds	r3, #68	; 0x44
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 809b 	beq.w	800425c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	212c      	movs	r1, #44	; 0x2c
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	4413      	add	r3, r2
 8004132:	3350      	adds	r3, #80	; 0x50
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	441a      	add	r2, r3
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	202c      	movs	r0, #44	; 0x2c
 8004140:	fb00 f303 	mul.w	r3, r0, r3
 8004144:	440b      	add	r3, r1
 8004146:	334c      	adds	r3, #76	; 0x4c
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d87a      	bhi.n	8004244 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	3344      	adds	r3, #68	; 0x44
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	b292      	uxth	r2, r2
 8004166:	4619      	mov	r1, r3
 8004168:	f002 fcb6 	bl	8006ad8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	212c      	movs	r1, #44	; 0x2c
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	4413      	add	r3, r2
 8004178:	3344      	adds	r3, #68	; 0x44
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	441a      	add	r2, r3
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	202c      	movs	r0, #44	; 0x2c
 8004186:	fb00 f303 	mul.w	r3, r0, r3
 800418a:	440b      	add	r3, r1
 800418c:	3344      	adds	r3, #68	; 0x44
 800418e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	212c      	movs	r1, #44	; 0x2c
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	3350      	adds	r3, #80	; 0x50
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	441a      	add	r2, r3
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	202c      	movs	r0, #44	; 0x2c
 80041aa:	fb00 f303 	mul.w	r3, r0, r3
 80041ae:	440b      	add	r3, r1
 80041b0:	3350      	adds	r3, #80	; 0x50
 80041b2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	0cdb      	lsrs	r3, r3, #19
 80041c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	212c      	movs	r1, #44	; 0x2c
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	3340      	adds	r3, #64	; 0x40
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	4293      	cmp	r3, r2
 80041e0:	d13c      	bne.n	800425c <HCD_RXQLVL_IRQHandler+0x19a>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d039      	beq.n	800425c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041fe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004206:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004214:	461a      	mov	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	212c      	movs	r1, #44	; 0x2c
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	4413      	add	r3, r2
 8004226:	3354      	adds	r3, #84	; 0x54
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	f083 0301 	eor.w	r3, r3, #1
 800422e:	b2d8      	uxtb	r0, r3
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	4413      	add	r3, r2
 800423c:	3354      	adds	r3, #84	; 0x54
 800423e:	4602      	mov	r2, r0
 8004240:	701a      	strb	r2, [r3, #0]
      break;
 8004242:	e00b      	b.n	800425c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	212c      	movs	r1, #44	; 0x2c
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	3360      	adds	r3, #96	; 0x60
 8004252:	2204      	movs	r2, #4
 8004254:	701a      	strb	r2, [r3, #0]
      break;
 8004256:	e001      	b.n	800425c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004258:	bf00      	nop
 800425a:	e000      	b.n	800425e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800425c:	bf00      	nop
  }
}
 800425e:	bf00      	nop
 8004260:	3728      	adds	r7, #40	; 0x28
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b086      	sub	sp, #24
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004292:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b02      	cmp	r3, #2
 800429c:	d10b      	bne.n	80042b6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d102      	bne.n	80042ae <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f005 fb45 	bl	8009938 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f043 0302 	orr.w	r3, r3, #2
 80042b4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d132      	bne.n	8004326 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f043 0308 	orr.w	r3, r3, #8
 80042c6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d126      	bne.n	8004320 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d113      	bne.n	8004302 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80042e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042e4:	d106      	bne.n	80042f4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2102      	movs	r1, #2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f002 fd61 	bl	8006db4 <USB_InitFSLSPClkSel>
 80042f2:	e011      	b.n	8004318 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f002 fd5a 	bl	8006db4 <USB_InitFSLSPClkSel>
 8004300:	e00a      	b.n	8004318 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d106      	bne.n	8004318 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004310:	461a      	mov	r2, r3
 8004312:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004316:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f005 fb37 	bl	800998c <HAL_HCD_PortEnabled_Callback>
 800431e:	e002      	b.n	8004326 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f005 fb41 	bl	80099a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b20      	cmp	r3, #32
 800432e:	d103      	bne.n	8004338 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f043 0320 	orr.w	r3, r3, #32
 8004336:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	6013      	str	r3, [r2, #0]
}
 8004344:	bf00      	nop
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e12b      	b.n	80045b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fc fd02 	bl	8000d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2224      	movs	r2, #36	; 0x24
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800439e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043b0:	f001 fa20 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 80043b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4a81      	ldr	r2, [pc, #516]	; (80045c0 <HAL_I2C_Init+0x274>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d807      	bhi.n	80043d0 <HAL_I2C_Init+0x84>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a80      	ldr	r2, [pc, #512]	; (80045c4 <HAL_I2C_Init+0x278>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	bf94      	ite	ls
 80043c8:	2301      	movls	r3, #1
 80043ca:	2300      	movhi	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e006      	b.n	80043de <HAL_I2C_Init+0x92>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a7d      	ldr	r2, [pc, #500]	; (80045c8 <HAL_I2C_Init+0x27c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bf94      	ite	ls
 80043d8:	2301      	movls	r3, #1
 80043da:	2300      	movhi	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0e7      	b.n	80045b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a78      	ldr	r2, [pc, #480]	; (80045cc <HAL_I2C_Init+0x280>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0c9b      	lsrs	r3, r3, #18
 80043f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4a6a      	ldr	r2, [pc, #424]	; (80045c0 <HAL_I2C_Init+0x274>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d802      	bhi.n	8004420 <HAL_I2C_Init+0xd4>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	3301      	adds	r3, #1
 800441e:	e009      	b.n	8004434 <HAL_I2C_Init+0xe8>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	4a69      	ldr	r2, [pc, #420]	; (80045d0 <HAL_I2C_Init+0x284>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	099b      	lsrs	r3, r3, #6
 8004432:	3301      	adds	r3, #1
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	430b      	orrs	r3, r1
 800443a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004446:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	495c      	ldr	r1, [pc, #368]	; (80045c0 <HAL_I2C_Init+0x274>)
 8004450:	428b      	cmp	r3, r1
 8004452:	d819      	bhi.n	8004488 <HAL_I2C_Init+0x13c>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1e59      	subs	r1, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004462:	1c59      	adds	r1, r3, #1
 8004464:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004468:	400b      	ands	r3, r1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_I2C_Init+0x138>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1e59      	subs	r1, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	fbb1 f3f3 	udiv	r3, r1, r3
 800447c:	3301      	adds	r3, #1
 800447e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004482:	e051      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004484:	2304      	movs	r3, #4
 8004486:	e04f      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d111      	bne.n	80044b4 <HAL_I2C_Init+0x168>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1e58      	subs	r0, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	440b      	add	r3, r1
 800449e:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e012      	b.n	80044da <HAL_I2C_Init+0x18e>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1e58      	subs	r0, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	0099      	lsls	r1, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ca:	3301      	adds	r3, #1
 80044cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_I2C_Init+0x196>
 80044de:	2301      	movs	r3, #1
 80044e0:	e022      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10e      	bne.n	8004508 <HAL_I2C_Init+0x1bc>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1e58      	subs	r0, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	440b      	add	r3, r1
 80044f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fc:	3301      	adds	r3, #1
 80044fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004506:	e00f      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1e58      	subs	r0, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	0099      	lsls	r1, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	fbb0 f3f3 	udiv	r3, r0, r3
 800451e:	3301      	adds	r3, #1
 8004520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004524:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	6809      	ldr	r1, [r1, #0]
 800452c:	4313      	orrs	r3, r2
 800452e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004556:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6911      	ldr	r1, [r2, #16]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68d2      	ldr	r2, [r2, #12]
 8004562:	4311      	orrs	r1, r2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	430b      	orrs	r3, r1
 800456a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	000186a0 	.word	0x000186a0
 80045c4:	001e847f 	.word	0x001e847f
 80045c8:	003d08ff 	.word	0x003d08ff
 80045cc:	431bde83 	.word	0x431bde83
 80045d0:	10624dd3 	.word	0x10624dd3

080045d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e128      	b.n	8004838 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a90      	ldr	r2, [pc, #576]	; (8004840 <HAL_I2S_Init+0x26c>)
 80045fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7fc fc03 	bl	8000e0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800461c:	f023 030f 	bic.w	r3, r3, #15
 8004620:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2202      	movs	r2, #2
 8004628:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d060      	beq.n	80046f4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d102      	bne.n	8004640 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800463a:	2310      	movs	r3, #16
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e001      	b.n	8004644 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004640:	2320      	movs	r3, #32
 8004642:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b20      	cmp	r3, #32
 800464a:	d802      	bhi.n	8004652 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004652:	2001      	movs	r0, #1
 8004654:	f001 f9d2 	bl	80059fc <HAL_RCCEx_GetPeriphCLKFreq>
 8004658:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004662:	d125      	bne.n	80046b0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d010      	beq.n	800468e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	fbb2 f2f3 	udiv	r2, r2, r3
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	461a      	mov	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	3305      	adds	r3, #5
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	e01f      	b.n	80046ce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	fbb2 f2f3 	udiv	r2, r2, r3
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	461a      	mov	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046aa:	3305      	adds	r3, #5
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	e00e      	b.n	80046ce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	461a      	mov	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ca:	3305      	adds	r3, #5
 80046cc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4a5c      	ldr	r2, [pc, #368]	; (8004844 <HAL_I2S_Init+0x270>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	08db      	lsrs	r3, r3, #3
 80046d8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e003      	b.n	80046fc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80046f4:	2302      	movs	r3, #2
 80046f6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d902      	bls.n	8004708 <HAL_I2S_Init+0x134>
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	2bff      	cmp	r3, #255	; 0xff
 8004706:	d907      	bls.n	8004718 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470c:	f043 0210 	orr.w	r2, r3, #16
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e08f      	b.n	8004838 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	ea42 0103 	orr.w	r1, r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	430a      	orrs	r2, r1
 800472a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004736:	f023 030f 	bic.w	r3, r3, #15
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6851      	ldr	r1, [r2, #4]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6892      	ldr	r2, [r2, #8]
 8004742:	4311      	orrs	r1, r2
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68d2      	ldr	r2, [r2, #12]
 8004748:	4311      	orrs	r1, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6992      	ldr	r2, [r2, #24]
 800474e:	430a      	orrs	r2, r1
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800475a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d161      	bne.n	8004828 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a38      	ldr	r2, [pc, #224]	; (8004848 <HAL_I2S_Init+0x274>)
 8004768:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a37      	ldr	r2, [pc, #220]	; (800484c <HAL_I2S_Init+0x278>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d101      	bne.n	8004778 <HAL_I2S_Init+0x1a4>
 8004774:	4b36      	ldr	r3, [pc, #216]	; (8004850 <HAL_I2S_Init+0x27c>)
 8004776:	e001      	b.n	800477c <HAL_I2S_Init+0x1a8>
 8004778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	4932      	ldr	r1, [pc, #200]	; (800484c <HAL_I2S_Init+0x278>)
 8004784:	428a      	cmp	r2, r1
 8004786:	d101      	bne.n	800478c <HAL_I2S_Init+0x1b8>
 8004788:	4a31      	ldr	r2, [pc, #196]	; (8004850 <HAL_I2S_Init+0x27c>)
 800478a:	e001      	b.n	8004790 <HAL_I2S_Init+0x1bc>
 800478c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004790:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004794:	f023 030f 	bic.w	r3, r3, #15
 8004798:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2b      	ldr	r2, [pc, #172]	; (800484c <HAL_I2S_Init+0x278>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d101      	bne.n	80047a8 <HAL_I2S_Init+0x1d4>
 80047a4:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <HAL_I2S_Init+0x27c>)
 80047a6:	e001      	b.n	80047ac <HAL_I2S_Init+0x1d8>
 80047a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ac:	2202      	movs	r2, #2
 80047ae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a25      	ldr	r2, [pc, #148]	; (800484c <HAL_I2S_Init+0x278>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <HAL_I2S_Init+0x1ea>
 80047ba:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_I2S_Init+0x27c>)
 80047bc:	e001      	b.n	80047c2 <HAL_I2S_Init+0x1ee>
 80047be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ce:	d003      	beq.n	80047d8 <HAL_I2S_Init+0x204>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d103      	bne.n	80047e0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80047d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	e001      	b.n	80047e4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80047e0:	2300      	movs	r3, #0
 80047e2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047ee:	4313      	orrs	r3, r2
 80047f0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047f8:	4313      	orrs	r3, r2
 80047fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004802:	4313      	orrs	r3, r2
 8004804:	b29a      	uxth	r2, r3
 8004806:	897b      	ldrh	r3, [r7, #10]
 8004808:	4313      	orrs	r3, r2
 800480a:	b29b      	uxth	r3, r3
 800480c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004810:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a0d      	ldr	r2, [pc, #52]	; (800484c <HAL_I2S_Init+0x278>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d101      	bne.n	8004820 <HAL_I2S_Init+0x24c>
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <HAL_I2S_Init+0x27c>)
 800481e:	e001      	b.n	8004824 <HAL_I2S_Init+0x250>
 8004820:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004824:	897a      	ldrh	r2, [r7, #10]
 8004826:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	0800494b 	.word	0x0800494b
 8004844:	cccccccd 	.word	0xcccccccd
 8004848:	08004a61 	.word	0x08004a61
 800484c:	40003800 	.word	0x40003800
 8004850:	40003400 	.word	0x40003400

08004854 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	881a      	ldrh	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	1c9a      	adds	r2, r3, #2
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10e      	bne.n	80048e4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048d4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ffb8 	bl	8004854 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	b292      	uxth	r2, r2
 8004900:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	1c9a      	adds	r2, r3, #2
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10e      	bne.n	8004942 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004932:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ff93 	bl	8004868 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b086      	sub	sp, #24
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b04      	cmp	r3, #4
 8004964:	d13a      	bne.n	80049dc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b01      	cmp	r3, #1
 800496e:	d109      	bne.n	8004984 <I2S_IRQHandler+0x3a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d102      	bne.n	8004984 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff ffb4 	bl	80048ec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d126      	bne.n	80049dc <I2S_IRQHandler+0x92>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b20      	cmp	r3, #32
 800499a:	d11f      	bne.n	80049dc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049ac:	2300      	movs	r3, #0
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f043 0202 	orr.w	r2, r3, #2
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff ff50 	bl	800487c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d136      	bne.n	8004a56 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d109      	bne.n	8004a06 <I2S_IRQHandler+0xbc>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	2b80      	cmp	r3, #128	; 0x80
 80049fe:	d102      	bne.n	8004a06 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff ff45 	bl	8004890 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d122      	bne.n	8004a56 <I2S_IRQHandler+0x10c>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d11b      	bne.n	8004a56 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a2c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a48:	f043 0204 	orr.w	r2, r3, #4
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff ff13 	bl	800487c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a56:	bf00      	nop
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a92      	ldr	r2, [pc, #584]	; (8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004a7a:	4b92      	ldr	r3, [pc, #584]	; (8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a7c:	e001      	b.n	8004a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004a7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a8b      	ldr	r2, [pc, #556]	; (8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d101      	bne.n	8004a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004a98:	4b8a      	ldr	r3, [pc, #552]	; (8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a9a:	e001      	b.n	8004aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004a9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aac:	d004      	beq.n	8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f040 8099 	bne.w	8004bea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d107      	bne.n	8004ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f925 	bl	8004d1c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d107      	bne.n	8004aec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f9c8 	bl	8004e7c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d13a      	bne.n	8004b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d035      	beq.n	8004b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a6e      	ldr	r2, [pc, #440]	; (8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d101      	bne.n	8004b0e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004b0a:	4b6e      	ldr	r3, [pc, #440]	; (8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b0c:	e001      	b.n	8004b12 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004b0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4969      	ldr	r1, [pc, #420]	; (8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b1a:	428b      	cmp	r3, r1
 8004b1c:	d101      	bne.n	8004b22 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004b1e:	4b69      	ldr	r3, [pc, #420]	; (8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b20:	e001      	b.n	8004b26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004b22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b2a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b3a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	f043 0202 	orr.w	r2, r3, #2
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fe88 	bl	800487c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	f040 80c3 	bne.w	8004cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80bd 	beq.w	8004cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b92:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a49      	ldr	r2, [pc, #292]	; (8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d101      	bne.n	8004ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004b9e:	4b49      	ldr	r3, [pc, #292]	; (8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ba0:	e001      	b.n	8004ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004ba2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4944      	ldr	r1, [pc, #272]	; (8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bae:	428b      	cmp	r3, r1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004bb2:	4b44      	ldr	r3, [pc, #272]	; (8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bb4:	e001      	b.n	8004bba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004bb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bbe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	60bb      	str	r3, [r7, #8]
 8004bcc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	f043 0204 	orr.w	r2, r3, #4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff fe4a 	bl	800487c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004be8:	e089      	b.n	8004cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d107      	bne.n	8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8be 	bl	8004d80 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d107      	bne.n	8004c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8fd 	bl	8004e18 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	2b40      	cmp	r3, #64	; 0x40
 8004c26:	d12f      	bne.n	8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02a      	beq.n	8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c40:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1e      	ldr	r2, [pc, #120]	; (8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d101      	bne.n	8004c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c4e:	e001      	b.n	8004c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004c50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4919      	ldr	r1, [pc, #100]	; (8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	d101      	bne.n	8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004c60:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c62:	e001      	b.n	8004c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c6c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	f043 0202 	orr.w	r2, r3, #2
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff fdfa 	bl	800487c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d136      	bne.n	8004d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d031      	beq.n	8004d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a07      	ldr	r2, [pc, #28]	; (8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d101      	bne.n	8004caa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004ca6:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ca8:	e001      	b.n	8004cae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4902      	ldr	r1, [pc, #8]	; (8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cb6:	428b      	cmp	r3, r1
 8004cb8:	d106      	bne.n	8004cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004cba:	4b02      	ldr	r3, [pc, #8]	; (8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cbc:	e006      	b.n	8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004cbe:	bf00      	nop
 8004cc0:	40003800 	.word	0x40003800
 8004cc4:	40003400 	.word	0x40003400
 8004cc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ccc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cd0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ce0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	f043 0204 	orr.w	r2, r3, #4
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff fdc0 	bl	800487c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cfc:	e000      	b.n	8004d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004cfe:	bf00      	nop
}
 8004d00:	bf00      	nop
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	1c99      	adds	r1, r3, #2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6251      	str	r1, [r2, #36]	; 0x24
 8004d2e:	881a      	ldrh	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d113      	bne.n	8004d76 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff ffc9 	bl	8004d08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	1c99      	adds	r1, r3, #2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6251      	str	r1, [r2, #36]	; 0x24
 8004d92:	8819      	ldrh	r1, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <I2SEx_TxISR_I2SExt+0x90>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d101      	bne.n	8004da2 <I2SEx_TxISR_I2SExt+0x22>
 8004d9e:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <I2SEx_TxISR_I2SExt+0x94>)
 8004da0:	e001      	b.n	8004da6 <I2SEx_TxISR_I2SExt+0x26>
 8004da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004da6:	460a      	mov	r2, r1
 8004da8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d121      	bne.n	8004e06 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a12      	ldr	r2, [pc, #72]	; (8004e10 <I2SEx_TxISR_I2SExt+0x90>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d101      	bne.n	8004dd0 <I2SEx_TxISR_I2SExt+0x50>
 8004dcc:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <I2SEx_TxISR_I2SExt+0x94>)
 8004dce:	e001      	b.n	8004dd4 <I2SEx_TxISR_I2SExt+0x54>
 8004dd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	490d      	ldr	r1, [pc, #52]	; (8004e10 <I2SEx_TxISR_I2SExt+0x90>)
 8004ddc:	428b      	cmp	r3, r1
 8004dde:	d101      	bne.n	8004de4 <I2SEx_TxISR_I2SExt+0x64>
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <I2SEx_TxISR_I2SExt+0x94>)
 8004de2:	e001      	b.n	8004de8 <I2SEx_TxISR_I2SExt+0x68>
 8004de4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004de8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ff81 	bl	8004d08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40003800 	.word	0x40003800
 8004e14:	40003400 	.word	0x40003400

08004e18 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68d8      	ldr	r0, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	1c99      	adds	r1, r3, #2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e30:	b282      	uxth	r2, r0
 8004e32:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d113      	bne.n	8004e74 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e5a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff ff4a 	bl	8004d08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <I2SEx_RxISR_I2SExt+0x90>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d101      	bne.n	8004e92 <I2SEx_RxISR_I2SExt+0x16>
 8004e8e:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <I2SEx_RxISR_I2SExt+0x94>)
 8004e90:	e001      	b.n	8004e96 <I2SEx_RxISR_I2SExt+0x1a>
 8004e92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e96:	68d8      	ldr	r0, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	1c99      	adds	r1, r3, #2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ea2:	b282      	uxth	r2, r0
 8004ea4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d121      	bne.n	8004f02 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a12      	ldr	r2, [pc, #72]	; (8004f0c <I2SEx_RxISR_I2SExt+0x90>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d101      	bne.n	8004ecc <I2SEx_RxISR_I2SExt+0x50>
 8004ec8:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <I2SEx_RxISR_I2SExt+0x94>)
 8004eca:	e001      	b.n	8004ed0 <I2SEx_RxISR_I2SExt+0x54>
 8004ecc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	490d      	ldr	r1, [pc, #52]	; (8004f0c <I2SEx_RxISR_I2SExt+0x90>)
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	d101      	bne.n	8004ee0 <I2SEx_RxISR_I2SExt+0x64>
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <I2SEx_RxISR_I2SExt+0x94>)
 8004ede:	e001      	b.n	8004ee4 <I2SEx_RxISR_I2SExt+0x68>
 8004ee0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ee4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ee8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff ff03 	bl	8004d08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40003800 	.word	0x40003800
 8004f10:	40003400 	.word	0x40003400

08004f14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e267      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d075      	beq.n	800501e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f32:	4b88      	ldr	r3, [pc, #544]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d00c      	beq.n	8004f58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f3e:	4b85      	ldr	r3, [pc, #532]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d112      	bne.n	8004f70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f4a:	4b82      	ldr	r3, [pc, #520]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f56:	d10b      	bne.n	8004f70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f58:	4b7e      	ldr	r3, [pc, #504]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d05b      	beq.n	800501c <HAL_RCC_OscConfig+0x108>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d157      	bne.n	800501c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e242      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f78:	d106      	bne.n	8004f88 <HAL_RCC_OscConfig+0x74>
 8004f7a:	4b76      	ldr	r3, [pc, #472]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a75      	ldr	r2, [pc, #468]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e01d      	b.n	8004fc4 <HAL_RCC_OscConfig+0xb0>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f90:	d10c      	bne.n	8004fac <HAL_RCC_OscConfig+0x98>
 8004f92:	4b70      	ldr	r3, [pc, #448]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a6f      	ldr	r2, [pc, #444]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	4b6d      	ldr	r3, [pc, #436]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6c      	ldr	r2, [pc, #432]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e00b      	b.n	8004fc4 <HAL_RCC_OscConfig+0xb0>
 8004fac:	4b69      	ldr	r3, [pc, #420]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a68      	ldr	r2, [pc, #416]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	4b66      	ldr	r3, [pc, #408]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a65      	ldr	r2, [pc, #404]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d013      	beq.n	8004ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fcc:	f7fc fa14 	bl	80013f8 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd4:	f7fc fa10 	bl	80013f8 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b64      	cmp	r3, #100	; 0x64
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e207      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe6:	4b5b      	ldr	r3, [pc, #364]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0xc0>
 8004ff2:	e014      	b.n	800501e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff4:	f7fc fa00 	bl	80013f8 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7fc f9fc 	bl	80013f8 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	; 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e1f3      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500e:	4b51      	ldr	r3, [pc, #324]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0xe8>
 800501a:	e000      	b.n	800501e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d063      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800502a:	4b4a      	ldr	r3, [pc, #296]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005036:	4b47      	ldr	r3, [pc, #284]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800503e:	2b08      	cmp	r3, #8
 8005040:	d11c      	bne.n	800507c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005042:	4b44      	ldr	r3, [pc, #272]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d116      	bne.n	800507c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504e:	4b41      	ldr	r3, [pc, #260]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_RCC_OscConfig+0x152>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d001      	beq.n	8005066 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e1c7      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005066:	4b3b      	ldr	r3, [pc, #236]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4937      	ldr	r1, [pc, #220]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8005076:	4313      	orrs	r3, r2
 8005078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800507a:	e03a      	b.n	80050f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d020      	beq.n	80050c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005084:	4b34      	ldr	r3, [pc, #208]	; (8005158 <HAL_RCC_OscConfig+0x244>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508a:	f7fc f9b5 	bl	80013f8 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005092:	f7fc f9b1 	bl	80013f8 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e1a8      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a4:	4b2b      	ldr	r3, [pc, #172]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b0:	4b28      	ldr	r3, [pc, #160]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4925      	ldr	r1, [pc, #148]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	600b      	str	r3, [r1, #0]
 80050c4:	e015      	b.n	80050f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c6:	4b24      	ldr	r3, [pc, #144]	; (8005158 <HAL_RCC_OscConfig+0x244>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fc f994 	bl	80013f8 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d4:	f7fc f990 	bl	80013f8 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e187      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e6:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d036      	beq.n	800516c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d016      	beq.n	8005134 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005106:	4b15      	ldr	r3, [pc, #84]	; (800515c <HAL_RCC_OscConfig+0x248>)
 8005108:	2201      	movs	r2, #1
 800510a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510c:	f7fc f974 	bl	80013f8 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005114:	f7fc f970 	bl	80013f8 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e167      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005126:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <HAL_RCC_OscConfig+0x240>)
 8005128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x200>
 8005132:	e01b      	b.n	800516c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005134:	4b09      	ldr	r3, [pc, #36]	; (800515c <HAL_RCC_OscConfig+0x248>)
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513a:	f7fc f95d 	bl	80013f8 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005140:	e00e      	b.n	8005160 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005142:	f7fc f959 	bl	80013f8 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d907      	bls.n	8005160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e150      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
 8005154:	40023800 	.word	0x40023800
 8005158:	42470000 	.word	0x42470000
 800515c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005160:	4b88      	ldr	r3, [pc, #544]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 8005162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ea      	bne.n	8005142 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8097 	beq.w	80052a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800517a:	2300      	movs	r3, #0
 800517c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517e:	4b81      	ldr	r3, [pc, #516]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10f      	bne.n	80051aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	4b7d      	ldr	r3, [pc, #500]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	4a7c      	ldr	r2, [pc, #496]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 8005194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005198:	6413      	str	r3, [r2, #64]	; 0x40
 800519a:	4b7a      	ldr	r3, [pc, #488]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a6:	2301      	movs	r3, #1
 80051a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051aa:	4b77      	ldr	r3, [pc, #476]	; (8005388 <HAL_RCC_OscConfig+0x474>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d118      	bne.n	80051e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b6:	4b74      	ldr	r3, [pc, #464]	; (8005388 <HAL_RCC_OscConfig+0x474>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a73      	ldr	r2, [pc, #460]	; (8005388 <HAL_RCC_OscConfig+0x474>)
 80051bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c2:	f7fc f919 	bl	80013f8 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ca:	f7fc f915 	bl	80013f8 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e10c      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051dc:	4b6a      	ldr	r3, [pc, #424]	; (8005388 <HAL_RCC_OscConfig+0x474>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d106      	bne.n	80051fe <HAL_RCC_OscConfig+0x2ea>
 80051f0:	4b64      	ldr	r3, [pc, #400]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	4a63      	ldr	r2, [pc, #396]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	6713      	str	r3, [r2, #112]	; 0x70
 80051fc:	e01c      	b.n	8005238 <HAL_RCC_OscConfig+0x324>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b05      	cmp	r3, #5
 8005204:	d10c      	bne.n	8005220 <HAL_RCC_OscConfig+0x30c>
 8005206:	4b5f      	ldr	r3, [pc, #380]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	4a5e      	ldr	r2, [pc, #376]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 800520c:	f043 0304 	orr.w	r3, r3, #4
 8005210:	6713      	str	r3, [r2, #112]	; 0x70
 8005212:	4b5c      	ldr	r3, [pc, #368]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005216:	4a5b      	ldr	r2, [pc, #364]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	6713      	str	r3, [r2, #112]	; 0x70
 800521e:	e00b      	b.n	8005238 <HAL_RCC_OscConfig+0x324>
 8005220:	4b58      	ldr	r3, [pc, #352]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 8005222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005224:	4a57      	ldr	r2, [pc, #348]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	6713      	str	r3, [r2, #112]	; 0x70
 800522c:	4b55      	ldr	r3, [pc, #340]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	4a54      	ldr	r2, [pc, #336]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 8005232:	f023 0304 	bic.w	r3, r3, #4
 8005236:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d015      	beq.n	800526c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005240:	f7fc f8da 	bl	80013f8 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005246:	e00a      	b.n	800525e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005248:	f7fc f8d6 	bl	80013f8 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	f241 3288 	movw	r2, #5000	; 0x1388
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e0cb      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525e:	4b49      	ldr	r3, [pc, #292]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0ee      	beq.n	8005248 <HAL_RCC_OscConfig+0x334>
 800526a:	e014      	b.n	8005296 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800526c:	f7fc f8c4 	bl	80013f8 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005272:	e00a      	b.n	800528a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005274:	f7fc f8c0 	bl	80013f8 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e0b5      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800528a:	4b3e      	ldr	r3, [pc, #248]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1ee      	bne.n	8005274 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d105      	bne.n	80052a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800529c:	4b39      	ldr	r3, [pc, #228]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	4a38      	ldr	r2, [pc, #224]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 80052a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 80a1 	beq.w	80053f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052b2:	4b34      	ldr	r3, [pc, #208]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d05c      	beq.n	8005378 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d141      	bne.n	800534a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c6:	4b31      	ldr	r3, [pc, #196]	; (800538c <HAL_RCC_OscConfig+0x478>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fc f894 	bl	80013f8 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fc f890 	bl	80013f8 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e087      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	4b27      	ldr	r3, [pc, #156]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69da      	ldr	r2, [r3, #28]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	019b      	lsls	r3, r3, #6
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	3b01      	subs	r3, #1
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	061b      	lsls	r3, r3, #24
 8005316:	491b      	ldr	r1, [pc, #108]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 8005318:	4313      	orrs	r3, r2
 800531a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800531c:	4b1b      	ldr	r3, [pc, #108]	; (800538c <HAL_RCC_OscConfig+0x478>)
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005322:	f7fc f869 	bl	80013f8 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532a:	f7fc f865 	bl	80013f8 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e05c      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800533c:	4b11      	ldr	r3, [pc, #68]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x416>
 8005348:	e054      	b.n	80053f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534a:	4b10      	ldr	r3, [pc, #64]	; (800538c <HAL_RCC_OscConfig+0x478>)
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fc f852 	bl	80013f8 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005358:	f7fc f84e 	bl	80013f8 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e045      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536a:	4b06      	ldr	r3, [pc, #24]	; (8005384 <HAL_RCC_OscConfig+0x470>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x444>
 8005376:	e03d      	b.n	80053f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d107      	bne.n	8005390 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e038      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
 8005384:	40023800 	.word	0x40023800
 8005388:	40007000 	.word	0x40007000
 800538c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005390:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <HAL_RCC_OscConfig+0x4ec>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d028      	beq.n	80053f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d121      	bne.n	80053f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d11a      	bne.n	80053f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053c0:	4013      	ands	r3, r2
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d111      	bne.n	80053f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	085b      	lsrs	r3, r3, #1
 80053d8:	3b01      	subs	r3, #1
 80053da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053dc:	429a      	cmp	r2, r3
 80053de:	d107      	bne.n	80053f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d001      	beq.n	80053f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40023800 	.word	0x40023800

08005404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e0cc      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005418:	4b68      	ldr	r3, [pc, #416]	; (80055bc <HAL_RCC_ClockConfig+0x1b8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d90c      	bls.n	8005440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005426:	4b65      	ldr	r3, [pc, #404]	; (80055bc <HAL_RCC_ClockConfig+0x1b8>)
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	4b63      	ldr	r3, [pc, #396]	; (80055bc <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0b8      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d020      	beq.n	800548e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005458:	4b59      	ldr	r3, [pc, #356]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	4a58      	ldr	r2, [pc, #352]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005470:	4b53      	ldr	r3, [pc, #332]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	4a52      	ldr	r2, [pc, #328]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800547a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800547c:	4b50      	ldr	r3, [pc, #320]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	494d      	ldr	r1, [pc, #308]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	4313      	orrs	r3, r2
 800548c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d044      	beq.n	8005524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d107      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a2:	4b47      	ldr	r3, [pc, #284]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d119      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e07f      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d003      	beq.n	80054c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d107      	bne.n	80054d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c2:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e06f      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d2:	4b3b      	ldr	r3, [pc, #236]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e067      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054e2:	4b37      	ldr	r3, [pc, #220]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f023 0203 	bic.w	r2, r3, #3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	4934      	ldr	r1, [pc, #208]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054f4:	f7fb ff80 	bl	80013f8 <HAL_GetTick>
 80054f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054fc:	f7fb ff7c 	bl	80013f8 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	; 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e04f      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005512:	4b2b      	ldr	r3, [pc, #172]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 020c 	and.w	r2, r3, #12
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	429a      	cmp	r2, r3
 8005522:	d1eb      	bne.n	80054fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005524:	4b25      	ldr	r3, [pc, #148]	; (80055bc <HAL_RCC_ClockConfig+0x1b8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d20c      	bcs.n	800554c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005532:	4b22      	ldr	r3, [pc, #136]	; (80055bc <HAL_RCC_ClockConfig+0x1b8>)
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800553a:	4b20      	ldr	r3, [pc, #128]	; (80055bc <HAL_RCC_ClockConfig+0x1b8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d001      	beq.n	800554c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e032      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d008      	beq.n	800556a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005558:	4b19      	ldr	r3, [pc, #100]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4916      	ldr	r1, [pc, #88]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	4313      	orrs	r3, r2
 8005568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005576:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	490e      	ldr	r1, [pc, #56]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800558a:	f000 f821 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 800558e:	4602      	mov	r2, r0
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	490a      	ldr	r1, [pc, #40]	; (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 800559c:	5ccb      	ldrb	r3, [r1, r3]
 800559e:	fa22 f303 	lsr.w	r3, r2, r3
 80055a2:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 80055a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055a6:	4b09      	ldr	r3, [pc, #36]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fb fee0 	bl	8001370 <HAL_InitTick>

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40023c00 	.word	0x40023c00
 80055c0:	40023800 	.word	0x40023800
 80055c4:	0800a048 	.word	0x0800a048
 80055c8:	20000000 	.word	0x20000000
 80055cc:	20000004 	.word	0x20000004

080055d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055d4:	b094      	sub	sp, #80	; 0x50
 80055d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	647b      	str	r3, [r7, #68]	; 0x44
 80055dc:	2300      	movs	r3, #0
 80055de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e0:	2300      	movs	r3, #0
 80055e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055e8:	4b79      	ldr	r3, [pc, #484]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 030c 	and.w	r3, r3, #12
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d00d      	beq.n	8005610 <HAL_RCC_GetSysClockFreq+0x40>
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	f200 80e1 	bhi.w	80057bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_RCC_GetSysClockFreq+0x34>
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d003      	beq.n	800560a <HAL_RCC_GetSysClockFreq+0x3a>
 8005602:	e0db      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005604:	4b73      	ldr	r3, [pc, #460]	; (80057d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005606:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005608:	e0db      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800560a:	4b73      	ldr	r3, [pc, #460]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800560c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800560e:	e0d8      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005610:	4b6f      	ldr	r3, [pc, #444]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005618:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800561a:	4b6d      	ldr	r3, [pc, #436]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d063      	beq.n	80056ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005626:	4b6a      	ldr	r3, [pc, #424]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	099b      	lsrs	r3, r3, #6
 800562c:	2200      	movs	r2, #0
 800562e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005630:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005638:	633b      	str	r3, [r7, #48]	; 0x30
 800563a:	2300      	movs	r3, #0
 800563c:	637b      	str	r3, [r7, #52]	; 0x34
 800563e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005642:	4622      	mov	r2, r4
 8005644:	462b      	mov	r3, r5
 8005646:	f04f 0000 	mov.w	r0, #0
 800564a:	f04f 0100 	mov.w	r1, #0
 800564e:	0159      	lsls	r1, r3, #5
 8005650:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005654:	0150      	lsls	r0, r2, #5
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4621      	mov	r1, r4
 800565c:	1a51      	subs	r1, r2, r1
 800565e:	6139      	str	r1, [r7, #16]
 8005660:	4629      	mov	r1, r5
 8005662:	eb63 0301 	sbc.w	r3, r3, r1
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005674:	4659      	mov	r1, fp
 8005676:	018b      	lsls	r3, r1, #6
 8005678:	4651      	mov	r1, sl
 800567a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800567e:	4651      	mov	r1, sl
 8005680:	018a      	lsls	r2, r1, #6
 8005682:	4651      	mov	r1, sl
 8005684:	ebb2 0801 	subs.w	r8, r2, r1
 8005688:	4659      	mov	r1, fp
 800568a:	eb63 0901 	sbc.w	r9, r3, r1
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	f04f 0300 	mov.w	r3, #0
 8005696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800569a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800569e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056a2:	4690      	mov	r8, r2
 80056a4:	4699      	mov	r9, r3
 80056a6:	4623      	mov	r3, r4
 80056a8:	eb18 0303 	adds.w	r3, r8, r3
 80056ac:	60bb      	str	r3, [r7, #8]
 80056ae:	462b      	mov	r3, r5
 80056b0:	eb49 0303 	adc.w	r3, r9, r3
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056c2:	4629      	mov	r1, r5
 80056c4:	024b      	lsls	r3, r1, #9
 80056c6:	4621      	mov	r1, r4
 80056c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056cc:	4621      	mov	r1, r4
 80056ce:	024a      	lsls	r2, r1, #9
 80056d0:	4610      	mov	r0, r2
 80056d2:	4619      	mov	r1, r3
 80056d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d6:	2200      	movs	r2, #0
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056e0:	f7fa fd7a 	bl	80001d8 <__aeabi_uldivmod>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4613      	mov	r3, r2
 80056ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ec:	e058      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ee:	4b38      	ldr	r3, [pc, #224]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	099b      	lsrs	r3, r3, #6
 80056f4:	2200      	movs	r2, #0
 80056f6:	4618      	mov	r0, r3
 80056f8:	4611      	mov	r1, r2
 80056fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056fe:	623b      	str	r3, [r7, #32]
 8005700:	2300      	movs	r3, #0
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005708:	4642      	mov	r2, r8
 800570a:	464b      	mov	r3, r9
 800570c:	f04f 0000 	mov.w	r0, #0
 8005710:	f04f 0100 	mov.w	r1, #0
 8005714:	0159      	lsls	r1, r3, #5
 8005716:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800571a:	0150      	lsls	r0, r2, #5
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4641      	mov	r1, r8
 8005722:	ebb2 0a01 	subs.w	sl, r2, r1
 8005726:	4649      	mov	r1, r9
 8005728:	eb63 0b01 	sbc.w	fp, r3, r1
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005738:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800573c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005740:	ebb2 040a 	subs.w	r4, r2, sl
 8005744:	eb63 050b 	sbc.w	r5, r3, fp
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	00eb      	lsls	r3, r5, #3
 8005752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005756:	00e2      	lsls	r2, r4, #3
 8005758:	4614      	mov	r4, r2
 800575a:	461d      	mov	r5, r3
 800575c:	4643      	mov	r3, r8
 800575e:	18e3      	adds	r3, r4, r3
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	464b      	mov	r3, r9
 8005764:	eb45 0303 	adc.w	r3, r5, r3
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005776:	4629      	mov	r1, r5
 8005778:	028b      	lsls	r3, r1, #10
 800577a:	4621      	mov	r1, r4
 800577c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005780:	4621      	mov	r1, r4
 8005782:	028a      	lsls	r2, r1, #10
 8005784:	4610      	mov	r0, r2
 8005786:	4619      	mov	r1, r3
 8005788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800578a:	2200      	movs	r2, #0
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	61fa      	str	r2, [r7, #28]
 8005790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005794:	f7fa fd20 	bl	80001d8 <__aeabi_uldivmod>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4613      	mov	r3, r2
 800579e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	0c1b      	lsrs	r3, r3, #16
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	3301      	adds	r3, #1
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057ba:	e002      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80057be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3750      	adds	r7, #80	; 0x50
 80057c8:	46bd      	mov	sp, r7
 80057ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ce:	bf00      	nop
 80057d0:	40023800 	.word	0x40023800
 80057d4:	00f42400 	.word	0x00f42400
 80057d8:	007a1200 	.word	0x007a1200

080057dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e0:	4b03      	ldr	r3, [pc, #12]	; (80057f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057e2:	681b      	ldr	r3, [r3, #0]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	20000000 	.word	0x20000000

080057f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057f8:	f7ff fff0 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 80057fc:	4602      	mov	r2, r0
 80057fe:	4b05      	ldr	r3, [pc, #20]	; (8005814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	0a9b      	lsrs	r3, r3, #10
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	4903      	ldr	r1, [pc, #12]	; (8005818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800580a:	5ccb      	ldrb	r3, [r1, r3]
 800580c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005810:	4618      	mov	r0, r3
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40023800 	.word	0x40023800
 8005818:	0800a058 	.word	0x0800a058

0800581c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d105      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005840:	2b00      	cmp	r3, #0
 8005842:	d038      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005844:	4b68      	ldr	r3, [pc, #416]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800584a:	f7fb fdd5 	bl	80013f8 <HAL_GetTick>
 800584e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005850:	e008      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005852:	f7fb fdd1 	bl	80013f8 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e0bd      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005864:	4b61      	ldr	r3, [pc, #388]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1f0      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	071b      	lsls	r3, r3, #28
 8005882:	495a      	ldr	r1, [pc, #360]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800588a:	4b57      	ldr	r3, [pc, #348]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800588c:	2201      	movs	r2, #1
 800588e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005890:	f7fb fdb2 	bl	80013f8 <HAL_GetTick>
 8005894:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005898:	f7fb fdae 	bl	80013f8 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e09a      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058aa:	4b50      	ldr	r3, [pc, #320]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0f0      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 8083 	beq.w	80059ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	4b48      	ldr	r3, [pc, #288]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	4a47      	ldr	r2, [pc, #284]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d2:	6413      	str	r3, [r2, #64]	; 0x40
 80058d4:	4b45      	ldr	r3, [pc, #276]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058e0:	4b43      	ldr	r3, [pc, #268]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a42      	ldr	r2, [pc, #264]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058ec:	f7fb fd84 	bl	80013f8 <HAL_GetTick>
 80058f0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058f4:	f7fb fd80 	bl	80013f8 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e06c      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005906:	4b3a      	ldr	r3, [pc, #232]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005912:	4b36      	ldr	r3, [pc, #216]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d02f      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	429a      	cmp	r2, r3
 800592e:	d028      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005930:	4b2e      	ldr	r3, [pc, #184]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005938:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800593a:	4b2e      	ldr	r3, [pc, #184]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800593c:	2201      	movs	r2, #1
 800593e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005940:	4b2c      	ldr	r3, [pc, #176]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005946:	4a29      	ldr	r2, [pc, #164]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800594c:	4b27      	ldr	r3, [pc, #156]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d114      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005958:	f7fb fd4e 	bl	80013f8 <HAL_GetTick>
 800595c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800595e:	e00a      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005960:	f7fb fd4a 	bl	80013f8 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f241 3288 	movw	r2, #5000	; 0x1388
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e034      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005976:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0ee      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800598e:	d10d      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005990:	4b16      	ldr	r3, [pc, #88]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a4:	4911      	ldr	r1, [pc, #68]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	608b      	str	r3, [r1, #8]
 80059aa:	e005      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	4a0e      	ldr	r2, [pc, #56]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059b6:	6093      	str	r3, [r2, #8]
 80059b8:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c4:	4909      	ldr	r1, [pc, #36]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	7d1a      	ldrb	r2, [r3, #20]
 80059da:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80059dc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	42470068 	.word	0x42470068
 80059ec:	40023800 	.word	0x40023800
 80059f0:	40007000 	.word	0x40007000
 80059f4:	42470e40 	.word	0x42470e40
 80059f8:	424711e0 	.word	0x424711e0

080059fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d140      	bne.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005a1a:	4b24      	ldr	r3, [pc, #144]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d131      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a30:	4b1f      	ldr	r3, [pc, #124]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a32:	617b      	str	r3, [r7, #20]
          break;
 8005a34:	e031      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a36:	4b1d      	ldr	r3, [pc, #116]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a42:	d109      	bne.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a44:	4b19      	ldr	r3, [pc, #100]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a4e:	4a19      	ldr	r2, [pc, #100]	; (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	e008      	b.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a58:	4b14      	ldr	r3, [pc, #80]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a62:	4a15      	ldr	r2, [pc, #84]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a6a:	4b10      	ldr	r3, [pc, #64]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a70:	099b      	lsrs	r3, r3, #6
 8005a72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	fb02 f303 	mul.w	r3, r2, r3
 8005a7c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a84:	0f1b      	lsrs	r3, r3, #28
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]
          break;
 8005a92:	e002      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
          break;
 8005a98:	bf00      	nop
        }
      }
      break;
 8005a9a:	bf00      	nop
    }
  }
  return frequency;
 8005a9c:	697b      	ldr	r3, [r7, #20]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	00bb8000 	.word	0x00bb8000
 8005ab4:	007a1200 	.word	0x007a1200
 8005ab8:	00f42400 	.word	0x00f42400

08005abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e07b      	b.n	8005bc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d108      	bne.n	8005ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ade:	d009      	beq.n	8005af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	61da      	str	r2, [r3, #28]
 8005ae6:	e005      	b.n	8005af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fb fa4a 	bl	8000fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b78:	ea42 0103 	orr.w	r1, r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	0c1b      	lsrs	r3, r3, #16
 8005b92:	f003 0104 	and.w	r1, r3, #4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	f003 0210 	and.w	r2, r3, #16
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e041      	b.n	8005c64 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7fb fa3f 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	f000 fab7 	bl	8006180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e041      	b.n	8005d02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fb f9d0 	bl	8001038 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4610      	mov	r0, r2
 8005cac:	f000 fa68 	bl	8006180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d109      	bne.n	8005d30 <HAL_TIM_PWM_Start+0x24>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	bf14      	ite	ne
 8005d28:	2301      	movne	r3, #1
 8005d2a:	2300      	moveq	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	e022      	b.n	8005d76 <HAL_TIM_PWM_Start+0x6a>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d109      	bne.n	8005d4a <HAL_TIM_PWM_Start+0x3e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	bf14      	ite	ne
 8005d42:	2301      	movne	r3, #1
 8005d44:	2300      	moveq	r3, #0
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	e015      	b.n	8005d76 <HAL_TIM_PWM_Start+0x6a>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d109      	bne.n	8005d64 <HAL_TIM_PWM_Start+0x58>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	bf14      	ite	ne
 8005d5c:	2301      	movne	r3, #1
 8005d5e:	2300      	moveq	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	e008      	b.n	8005d76 <HAL_TIM_PWM_Start+0x6a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	bf14      	ite	ne
 8005d70:	2301      	movne	r3, #1
 8005d72:	2300      	moveq	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e068      	b.n	8005e50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d104      	bne.n	8005d8e <HAL_TIM_PWM_Start+0x82>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d8c:	e013      	b.n	8005db6 <HAL_TIM_PWM_Start+0xaa>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d104      	bne.n	8005d9e <HAL_TIM_PWM_Start+0x92>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d9c:	e00b      	b.n	8005db6 <HAL_TIM_PWM_Start+0xaa>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d104      	bne.n	8005dae <HAL_TIM_PWM_Start+0xa2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dac:	e003      	b.n	8005db6 <HAL_TIM_PWM_Start+0xaa>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2202      	movs	r2, #2
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fc84 	bl	80066cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a23      	ldr	r2, [pc, #140]	; (8005e58 <HAL_TIM_PWM_Start+0x14c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d107      	bne.n	8005dde <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ddc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1d      	ldr	r2, [pc, #116]	; (8005e58 <HAL_TIM_PWM_Start+0x14c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d018      	beq.n	8005e1a <HAL_TIM_PWM_Start+0x10e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df0:	d013      	beq.n	8005e1a <HAL_TIM_PWM_Start+0x10e>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a19      	ldr	r2, [pc, #100]	; (8005e5c <HAL_TIM_PWM_Start+0x150>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00e      	beq.n	8005e1a <HAL_TIM_PWM_Start+0x10e>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <HAL_TIM_PWM_Start+0x154>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d009      	beq.n	8005e1a <HAL_TIM_PWM_Start+0x10e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <HAL_TIM_PWM_Start+0x158>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d004      	beq.n	8005e1a <HAL_TIM_PWM_Start+0x10e>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a14      	ldr	r2, [pc, #80]	; (8005e68 <HAL_TIM_PWM_Start+0x15c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d111      	bne.n	8005e3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b06      	cmp	r3, #6
 8005e2a:	d010      	beq.n	8005e4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0201 	orr.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3c:	e007      	b.n	8005e4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0201 	orr.w	r2, r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40010000 	.word	0x40010000
 8005e5c:	40000400 	.word	0x40000400
 8005e60:	40000800 	.word	0x40000800
 8005e64:	40000c00 	.word	0x40000c00
 8005e68:	40014000 	.word	0x40014000

08005e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e0ae      	b.n	8005fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b0c      	cmp	r3, #12
 8005e96:	f200 809f 	bhi.w	8005fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005ed5 	.word	0x08005ed5
 8005ea4:	08005fd9 	.word	0x08005fd9
 8005ea8:	08005fd9 	.word	0x08005fd9
 8005eac:	08005fd9 	.word	0x08005fd9
 8005eb0:	08005f15 	.word	0x08005f15
 8005eb4:	08005fd9 	.word	0x08005fd9
 8005eb8:	08005fd9 	.word	0x08005fd9
 8005ebc:	08005fd9 	.word	0x08005fd9
 8005ec0:	08005f57 	.word	0x08005f57
 8005ec4:	08005fd9 	.word	0x08005fd9
 8005ec8:	08005fd9 	.word	0x08005fd9
 8005ecc:	08005fd9 	.word	0x08005fd9
 8005ed0:	08005f97 	.word	0x08005f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f9d0 	bl	8006280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0208 	orr.w	r2, r2, #8
 8005eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0204 	bic.w	r2, r2, #4
 8005efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6999      	ldr	r1, [r3, #24]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	619a      	str	r2, [r3, #24]
      break;
 8005f12:	e064      	b.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fa16 	bl	800634c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6999      	ldr	r1, [r3, #24]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	021a      	lsls	r2, r3, #8
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	619a      	str	r2, [r3, #24]
      break;
 8005f54:	e043      	b.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fa61 	bl	8006424 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0208 	orr.w	r2, r2, #8
 8005f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0204 	bic.w	r2, r2, #4
 8005f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69d9      	ldr	r1, [r3, #28]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	61da      	str	r2, [r3, #28]
      break;
 8005f94:	e023      	b.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 faab 	bl	80064f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69d9      	ldr	r1, [r3, #28]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	021a      	lsls	r2, r3, #8
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	61da      	str	r2, [r3, #28]
      break;
 8005fd6:	e002      	b.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	75fb      	strb	r3, [r7, #23]
      break;
 8005fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_TIM_ConfigClockSource+0x1c>
 8006008:	2302      	movs	r3, #2
 800600a:	e0b4      	b.n	8006176 <HAL_TIM_ConfigClockSource+0x186>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800602a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006044:	d03e      	beq.n	80060c4 <HAL_TIM_ConfigClockSource+0xd4>
 8006046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604a:	f200 8087 	bhi.w	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800604e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006052:	f000 8086 	beq.w	8006162 <HAL_TIM_ConfigClockSource+0x172>
 8006056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605a:	d87f      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800605c:	2b70      	cmp	r3, #112	; 0x70
 800605e:	d01a      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0xa6>
 8006060:	2b70      	cmp	r3, #112	; 0x70
 8006062:	d87b      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 8006064:	2b60      	cmp	r3, #96	; 0x60
 8006066:	d050      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x11a>
 8006068:	2b60      	cmp	r3, #96	; 0x60
 800606a:	d877      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800606c:	2b50      	cmp	r3, #80	; 0x50
 800606e:	d03c      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0xfa>
 8006070:	2b50      	cmp	r3, #80	; 0x50
 8006072:	d873      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 8006074:	2b40      	cmp	r3, #64	; 0x40
 8006076:	d058      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x13a>
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	d86f      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b30      	cmp	r3, #48	; 0x30
 800607e:	d064      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x15a>
 8006080:	2b30      	cmp	r3, #48	; 0x30
 8006082:	d86b      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b20      	cmp	r3, #32
 8006086:	d060      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x15a>
 8006088:	2b20      	cmp	r3, #32
 800608a:	d867      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800608c:	2b00      	cmp	r3, #0
 800608e:	d05c      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x15a>
 8006090:	2b10      	cmp	r3, #16
 8006092:	d05a      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x15a>
 8006094:	e062      	b.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6899      	ldr	r1, [r3, #8]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f000 faf1 	bl	800668c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	609a      	str	r2, [r3, #8]
      break;
 80060c2:	e04f      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	6899      	ldr	r1, [r3, #8]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f000 fada 	bl	800668c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060e6:	609a      	str	r2, [r3, #8]
      break;
 80060e8:	e03c      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f000 fa4e 	bl	8006598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2150      	movs	r1, #80	; 0x50
 8006102:	4618      	mov	r0, r3
 8006104:	f000 faa7 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 8006108:	e02c      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6859      	ldr	r1, [r3, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	461a      	mov	r2, r3
 8006118:	f000 fa6d 	bl	80065f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2160      	movs	r1, #96	; 0x60
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fa97 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 8006128:	e01c      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6859      	ldr	r1, [r3, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	461a      	mov	r2, r3
 8006138:	f000 fa2e 	bl	8006598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2140      	movs	r1, #64	; 0x40
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fa87 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 8006148:	e00c      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4619      	mov	r1, r3
 8006154:	4610      	mov	r0, r2
 8006156:	f000 fa7e 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 800615a:	e003      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	73fb      	strb	r3, [r7, #15]
      break;
 8006160:	e000      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a34      	ldr	r2, [pc, #208]	; (8006264 <TIM_Base_SetConfig+0xe4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00f      	beq.n	80061b8 <TIM_Base_SetConfig+0x38>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619e:	d00b      	beq.n	80061b8 <TIM_Base_SetConfig+0x38>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a31      	ldr	r2, [pc, #196]	; (8006268 <TIM_Base_SetConfig+0xe8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d007      	beq.n	80061b8 <TIM_Base_SetConfig+0x38>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a30      	ldr	r2, [pc, #192]	; (800626c <TIM_Base_SetConfig+0xec>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_Base_SetConfig+0x38>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a2f      	ldr	r2, [pc, #188]	; (8006270 <TIM_Base_SetConfig+0xf0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d108      	bne.n	80061ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a25      	ldr	r2, [pc, #148]	; (8006264 <TIM_Base_SetConfig+0xe4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01b      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d8:	d017      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a22      	ldr	r2, [pc, #136]	; (8006268 <TIM_Base_SetConfig+0xe8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a21      	ldr	r2, [pc, #132]	; (800626c <TIM_Base_SetConfig+0xec>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a20      	ldr	r2, [pc, #128]	; (8006270 <TIM_Base_SetConfig+0xf0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1f      	ldr	r2, [pc, #124]	; (8006274 <TIM_Base_SetConfig+0xf4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a1e      	ldr	r2, [pc, #120]	; (8006278 <TIM_Base_SetConfig+0xf8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <TIM_Base_SetConfig+0xfc>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a08      	ldr	r2, [pc, #32]	; (8006264 <TIM_Base_SetConfig+0xe4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d103      	bne.n	8006250 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	615a      	str	r2, [r3, #20]
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40010000 	.word	0x40010000
 8006268:	40000400 	.word	0x40000400
 800626c:	40000800 	.word	0x40000800
 8006270:	40000c00 	.word	0x40000c00
 8006274:	40014000 	.word	0x40014000
 8006278:	40014400 	.word	0x40014400
 800627c:	40014800 	.word	0x40014800

08006280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f023 0302 	bic.w	r3, r3, #2
 80062c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <TIM_OC1_SetConfig+0xc8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d10c      	bne.n	80062f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0308 	bic.w	r3, r3, #8
 80062e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 0304 	bic.w	r3, r3, #4
 80062f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a13      	ldr	r2, [pc, #76]	; (8006348 <TIM_OC1_SetConfig+0xc8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d111      	bne.n	8006322 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800630c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	621a      	str	r2, [r3, #32]
}
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	40010000 	.word	0x40010000

0800634c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	f023 0210 	bic.w	r2, r3, #16
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f023 0320 	bic.w	r3, r3, #32
 8006396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a1e      	ldr	r2, [pc, #120]	; (8006420 <TIM_OC2_SetConfig+0xd4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d10d      	bne.n	80063c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a15      	ldr	r2, [pc, #84]	; (8006420 <TIM_OC2_SetConfig+0xd4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d113      	bne.n	80063f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40010000 	.word	0x40010000

08006424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0303 	bic.w	r3, r3, #3
 800645a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800646c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <TIM_OC3_SetConfig+0xd0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d10d      	bne.n	800649e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800649c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a14      	ldr	r2, [pc, #80]	; (80064f4 <TIM_OC3_SetConfig+0xd0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d113      	bne.n	80064ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	621a      	str	r2, [r3, #32]
}
 80064e8:	bf00      	nop
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	40010000 	.word	0x40010000

080064f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	031b      	lsls	r3, r3, #12
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a10      	ldr	r2, [pc, #64]	; (8006594 <TIM_OC4_SetConfig+0x9c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d109      	bne.n	800656c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800655e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	019b      	lsls	r3, r3, #6
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40010000 	.word	0x40010000

08006598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f023 0201 	bic.w	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f023 030a 	bic.w	r3, r3, #10
 80065d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b087      	sub	sp, #28
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f023 0210 	bic.w	r2, r3, #16
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	031b      	lsls	r3, r3, #12
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006632:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	621a      	str	r2, [r3, #32]
}
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	f043 0307 	orr.w	r3, r3, #7
 8006678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	609a      	str	r2, [r3, #8]
}
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	021a      	lsls	r2, r3, #8
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	609a      	str	r2, [r3, #8]
}
 80066c0:	bf00      	nop
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f003 031f 	and.w	r3, r3, #31
 80066de:	2201      	movs	r2, #1
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1a      	ldr	r2, [r3, #32]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	43db      	mvns	r3, r3
 80066ee:	401a      	ands	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	fa01 f303 	lsl.w	r3, r1, r3
 8006704:	431a      	orrs	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	621a      	str	r2, [r3, #32]
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
	...

08006718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800672c:	2302      	movs	r3, #2
 800672e:	e050      	b.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a1c      	ldr	r2, [pc, #112]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d018      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677c:	d013      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a18      	ldr	r2, [pc, #96]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00e      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a16      	ldr	r2, [pc, #88]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d009      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a15      	ldr	r2, [pc, #84]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d004      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a13      	ldr	r2, [pc, #76]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10c      	bne.n	80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	40010000 	.word	0x40010000
 80067e4:	40000400 	.word	0x40000400
 80067e8:	40000800 	.word	0x40000800
 80067ec:	40000c00 	.word	0x40000c00
 80067f0:	40014000 	.word	0x40014000

080067f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067f4:	b084      	sub	sp, #16
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	f107 001c 	add.w	r0, r7, #28
 8006802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	2b01      	cmp	r3, #1
 800680a:	d122      	bne.n	8006852 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006836:	2b01      	cmp	r3, #1
 8006838:	d105      	bne.n	8006846 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f9c0 	bl	8006bcc <USB_CoreReset>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]
 8006850:	e01a      	b.n	8006888 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f9b4 	bl	8006bcc <USB_CoreReset>
 8006864:	4603      	mov	r3, r0
 8006866:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	639a      	str	r2, [r3, #56]	; 0x38
 800687a:	e005      	b.n	8006888 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	2b01      	cmp	r3, #1
 800688c:	d10b      	bne.n	80068a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f043 0206 	orr.w	r2, r3, #6
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f043 0220 	orr.w	r2, r3, #32
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068b2:	b004      	add	sp, #16
 80068b4:	4770      	bx	lr

080068b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f043 0201 	orr.w	r2, r3, #1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f023 0201 	bic.w	r2, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	460b      	mov	r3, r1
 8006904:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d115      	bne.n	8006948 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006928:	2001      	movs	r0, #1
 800692a:	f7fa fd71 	bl	8001410 <HAL_Delay>
      ms++;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3301      	adds	r3, #1
 8006932:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f93a 	bl	8006bae <USB_GetMode>
 800693a:	4603      	mov	r3, r0
 800693c:	2b01      	cmp	r3, #1
 800693e:	d01e      	beq.n	800697e <USB_SetCurrentMode+0x84>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b31      	cmp	r3, #49	; 0x31
 8006944:	d9f0      	bls.n	8006928 <USB_SetCurrentMode+0x2e>
 8006946:	e01a      	b.n	800697e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d115      	bne.n	800697a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800695a:	2001      	movs	r0, #1
 800695c:	f7fa fd58 	bl	8001410 <HAL_Delay>
      ms++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3301      	adds	r3, #1
 8006964:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f921 	bl	8006bae <USB_GetMode>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <USB_SetCurrentMode+0x84>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b31      	cmp	r3, #49	; 0x31
 8006976:	d9f0      	bls.n	800695a <USB_SetCurrentMode+0x60>
 8006978:	e001      	b.n	800697e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e005      	b.n	800698a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b32      	cmp	r3, #50	; 0x32
 8006982:	d101      	bne.n	8006988 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3301      	adds	r3, #1
 80069a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a13      	ldr	r2, [pc, #76]	; (80069f8 <USB_FlushTxFifo+0x64>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d901      	bls.n	80069b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e01b      	b.n	80069ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	daf2      	bge.n	80069a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	019b      	lsls	r3, r3, #6
 80069c4:	f043 0220 	orr.w	r2, r3, #32
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4a08      	ldr	r2, [pc, #32]	; (80069f8 <USB_FlushTxFifo+0x64>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e006      	b.n	80069ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	d0f0      	beq.n	80069cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	00030d40 	.word	0x00030d40

080069fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4a11      	ldr	r2, [pc, #68]	; (8006a58 <USB_FlushRxFifo+0x5c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d901      	bls.n	8006a1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e018      	b.n	8006a4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	daf2      	bge.n	8006a08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2210      	movs	r2, #16
 8006a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a08      	ldr	r2, [pc, #32]	; (8006a58 <USB_FlushRxFifo+0x5c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d901      	bls.n	8006a3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e006      	b.n	8006a4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	2b10      	cmp	r3, #16
 8006a48:	d0f0      	beq.n	8006a2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	00030d40 	.word	0x00030d40

08006a5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b089      	sub	sp, #36	; 0x24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4611      	mov	r1, r2
 8006a68:	461a      	mov	r2, r3
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	71fb      	strb	r3, [r7, #7]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d123      	bne.n	8006aca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a82:	88bb      	ldrh	r3, [r7, #4]
 8006a84:	3303      	adds	r3, #3
 8006a86:	089b      	lsrs	r3, r3, #2
 8006a88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	e018      	b.n	8006ac2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	031a      	lsls	r2, r3, #12
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	3301      	adds	r3, #1
 8006aae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d3e2      	bcc.n	8006a90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3724      	adds	r7, #36	; 0x24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b08b      	sub	sp, #44	; 0x2c
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	089b      	lsrs	r3, r3, #2
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006afe:	2300      	movs	r3, #0
 8006b00:	623b      	str	r3, [r7, #32]
 8006b02:	e014      	b.n	8006b2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	3301      	adds	r3, #1
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	3301      	adds	r3, #1
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	3301      	adds	r3, #1
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	3301      	adds	r3, #1
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	623b      	str	r3, [r7, #32]
 8006b2e:	6a3a      	ldr	r2, [r7, #32]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d3e6      	bcc.n	8006b04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b36:	8bfb      	ldrh	r3, [r7, #30]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01e      	beq.n	8006b7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b46:	461a      	mov	r2, r3
 8006b48:	f107 0310 	add.w	r3, r7, #16
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	701a      	strb	r2, [r3, #0]
      i++;
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	3301      	adds	r3, #1
 8006b66:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b6e:	8bfb      	ldrh	r3, [r7, #30]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b74:	8bfb      	ldrh	r3, [r7, #30]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1ea      	bne.n	8006b50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	372c      	adds	r7, #44	; 0x2c
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0301 	and.w	r3, r3, #1
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
	...

08006bcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4a13      	ldr	r2, [pc, #76]	; (8006c30 <USB_CoreReset+0x64>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d901      	bls.n	8006bea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e01b      	b.n	8006c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	daf2      	bge.n	8006bd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f043 0201 	orr.w	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4a09      	ldr	r2, [pc, #36]	; (8006c30 <USB_CoreReset+0x64>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d901      	bls.n	8006c14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e006      	b.n	8006c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d0f0      	beq.n	8006c02 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	00030d40 	.word	0x00030d40

08006c34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c34:	b084      	sub	sp, #16
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c54:	461a      	mov	r2, r3
 8006c56:	2300      	movs	r3, #0
 8006c58:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d018      	beq.n	8006cbc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d10a      	bne.n	8006ca6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c9e:	f043 0304 	orr.w	r3, r3, #4
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	e014      	b.n	8006cd0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cb4:	f023 0304 	bic.w	r3, r3, #4
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	e009      	b.n	8006cd0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cca:	f023 0304 	bic.w	r3, r3, #4
 8006cce:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cd0:	2110      	movs	r1, #16
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff fe5e 	bl	8006994 <USB_FlushTxFifo>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff fe8a 	bl	80069fc <USB_FlushRxFifo>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	e015      	b.n	8006d24 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d04:	461a      	mov	r2, r3
 8006d06:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d18:	461a      	mov	r2, r3
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	3301      	adds	r3, #1
 8006d22:	613b      	str	r3, [r7, #16]
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d3e5      	bcc.n	8006cf8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f04f 32ff 	mov.w	r2, #4294967295
 8006d38:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00b      	beq.n	8006d5e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <USB_HostInit+0x16c>)
 8006d52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a13      	ldr	r2, [pc, #76]	; (8006da4 <USB_HostInit+0x170>)
 8006d58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006d5c:	e009      	b.n	8006d72 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2280      	movs	r2, #128	; 0x80
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a10      	ldr	r2, [pc, #64]	; (8006da8 <USB_HostInit+0x174>)
 8006d68:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a0f      	ldr	r2, [pc, #60]	; (8006dac <USB_HostInit+0x178>)
 8006d6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d105      	bne.n	8006d84 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f043 0210 	orr.w	r2, r3, #16
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699a      	ldr	r2, [r3, #24]
 8006d88:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <USB_HostInit+0x17c>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d9c:	b004      	add	sp, #16
 8006d9e:	4770      	bx	lr
 8006da0:	01000200 	.word	0x01000200
 8006da4:	00e00300 	.word	0x00e00300
 8006da8:	00600080 	.word	0x00600080
 8006dac:	004000e0 	.word	0x004000e0
 8006db0:	a3200008 	.word	0xa3200008

08006db4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	68f9      	ldr	r1, [r7, #12]
 8006de8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006dec:	4313      	orrs	r3, r2
 8006dee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d107      	bne.n	8006e06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e02:	6053      	str	r3, [r2, #4]
 8006e04:	e009      	b.n	8006e1a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d106      	bne.n	8006e1a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e12:	461a      	mov	r2, r3
 8006e14:	f241 7370 	movw	r3, #6000	; 0x1770
 8006e18:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e48:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e56:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006e58:	2064      	movs	r0, #100	; 0x64
 8006e5a:	f7fa fad9 	bl	8001410 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006e6c:	200a      	movs	r0, #10
 8006e6e:	f7fa facf 	bl	8001410 <HAL_Delay>

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ea0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d109      	bne.n	8006ec0 <USB_DriveVbus+0x44>
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d106      	bne.n	8006ec0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006eba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ebe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eca:	d109      	bne.n	8006ee0 <USB_DriveVbus+0x64>
 8006ecc:	78fb      	ldrb	r3, [r7, #3]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d106      	bne.n	8006ee0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ede:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	0c5b      	lsrs	r3, r3, #17
 8006f0c:	f003 0303 	and.w	r3, r3, #3
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	b29b      	uxth	r3, r3
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
	...

08006f40 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	4608      	mov	r0, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4603      	mov	r3, r0
 8006f50:	70fb      	strb	r3, [r7, #3]
 8006f52:	460b      	mov	r3, r1
 8006f54:	70bb      	strb	r3, [r7, #2]
 8006f56:	4613      	mov	r3, r2
 8006f58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f04f 33ff 	mov.w	r3, #4294967295
 8006f74:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006f76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d87e      	bhi.n	800707c <USB_HC_Init+0x13c>
 8006f7e:	a201      	add	r2, pc, #4	; (adr r2, 8006f84 <USB_HC_Init+0x44>)
 8006f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f84:	08006f95 	.word	0x08006f95
 8006f88:	0800703f 	.word	0x0800703f
 8006f8c:	08006f95 	.word	0x08006f95
 8006f90:	08007001 	.word	0x08007001
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f240 439d 	movw	r3, #1181	; 0x49d
 8006fa6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006fa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	da10      	bge.n	8006fd2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fce:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006fd0:	e057      	b.n	8007082 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d051      	beq.n	8007082 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	78fa      	ldrb	r2, [r7, #3]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ff8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006ffc:	60d3      	str	r3, [r2, #12]
      break;
 8006ffe:	e040      	b.n	8007082 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	4413      	add	r3, r2
 8007008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700c:	461a      	mov	r2, r3
 800700e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007012:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007014:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	da34      	bge.n	8007086 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4413      	add	r3, r2
 8007024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	78fa      	ldrb	r2, [r7, #3]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	440a      	add	r2, r1
 8007032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800703a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800703c:	e023      	b.n	8007086 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800703e:	78fb      	ldrb	r3, [r7, #3]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	4413      	add	r3, r2
 8007046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704a:	461a      	mov	r2, r3
 800704c:	f240 2325 	movw	r3, #549	; 0x225
 8007050:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007052:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007056:	2b00      	cmp	r3, #0
 8007058:	da17      	bge.n	800708a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	4413      	add	r3, r2
 8007062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	78fa      	ldrb	r2, [r7, #3]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	440a      	add	r2, r1
 8007070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007074:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007078:	60d3      	str	r3, [r2, #12]
      }
      break;
 800707a:	e006      	b.n	800708a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	77fb      	strb	r3, [r7, #31]
      break;
 8007080:	e004      	b.n	800708c <USB_HC_Init+0x14c>
      break;
 8007082:	bf00      	nop
 8007084:	e002      	b.n	800708c <USB_HC_Init+0x14c>
      break;
 8007086:	bf00      	nop
 8007088:	e000      	b.n	800708c <USB_HC_Init+0x14c>
      break;
 800708a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	4413      	add	r3, r2
 8007094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	78fa      	ldrb	r2, [r7, #3]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070a6:	f043 0302 	orr.w	r3, r3, #2
 80070aa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070b2:	699a      	ldr	r2, [r3, #24]
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	2101      	movs	r1, #1
 80070bc:	fa01 f303 	lsl.w	r3, r1, r3
 80070c0:	6939      	ldr	r1, [r7, #16]
 80070c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80070c6:	4313      	orrs	r3, r2
 80070c8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80070d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	da03      	bge.n	80070e6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80070de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	e001      	b.n	80070ea <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7ff feff 	bl	8006eee <USB_GetHostSpeed>
 80070f0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80070f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d106      	bne.n	8007108 <USB_HC_Init+0x1c8>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d003      	beq.n	8007108 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007104:	617b      	str	r3, [r7, #20]
 8007106:	e001      	b.n	800710c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800710c:	787b      	ldrb	r3, [r7, #1]
 800710e:	059b      	lsls	r3, r3, #22
 8007110:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007114:	78bb      	ldrb	r3, [r7, #2]
 8007116:	02db      	lsls	r3, r3, #11
 8007118:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800711c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800711e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007122:	049b      	lsls	r3, r3, #18
 8007124:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007128:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800712a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800712c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007130:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	0159      	lsls	r1, r3, #5
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	440b      	add	r3, r1
 800713e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007142:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007148:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800714a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800714e:	2b03      	cmp	r3, #3
 8007150:	d003      	beq.n	800715a <USB_HC_Init+0x21a>
 8007152:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007156:	2b01      	cmp	r3, #1
 8007158:	d10f      	bne.n	800717a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	4413      	add	r3, r2
 8007162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	78fa      	ldrb	r2, [r7, #3]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	440a      	add	r2, r1
 8007170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007174:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007178:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800717a:	7ffb      	ldrb	r3, [r7, #31]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3720      	adds	r7, #32
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08c      	sub	sp, #48	; 0x30
 8007188:	af02      	add	r7, sp, #8
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800719c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071a0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d02d      	beq.n	800720a <USB_HC_StartXfer+0x86>
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	791b      	ldrb	r3, [r3, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d129      	bne.n	800720a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d117      	bne.n	80071ec <USB_HC_StartXfer+0x68>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	79db      	ldrb	r3, [r3, #7]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <USB_HC_StartXfer+0x48>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	79db      	ldrb	r3, [r3, #7]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d10f      	bne.n	80071ec <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	0151      	lsls	r1, r2, #5
 80071de:	6a3a      	ldr	r2, [r7, #32]
 80071e0:	440a      	add	r2, r1
 80071e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ea:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <USB_HC_StartXfer+0x86>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	795b      	ldrb	r3, [r3, #5]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d107      	bne.n	800720a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	4619      	mov	r1, r3
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 fa0f 	bl	8007624 <USB_DoPing>
      return HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	e0f8      	b.n	80073fc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d018      	beq.n	8007244 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	8912      	ldrh	r2, [r2, #8]
 800721a:	4413      	add	r3, r2
 800721c:	3b01      	subs	r3, #1
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	8912      	ldrh	r2, [r2, #8]
 8007222:	fbb3 f3f2 	udiv	r3, r3, r2
 8007226:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007228:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800722a:	8b7b      	ldrh	r3, [r7, #26]
 800722c:	429a      	cmp	r2, r3
 800722e:	d90b      	bls.n	8007248 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007230:	8b7b      	ldrh	r3, [r7, #26]
 8007232:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007234:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	8912      	ldrh	r2, [r2, #8]
 800723a:	fb03 f202 	mul.w	r2, r3, r2
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	611a      	str	r2, [r3, #16]
 8007242:	e001      	b.n	8007248 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007244:	2301      	movs	r3, #1
 8007246:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	78db      	ldrb	r3, [r3, #3]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d007      	beq.n	8007260 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007250:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	8912      	ldrh	r2, [r2, #8]
 8007256:	fb03 f202 	mul.w	r2, r3, r2
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	611a      	str	r2, [r3, #16]
 800725e:	e003      	b.n	8007268 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	695a      	ldr	r2, [r3, #20]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007270:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007272:	04d9      	lsls	r1, r3, #19
 8007274:	4b63      	ldr	r3, [pc, #396]	; (8007404 <USB_HC_StartXfer+0x280>)
 8007276:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007278:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	7a9b      	ldrb	r3, [r3, #10]
 800727e:	075b      	lsls	r3, r3, #29
 8007280:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007284:	69f9      	ldr	r1, [r7, #28]
 8007286:	0148      	lsls	r0, r1, #5
 8007288:	6a39      	ldr	r1, [r7, #32]
 800728a:	4401      	add	r1, r0
 800728c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007290:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007292:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	68d9      	ldr	r1, [r3, #12]
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072aa:	460a      	mov	r2, r1
 80072ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bf0c      	ite	eq
 80072be:	2301      	moveq	r3, #1
 80072c0:	2300      	movne	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	0151      	lsls	r1, r2, #5
 80072d8:	6a3a      	ldr	r2, [r7, #32]
 80072da:	440a      	add	r2, r1
 80072dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	7e7b      	ldrb	r3, [r7, #25]
 80072f6:	075b      	lsls	r3, r3, #29
 80072f8:	69f9      	ldr	r1, [r7, #28]
 80072fa:	0148      	lsls	r0, r1, #5
 80072fc:	6a39      	ldr	r1, [r7, #32]
 80072fe:	4401      	add	r1, r0
 8007300:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007304:	4313      	orrs	r3, r2
 8007306:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	4413      	add	r3, r2
 8007310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800731e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	78db      	ldrb	r3, [r3, #3]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d004      	beq.n	8007332 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	e003      	b.n	800733a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007338:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007340:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	4413      	add	r3, r2
 800734a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800734e:	461a      	mov	r2, r3
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	e04e      	b.n	80073fc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	78db      	ldrb	r3, [r3, #3]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d149      	bne.n	80073fa <USB_HC_StartXfer+0x276>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d045      	beq.n	80073fa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	79db      	ldrb	r3, [r3, #7]
 8007372:	2b03      	cmp	r3, #3
 8007374:	d830      	bhi.n	80073d8 <USB_HC_StartXfer+0x254>
 8007376:	a201      	add	r2, pc, #4	; (adr r2, 800737c <USB_HC_StartXfer+0x1f8>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	0800738d 	.word	0x0800738d
 8007380:	080073b1 	.word	0x080073b1
 8007384:	0800738d 	.word	0x0800738d
 8007388:	080073b1 	.word	0x080073b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	3303      	adds	r3, #3
 8007392:	089b      	lsrs	r3, r3, #2
 8007394:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007396:	8afa      	ldrh	r2, [r7, #22]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	b29b      	uxth	r3, r3
 800739e:	429a      	cmp	r2, r3
 80073a0:	d91c      	bls.n	80073dc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	f043 0220 	orr.w	r2, r3, #32
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80073ae:	e015      	b.n	80073dc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	3303      	adds	r3, #3
 80073b6:	089b      	lsrs	r3, r3, #2
 80073b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80073ba:	8afa      	ldrh	r2, [r7, #22]
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d90a      	bls.n	80073e0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80073d6:	e003      	b.n	80073e0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80073d8:	bf00      	nop
 80073da:	e002      	b.n	80073e2 <USB_HC_StartXfer+0x25e>
        break;
 80073dc:	bf00      	nop
 80073de:	e000      	b.n	80073e2 <USB_HC_StartXfer+0x25e>
        break;
 80073e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	68d9      	ldr	r1, [r3, #12]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	785a      	ldrb	r2, [r3, #1]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	2000      	movs	r0, #0
 80073f2:	9000      	str	r0, [sp, #0]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff fb31 	bl	8006a5c <USB_WritePacket>
  }

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3728      	adds	r7, #40	; 0x28
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	1ff80000 	.word	0x1ff80000

08007408 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	b29b      	uxth	r3, r3
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800742a:	b480      	push	{r7}
 800742c:	b089      	sub	sp, #36	; 0x24
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	0c9b      	lsrs	r3, r3, #18
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	4413      	add	r3, r2
 8007460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	0fdb      	lsrs	r3, r3, #31
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b20      	cmp	r3, #32
 8007478:	d104      	bne.n	8007484 <USB_HC_Halt+0x5a>
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	e0c8      	b.n	8007616 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <USB_HC_Halt+0x66>
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d163      	bne.n	8007558 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	4413      	add	r3, r2
 8007498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	69fa      	ldr	r2, [r7, #28]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 80ab 	bne.w	8007614 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d133      	bne.n	8007532 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	0151      	lsls	r1, r2, #5
 80074dc:	69fa      	ldr	r2, [r7, #28]
 80074de:	440a      	add	r2, r1
 80074e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	0151      	lsls	r1, r2, #5
 80074fc:	69fa      	ldr	r2, [r7, #28]
 80074fe:	440a      	add	r2, r1
 8007500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007508:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3301      	adds	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007516:	d81d      	bhi.n	8007554 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	4413      	add	r3, r2
 8007520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800752a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800752e:	d0ec      	beq.n	800750a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007530:	e070      	b.n	8007614 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	4413      	add	r3, r2
 800753a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	0151      	lsls	r1, r2, #5
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	440a      	add	r2, r1
 8007548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800754c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007550:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007552:	e05f      	b.n	8007614 <USB_HC_Halt+0x1ea>
            break;
 8007554:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007556:	e05d      	b.n	8007614 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	4413      	add	r3, r2
 8007560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	0151      	lsls	r1, r2, #5
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	440a      	add	r2, r1
 800756e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007572:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007576:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d133      	bne.n	80075f0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	0151      	lsls	r1, r2, #5
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	440a      	add	r2, r1
 800759e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	0151      	lsls	r1, r2, #5
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	440a      	add	r2, r1
 80075be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075c6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075d4:	d81d      	bhi.n	8007612 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ec:	d0ec      	beq.n	80075c8 <USB_HC_Halt+0x19e>
 80075ee:	e011      	b.n	8007614 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	440a      	add	r2, r1
 8007606:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800760a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	e000      	b.n	8007614 <USB_HC_Halt+0x1ea>
          break;
 8007612:	bf00      	nop
    }
  }

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3724      	adds	r7, #36	; 0x24
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007638:	2301      	movs	r3, #1
 800763a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	04da      	lsls	r2, r3, #19
 8007640:	4b15      	ldr	r3, [pc, #84]	; (8007698 <USB_DoPing+0x74>)
 8007642:	4013      	ands	r3, r2
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	0151      	lsls	r1, r2, #5
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	440a      	add	r2, r1
 800764c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007650:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007654:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	4413      	add	r3, r2
 800765e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800766c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007674:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	4413      	add	r3, r2
 800767e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007682:	461a      	mov	r2, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	1ff80000 	.word	0x1ff80000

0800769c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff f911 	bl	80068d8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076b6:	2110      	movs	r1, #16
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7ff f96b 	bl	8006994 <USB_FlushTxFifo>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff f997 	bl	80069fc <USB_FlushRxFifo>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80076d8:	2300      	movs	r3, #0
 80076da:	61bb      	str	r3, [r7, #24]
 80076dc:	e01f      	b.n	800771e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007704:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	4413      	add	r3, r2
 800770e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007712:	461a      	mov	r2, r3
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	3301      	adds	r3, #1
 800771c:	61bb      	str	r3, [r7, #24]
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b0f      	cmp	r3, #15
 8007722:	d9dc      	bls.n	80076de <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007724:	2300      	movs	r3, #0
 8007726:	61bb      	str	r3, [r7, #24]
 8007728:	e034      	b.n	8007794 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	4413      	add	r3, r2
 8007732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007740:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007748:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007750:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	4413      	add	r3, r2
 800775a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800775e:	461a      	mov	r2, r3
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007770:	d80c      	bhi.n	800778c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	4413      	add	r3, r2
 800777a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007788:	d0ec      	beq.n	8007764 <USB_StopHost+0xc8>
 800778a:	e000      	b.n	800778e <USB_StopHost+0xf2>
        break;
 800778c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	3301      	adds	r3, #1
 8007792:	61bb      	str	r3, [r7, #24]
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	2b0f      	cmp	r3, #15
 8007798:	d9c7      	bls.n	800772a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077a0:	461a      	mov	r2, r3
 80077a2:	f04f 33ff 	mov.w	r3, #4294967295
 80077a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f04f 32ff 	mov.w	r2, #4294967295
 80077ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff f880 	bl	80068b6 <USB_EnableGlobalInt>

  return ret;
 80077b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3720      	adds	r7, #32
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80077c0:	b590      	push	{r4, r7, lr}
 80077c2:	b089      	sub	sp, #36	; 0x24
 80077c4:	af04      	add	r7, sp, #16
 80077c6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80077c8:	2301      	movs	r3, #1
 80077ca:	2202      	movs	r2, #2
 80077cc:	2102      	movs	r1, #2
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fc66 	bl	80080a0 <USBH_FindInterface>
 80077d4:	4603      	mov	r3, r0
 80077d6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
 80077da:	2bff      	cmp	r3, #255	; 0xff
 80077dc:	d002      	beq.n	80077e4 <USBH_CDC_InterfaceInit+0x24>
 80077de:	7bfb      	ldrb	r3, [r7, #15]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d901      	bls.n	80077e8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80077e4:	2302      	movs	r3, #2
 80077e6:	e13d      	b.n	8007a64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fc3b 	bl	8008068 <USBH_SelectInterface>
 80077f2:	4603      	mov	r3, r0
 80077f4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80077fc:	2302      	movs	r3, #2
 80077fe:	e131      	b.n	8007a64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007806:	2050      	movs	r0, #80	; 0x50
 8007808:	f002 fafa 	bl	8009e00 <malloc>
 800780c:	4603      	mov	r3, r0
 800780e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007820:	2302      	movs	r3, #2
 8007822:	e11f      	b.n	8007a64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007824:	2250      	movs	r2, #80	; 0x50
 8007826:	2100      	movs	r1, #0
 8007828:	68b8      	ldr	r0, [r7, #8]
 800782a:	f002 faf9 	bl	8009e20 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	211a      	movs	r1, #26
 8007834:	fb01 f303 	mul.w	r3, r1, r3
 8007838:	4413      	add	r3, r2
 800783a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b25b      	sxtb	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	da15      	bge.n	8007872 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	211a      	movs	r1, #26
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	4413      	add	r3, r2
 8007852:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007856:	781a      	ldrb	r2, [r3, #0]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	211a      	movs	r1, #26
 8007862:	fb01 f303 	mul.w	r3, r1, r3
 8007866:	4413      	add	r3, r2
 8007868:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800786c:	881a      	ldrh	r2, [r3, #0]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 ff2c 	bl	80096d6 <USBH_AllocPipe>
 800787e:	4603      	mov	r3, r0
 8007880:	461a      	mov	r2, r3
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	7819      	ldrb	r1, [r3, #0]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	7858      	ldrb	r0, [r3, #1]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	8952      	ldrh	r2, [r2, #10]
 800789e:	9202      	str	r2, [sp, #8]
 80078a0:	2203      	movs	r2, #3
 80078a2:	9201      	str	r2, [sp, #4]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	4623      	mov	r3, r4
 80078a8:	4602      	mov	r2, r0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 fee4 	bl	8009678 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2200      	movs	r2, #0
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f002 f9f3 	bl	8009ca4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80078be:	2300      	movs	r3, #0
 80078c0:	2200      	movs	r2, #0
 80078c2:	210a      	movs	r1, #10
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fbeb 	bl	80080a0 <USBH_FindInterface>
 80078ca:	4603      	mov	r3, r0
 80078cc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	2bff      	cmp	r3, #255	; 0xff
 80078d2:	d002      	beq.n	80078da <USBH_CDC_InterfaceInit+0x11a>
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d901      	bls.n	80078de <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80078da:	2302      	movs	r3, #2
 80078dc:	e0c2      	b.n	8007a64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	211a      	movs	r1, #26
 80078e4:	fb01 f303 	mul.w	r3, r1, r3
 80078e8:	4413      	add	r3, r2
 80078ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	b25b      	sxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	da16      	bge.n	8007924 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	211a      	movs	r1, #26
 80078fc:	fb01 f303 	mul.w	r3, r1, r3
 8007900:	4413      	add	r3, r2
 8007902:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007906:	781a      	ldrb	r2, [r3, #0]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	211a      	movs	r1, #26
 8007912:	fb01 f303 	mul.w	r3, r1, r3
 8007916:	4413      	add	r3, r2
 8007918:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800791c:	881a      	ldrh	r2, [r3, #0]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	835a      	strh	r2, [r3, #26]
 8007922:	e015      	b.n	8007950 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	211a      	movs	r1, #26
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	4413      	add	r3, r2
 8007930:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007934:	781a      	ldrb	r2, [r3, #0]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	211a      	movs	r1, #26
 8007940:	fb01 f303 	mul.w	r3, r1, r3
 8007944:	4413      	add	r3, r2
 8007946:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800794a:	881a      	ldrh	r2, [r3, #0]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	211a      	movs	r1, #26
 8007956:	fb01 f303 	mul.w	r3, r1, r3
 800795a:	4413      	add	r3, r2
 800795c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	b25b      	sxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	da16      	bge.n	8007996 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007968:	7bfb      	ldrb	r3, [r7, #15]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	211a      	movs	r1, #26
 800796e:	fb01 f303 	mul.w	r3, r1, r3
 8007972:	4413      	add	r3, r2
 8007974:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007978:	781a      	ldrb	r2, [r3, #0]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	211a      	movs	r1, #26
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	4413      	add	r3, r2
 800798a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800798e:	881a      	ldrh	r2, [r3, #0]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	835a      	strh	r2, [r3, #26]
 8007994:	e015      	b.n	80079c2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	211a      	movs	r1, #26
 800799c:	fb01 f303 	mul.w	r3, r1, r3
 80079a0:	4413      	add	r3, r2
 80079a2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80079a6:	781a      	ldrb	r2, [r3, #0]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	211a      	movs	r1, #26
 80079b2:	fb01 f303 	mul.w	r3, r1, r3
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80079bc:	881a      	ldrh	r2, [r3, #0]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	7b9b      	ldrb	r3, [r3, #14]
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 fe84 	bl	80096d6 <USBH_AllocPipe>
 80079ce:	4603      	mov	r3, r0
 80079d0:	461a      	mov	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	7bdb      	ldrb	r3, [r3, #15]
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 fe7a 	bl	80096d6 <USBH_AllocPipe>
 80079e2:	4603      	mov	r3, r0
 80079e4:	461a      	mov	r2, r3
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	7b59      	ldrb	r1, [r3, #13]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	7b98      	ldrb	r0, [r3, #14]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	8b12      	ldrh	r2, [r2, #24]
 8007a02:	9202      	str	r2, [sp, #8]
 8007a04:	2202      	movs	r2, #2
 8007a06:	9201      	str	r2, [sp, #4]
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	4623      	mov	r3, r4
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 fe32 	bl	8009678 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	7b19      	ldrb	r1, [r3, #12]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	7bd8      	ldrb	r0, [r3, #15]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	8b52      	ldrh	r2, [r2, #26]
 8007a2c:	9202      	str	r2, [sp, #8]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	9201      	str	r2, [sp, #4]
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	4623      	mov	r3, r4
 8007a36:	4602      	mov	r2, r0
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 fe1d 	bl	8009678 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	7b5b      	ldrb	r3, [r3, #13]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f002 f928 	bl	8009ca4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	7b1b      	ldrb	r3, [r3, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f002 f921 	bl	8009ca4 <USBH_LL_SetToggle>

  return USBH_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd90      	pop	{r4, r7, pc}

08007a6c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00e      	beq.n	8007aa4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 fe12 	bl	80096b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 fe3d 	bl	8009718 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	7b1b      	ldrb	r3, [r3, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00e      	beq.n	8007aca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	7b1b      	ldrb	r3, [r3, #12]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f001 fdff 	bl	80096b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	7b1b      	ldrb	r3, [r3, #12]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 fe2a 	bl	8009718 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	7b5b      	ldrb	r3, [r3, #13]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00e      	beq.n	8007af0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	7b5b      	ldrb	r3, [r3, #13]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 fdec 	bl	80096b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	7b5b      	ldrb	r3, [r3, #13]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 fe17 	bl	8009718 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f002 f983 	bl	8009e10 <free>
    phost->pActiveClass->pData = 0U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b10:	2200      	movs	r2, #0
 8007b12:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3340      	adds	r3, #64	; 0x40
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f8b1 	bl	8007c9e <GetLineCoding>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007b40:	7afb      	ldrb	r3, [r7, #11]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d105      	bne.n	8007b52 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b4c:	2102      	movs	r1, #2
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007b52:	7afb      	ldrb	r3, [r7, #11]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b64:	2301      	movs	r3, #1
 8007b66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d877      	bhi.n	8007c70 <USBH_CDC_Process+0x114>
 8007b80:	a201      	add	r2, pc, #4	; (adr r2, 8007b88 <USBH_CDC_Process+0x2c>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007b9d 	.word	0x08007b9d
 8007b8c:	08007ba3 	.word	0x08007ba3
 8007b90:	08007bd3 	.word	0x08007bd3
 8007b94:	08007c47 	.word	0x08007c47
 8007b98:	08007c55 	.word	0x08007c55
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba0:	e06d      	b.n	8007c7e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f897 	bl	8007cdc <SetLineCoding>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d104      	bne.n	8007bc2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007bc0:	e058      	b.n	8007c74 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d055      	beq.n	8007c74 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2204      	movs	r2, #4
 8007bcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007bd0:	e050      	b.n	8007c74 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	3340      	adds	r3, #64	; 0x40
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f860 	bl	8007c9e <GetLineCoding>
 8007bde:	4603      	mov	r3, r0
 8007be0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d126      	bne.n	8007c36 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfa:	791b      	ldrb	r3, [r3, #4]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d13b      	bne.n	8007c78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d133      	bne.n	8007c78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c1a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d12b      	bne.n	8007c78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c28:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d124      	bne.n	8007c78 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f958 	bl	8007ee4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c34:	e020      	b.n	8007c78 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d01d      	beq.n	8007c78 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2204      	movs	r2, #4
 8007c40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007c44:	e018      	b.n	8007c78 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f867 	bl	8007d1a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f8da 	bl	8007e06 <CDC_ProcessReception>
      break;
 8007c52:	e014      	b.n	8007c7e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007c54:	2100      	movs	r1, #0
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 ffef 	bl	8008c3a <USBH_ClrFeature>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10a      	bne.n	8007c7c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007c6e:	e005      	b.n	8007c7c <USBH_CDC_Process+0x120>

    default:
      break;
 8007c70:	bf00      	nop
 8007c72:	e004      	b.n	8007c7e <USBH_CDC_Process+0x122>
      break;
 8007c74:	bf00      	nop
 8007c76:	e002      	b.n	8007c7e <USBH_CDC_Process+0x122>
      break;
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <USBH_CDC_Process+0x122>
      break;
 8007c7c:	bf00      	nop

  }

  return status;
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	22a1      	movs	r2, #161	; 0xa1
 8007cac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2221      	movs	r2, #33	; 0x21
 8007cb2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2207      	movs	r2, #7
 8007cc4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2207      	movs	r2, #7
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fa81 	bl	80091d4 <USBH_CtlReq>
 8007cd2:	4603      	mov	r3, r0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2221      	movs	r2, #33	; 0x21
 8007cea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2207      	movs	r2, #7
 8007d02:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2207      	movs	r2, #7
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 fa62 	bl	80091d4 <USBH_CtlReq>
 8007d10:	4603      	mov	r3, r0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b086      	sub	sp, #24
 8007d1e:	af02      	add	r7, sp, #8
 8007d20:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d002      	beq.n	8007d40 <CDC_ProcessTransmission+0x26>
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d023      	beq.n	8007d86 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007d3e:	e05e      	b.n	8007dfe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	8b12      	ldrh	r2, [r2, #24]
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d90b      	bls.n	8007d64 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	69d9      	ldr	r1, [r3, #28]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	8b1a      	ldrh	r2, [r3, #24]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	7b5b      	ldrb	r3, [r3, #13]
 8007d58:	2001      	movs	r0, #1
 8007d5a:	9000      	str	r0, [sp, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 fc48 	bl	80095f2 <USBH_BulkSendData>
 8007d62:	e00b      	b.n	8007d7c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	7b5b      	ldrb	r3, [r3, #13]
 8007d72:	2001      	movs	r0, #1
 8007d74:	9000      	str	r0, [sp, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 fc3b 	bl	80095f2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d84:	e03b      	b.n	8007dfe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	7b5b      	ldrb	r3, [r3, #13]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 ff5f 	bl	8009c50 <USBH_LL_GetURBState>
 8007d92:	4603      	mov	r3, r0
 8007d94:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007d96:	7afb      	ldrb	r3, [r7, #11]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d128      	bne.n	8007dee <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	8b12      	ldrh	r2, [r2, #24]
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d90e      	bls.n	8007dc6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	8b12      	ldrh	r2, [r2, #24]
 8007db0:	1a9a      	subs	r2, r3, r2
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	8b12      	ldrh	r2, [r2, #24]
 8007dbe:	441a      	add	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	61da      	str	r2, [r3, #28]
 8007dc4:	e002      	b.n	8007dcc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d004      	beq.n	8007dde <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007ddc:	e00e      	b.n	8007dfc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f868 	bl	8007ebc <USBH_CDC_TransmitCallback>
      break;
 8007dec:	e006      	b.n	8007dfc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d103      	bne.n	8007dfc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007dfc:	bf00      	nop
  }
}
 8007dfe:	bf00      	nop
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b086      	sub	sp, #24
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d002      	beq.n	8007e2c <CDC_ProcessReception+0x26>
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d00e      	beq.n	8007e48 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007e2a:	e043      	b.n	8007eb4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	6a19      	ldr	r1, [r3, #32]
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	8b5a      	ldrh	r2, [r3, #26]
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	7b1b      	ldrb	r3, [r3, #12]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 fbff 	bl	800963c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2204      	movs	r2, #4
 8007e42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007e46:	e035      	b.n	8007eb4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	7b1b      	ldrb	r3, [r3, #12]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fefe 	bl	8009c50 <USBH_LL_GetURBState>
 8007e54:	4603      	mov	r3, r0
 8007e56:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007e58:	7cfb      	ldrb	r3, [r7, #19]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d129      	bne.n	8007eb2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	7b1b      	ldrb	r3, [r3, #12]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 fe61 	bl	8009b2c <USBH_LL_GetLastXferSize>
 8007e6a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d016      	beq.n	8007ea4 <CDC_ProcessReception+0x9e>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	8b5b      	ldrh	r3, [r3, #26]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d910      	bls.n	8007ea4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	1ad2      	subs	r2, r2, r3
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	6a1a      	ldr	r2, [r3, #32]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	441a      	add	r2, r3
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2203      	movs	r2, #3
 8007e9e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ea2:	e006      	b.n	8007eb2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f80f 	bl	8007ed0 <USBH_CDC_ReceiveCallback>
      break;
 8007eb2:	bf00      	nop
  }
}
 8007eb4:	bf00      	nop
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	e029      	b.n	8007f64 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	79fa      	ldrb	r2, [r7, #7]
 8007f14:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 f81f 	bl	8007f6c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d003      	beq.n	8007f5c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f001 fd31 	bl	80099c4 <USBH_LL_Init>

  return USBH_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	e009      	b.n	8007f92 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	33e0      	adds	r3, #224	; 0xe0
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	2200      	movs	r2, #0
 8007f8a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b0f      	cmp	r3, #15
 8007f96:	d9f2      	bls.n	8007f7e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	e009      	b.n	8007fb2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007fa8:	2200      	movs	r2, #0
 8007faa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fb8:	d3f1      	bcc.n	8007f9e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2240      	movs	r2, #64	; 0x40
 8007fde:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d016      	beq.n	8008056 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10e      	bne.n	8008050 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008038:	1c59      	adds	r1, r3, #1
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	33de      	adds	r3, #222	; 0xde
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73fb      	strb	r3, [r7, #15]
 800804e:	e004      	b.n	800805a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008050:	2302      	movs	r3, #2
 8008052:	73fb      	strb	r3, [r7, #15]
 8008054:	e001      	b.n	800805a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008056:	2302      	movs	r3, #2
 8008058:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800805a:	7bfb      	ldrb	r3, [r7, #15]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	429a      	cmp	r2, r3
 8008082:	d204      	bcs.n	800808e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	78fa      	ldrb	r2, [r7, #3]
 8008088:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800808c:	e001      	b.n	8008092 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800808e:	2302      	movs	r3, #2
 8008090:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008092:	7bfb      	ldrb	r3, [r7, #15]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	4608      	mov	r0, r1
 80080aa:	4611      	mov	r1, r2
 80080ac:	461a      	mov	r2, r3
 80080ae:	4603      	mov	r3, r0
 80080b0:	70fb      	strb	r3, [r7, #3]
 80080b2:	460b      	mov	r3, r1
 80080b4:	70bb      	strb	r3, [r7, #2]
 80080b6:	4613      	mov	r3, r2
 80080b8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80080c8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80080ca:	e025      	b.n	8008118 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	221a      	movs	r2, #26
 80080d0:	fb02 f303 	mul.w	r3, r2, r3
 80080d4:	3308      	adds	r3, #8
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4413      	add	r3, r2
 80080da:	3302      	adds	r3, #2
 80080dc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	795b      	ldrb	r3, [r3, #5]
 80080e2:	78fa      	ldrb	r2, [r7, #3]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d002      	beq.n	80080ee <USBH_FindInterface+0x4e>
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	2bff      	cmp	r3, #255	; 0xff
 80080ec:	d111      	bne.n	8008112 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80080f2:	78ba      	ldrb	r2, [r7, #2]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d002      	beq.n	80080fe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80080f8:	78bb      	ldrb	r3, [r7, #2]
 80080fa:	2bff      	cmp	r3, #255	; 0xff
 80080fc:	d109      	bne.n	8008112 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008102:	787a      	ldrb	r2, [r7, #1]
 8008104:	429a      	cmp	r2, r3
 8008106:	d002      	beq.n	800810e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008108:	787b      	ldrb	r3, [r7, #1]
 800810a:	2bff      	cmp	r3, #255	; 0xff
 800810c:	d101      	bne.n	8008112 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800810e:	7dfb      	ldrb	r3, [r7, #23]
 8008110:	e006      	b.n	8008120 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	3301      	adds	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d9d6      	bls.n	80080cc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800811e:	23ff      	movs	r3, #255	; 0xff
}
 8008120:	4618      	mov	r0, r3
 8008122:	371c      	adds	r7, #28
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 fc81 	bl	8009a3c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800813a:	2101      	movs	r1, #1
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 fd9a 	bl	8009c76 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af04      	add	r7, sp, #16
 8008152:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008154:	2302      	movs	r3, #2
 8008156:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b01      	cmp	r3, #1
 8008166:	d102      	bne.n	800816e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2203      	movs	r2, #3
 800816c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b0b      	cmp	r3, #11
 8008176:	f200 81be 	bhi.w	80084f6 <USBH_Process+0x3aa>
 800817a:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <USBH_Process+0x34>)
 800817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008180:	080081b1 	.word	0x080081b1
 8008184:	080081e3 	.word	0x080081e3
 8008188:	0800824b 	.word	0x0800824b
 800818c:	08008491 	.word	0x08008491
 8008190:	080084f7 	.word	0x080084f7
 8008194:	080082ef 	.word	0x080082ef
 8008198:	08008437 	.word	0x08008437
 800819c:	08008325 	.word	0x08008325
 80081a0:	08008345 	.word	0x08008345
 80081a4:	08008365 	.word	0x08008365
 80081a8:	080083a9 	.word	0x080083a9
 80081ac:	08008479 	.word	0x08008479
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 819e 	beq.w	80084fa <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80081c4:	20c8      	movs	r0, #200	; 0xc8
 80081c6:	f001 fd9d 	bl	8009d04 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 fc93 	bl	8009af6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081e0:	e18b      	b.n	80084fa <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d107      	bne.n	80081fc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081fa:	e18d      	b.n	8008518 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008206:	d914      	bls.n	8008232 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800820e:	3301      	adds	r3, #1
 8008210:	b2da      	uxtb	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800821e:	2b03      	cmp	r3, #3
 8008220:	d903      	bls.n	800822a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	220d      	movs	r2, #13
 8008226:	701a      	strb	r2, [r3, #0]
      break;
 8008228:	e176      	b.n	8008518 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	701a      	strb	r2, [r3, #0]
      break;
 8008230:	e172      	b.n	8008518 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008238:	f103 020a 	add.w	r2, r3, #10
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008242:	200a      	movs	r0, #10
 8008244:	f001 fd5e 	bl	8009d04 <USBH_Delay>
      break;
 8008248:	e166      	b.n	8008518 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800825a:	2104      	movs	r1, #4
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008260:	2064      	movs	r0, #100	; 0x64
 8008262:	f001 fd4f 	bl	8009d04 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f001 fc1e 	bl	8009aa8 <USBH_LL_GetSpeed>
 800826c:	4603      	mov	r3, r0
 800826e:	461a      	mov	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2205      	movs	r2, #5
 800827a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800827c:	2100      	movs	r1, #0
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 fa29 	bl	80096d6 <USBH_AllocPipe>
 8008284:	4603      	mov	r3, r0
 8008286:	461a      	mov	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800828c:	2180      	movs	r1, #128	; 0x80
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 fa21 	bl	80096d6 <USBH_AllocPipe>
 8008294:	4603      	mov	r3, r0
 8008296:	461a      	mov	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	7919      	ldrb	r1, [r3, #4]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80082b0:	b292      	uxth	r2, r2
 80082b2:	9202      	str	r2, [sp, #8]
 80082b4:	2200      	movs	r2, #0
 80082b6:	9201      	str	r2, [sp, #4]
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	4603      	mov	r3, r0
 80082bc:	2280      	movs	r2, #128	; 0x80
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 f9da 	bl	8009678 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	7959      	ldrb	r1, [r3, #5]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80082d8:	b292      	uxth	r2, r2
 80082da:	9202      	str	r2, [sp, #8]
 80082dc:	2200      	movs	r2, #0
 80082de:	9201      	str	r2, [sp, #4]
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	4603      	mov	r3, r0
 80082e4:	2200      	movs	r2, #0
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 f9c6 	bl	8009678 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082ec:	e114      	b.n	8008518 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f918 	bl	8008524 <USBH_HandleEnum>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f040 80fe 	bne.w	80084fe <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008310:	2b01      	cmp	r3, #1
 8008312:	d103      	bne.n	800831c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2208      	movs	r2, #8
 8008318:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800831a:	e0f0      	b.n	80084fe <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2207      	movs	r2, #7
 8008320:	701a      	strb	r2, [r3, #0]
      break;
 8008322:	e0ec      	b.n	80084fe <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 80e9 	beq.w	8008502 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008336:	2101      	movs	r1, #1
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2208      	movs	r2, #8
 8008340:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008342:	e0de      	b.n	8008502 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800834a:	b29b      	uxth	r3, r3
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fc2c 	bl	8008bac <USBH_SetCfg>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	f040 80d5 	bne.w	8008506 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2209      	movs	r2, #9
 8008360:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008362:	e0d0      	b.n	8008506 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	d016      	beq.n	80083a0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008372:	2101      	movs	r1, #1
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fc3c 	bl	8008bf2 <USBH_SetFeature>
 800837a:	4603      	mov	r3, r0
 800837c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d103      	bne.n	800838e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	220a      	movs	r2, #10
 800838a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800838c:	e0bd      	b.n	800850a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b03      	cmp	r3, #3
 8008394:	f040 80b9 	bne.w	800850a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	220a      	movs	r2, #10
 800839c:	701a      	strb	r2, [r3, #0]
      break;
 800839e:	e0b4      	b.n	800850a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	220a      	movs	r2, #10
 80083a4:	701a      	strb	r2, [r3, #0]
      break;
 80083a6:	e0b0      	b.n	800850a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 80ad 	beq.w	800850e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
 80083c0:	e016      	b.n	80083f0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80083c2:	7bfa      	ldrb	r2, [r7, #15]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	32de      	adds	r2, #222	; 0xde
 80083c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083cc:	791a      	ldrb	r2, [r3, #4]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d108      	bne.n	80083ea <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80083d8:	7bfa      	ldrb	r2, [r7, #15]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	32de      	adds	r2, #222	; 0xde
 80083de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80083e8:	e005      	b.n	80083f6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	3301      	adds	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0e5      	beq.n	80083c2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d016      	beq.n	800842e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	4798      	blx	r3
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2206      	movs	r2, #6
 8008416:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800841e:	2103      	movs	r1, #3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008424:	e073      	b.n	800850e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	220d      	movs	r2, #13
 800842a:	701a      	strb	r2, [r3, #0]
      break;
 800842c:	e06f      	b.n	800850e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	220d      	movs	r2, #13
 8008432:	701a      	strb	r2, [r3, #0]
      break;
 8008434:	e06b      	b.n	800850e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800843c:	2b00      	cmp	r3, #0
 800843e:	d017      	beq.n	8008470 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
 800844c:	4603      	mov	r3, r0
 800844e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d103      	bne.n	8008460 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	220b      	movs	r2, #11
 800845c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800845e:	e058      	b.n	8008512 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d154      	bne.n	8008512 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	220d      	movs	r2, #13
 800846c:	701a      	strb	r2, [r3, #0]
      break;
 800846e:	e050      	b.n	8008512 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	220d      	movs	r2, #13
 8008474:	701a      	strb	r2, [r3, #0]
      break;
 8008476:	e04c      	b.n	8008512 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800847e:	2b00      	cmp	r3, #0
 8008480:	d049      	beq.n	8008516 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
      }
      break;
 800848e:	e042      	b.n	8008516 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff fd67 	bl	8007f6c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d009      	beq.n	80084bc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084cc:	2105      	movs	r1, #5
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d107      	bne.n	80084ee <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff fe20 	bl	800812c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084ec:	e014      	b.n	8008518 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f001 faa4 	bl	8009a3c <USBH_LL_Start>
      break;
 80084f4:	e010      	b.n	8008518 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80084f6:	bf00      	nop
 80084f8:	e00e      	b.n	8008518 <USBH_Process+0x3cc>
      break;
 80084fa:	bf00      	nop
 80084fc:	e00c      	b.n	8008518 <USBH_Process+0x3cc>
      break;
 80084fe:	bf00      	nop
 8008500:	e00a      	b.n	8008518 <USBH_Process+0x3cc>
    break;
 8008502:	bf00      	nop
 8008504:	e008      	b.n	8008518 <USBH_Process+0x3cc>
      break;
 8008506:	bf00      	nop
 8008508:	e006      	b.n	8008518 <USBH_Process+0x3cc>
      break;
 800850a:	bf00      	nop
 800850c:	e004      	b.n	8008518 <USBH_Process+0x3cc>
      break;
 800850e:	bf00      	nop
 8008510:	e002      	b.n	8008518 <USBH_Process+0x3cc>
      break;
 8008512:	bf00      	nop
 8008514:	e000      	b.n	8008518 <USBH_Process+0x3cc>
      break;
 8008516:	bf00      	nop
  }
  return USBH_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop

08008524 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af04      	add	r7, sp, #16
 800852a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800852c:	2301      	movs	r3, #1
 800852e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008530:	2301      	movs	r3, #1
 8008532:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	785b      	ldrb	r3, [r3, #1]
 8008538:	2b07      	cmp	r3, #7
 800853a:	f200 81c1 	bhi.w	80088c0 <USBH_HandleEnum+0x39c>
 800853e:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <USBH_HandleEnum+0x20>)
 8008540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008544:	08008565 	.word	0x08008565
 8008548:	08008623 	.word	0x08008623
 800854c:	0800868d 	.word	0x0800868d
 8008550:	0800871b 	.word	0x0800871b
 8008554:	08008785 	.word	0x08008785
 8008558:	080087f5 	.word	0x080087f5
 800855c:	0800883b 	.word	0x0800883b
 8008560:	08008881 	.word	0x08008881
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008564:	2108      	movs	r1, #8
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fa50 	bl	8008a0c <USBH_Get_DevDesc>
 800856c:	4603      	mov	r3, r0
 800856e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d130      	bne.n	80085d8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	7919      	ldrb	r1, [r3, #4]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800859a:	b292      	uxth	r2, r2
 800859c:	9202      	str	r2, [sp, #8]
 800859e:	2200      	movs	r2, #0
 80085a0:	9201      	str	r2, [sp, #4]
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	4603      	mov	r3, r0
 80085a6:	2280      	movs	r2, #128	; 0x80
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 f865 	bl	8009678 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	7959      	ldrb	r1, [r3, #5]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80085c2:	b292      	uxth	r2, r2
 80085c4:	9202      	str	r2, [sp, #8]
 80085c6:	2200      	movs	r2, #0
 80085c8:	9201      	str	r2, [sp, #4]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	4603      	mov	r3, r0
 80085ce:	2200      	movs	r2, #0
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 f851 	bl	8009678 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80085d6:	e175      	b.n	80088c4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b03      	cmp	r3, #3
 80085dc:	f040 8172 	bne.w	80088c4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085e6:	3301      	adds	r3, #1
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d903      	bls.n	8008602 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	220d      	movs	r2, #13
 80085fe:	701a      	strb	r2, [r3, #0]
      break;
 8008600:	e160      	b.n	80088c4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	795b      	ldrb	r3, [r3, #5]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 f885 	bl	8009718 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	791b      	ldrb	r3, [r3, #4]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 f87f 	bl	8009718 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]
      break;
 8008620:	e150      	b.n	80088c4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008622:	2112      	movs	r1, #18
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f9f1 	bl	8008a0c <USBH_Get_DevDesc>
 800862a:	4603      	mov	r3, r0
 800862c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d103      	bne.n	800863c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800863a:	e145      	b.n	80088c8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	2b03      	cmp	r3, #3
 8008640:	f040 8142 	bne.w	80088c8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800864a:	3301      	adds	r3, #1
 800864c:	b2da      	uxtb	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800865a:	2b03      	cmp	r3, #3
 800865c:	d903      	bls.n	8008666 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	220d      	movs	r2, #13
 8008662:	701a      	strb	r2, [r3, #0]
      break;
 8008664:	e130      	b.n	80088c8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	795b      	ldrb	r3, [r3, #5]
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 f853 	bl	8009718 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	791b      	ldrb	r3, [r3, #4]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 f84d 	bl	8009718 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	701a      	strb	r2, [r3, #0]
      break;
 800868a:	e11d      	b.n	80088c8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800868c:	2101      	movs	r1, #1
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa68 	bl	8008b64 <USBH_SetAddress>
 8008694:	4603      	mov	r3, r0
 8008696:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d132      	bne.n	8008704 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800869e:	2002      	movs	r0, #2
 80086a0:	f001 fb30 	bl	8009d04 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2203      	movs	r2, #3
 80086b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	7919      	ldrb	r1, [r3, #4]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80086c6:	b292      	uxth	r2, r2
 80086c8:	9202      	str	r2, [sp, #8]
 80086ca:	2200      	movs	r2, #0
 80086cc:	9201      	str	r2, [sp, #4]
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	4603      	mov	r3, r0
 80086d2:	2280      	movs	r2, #128	; 0x80
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 ffcf 	bl	8009678 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	7959      	ldrb	r1, [r3, #5]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086ee:	b292      	uxth	r2, r2
 80086f0:	9202      	str	r2, [sp, #8]
 80086f2:	2200      	movs	r2, #0
 80086f4:	9201      	str	r2, [sp, #4]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	4603      	mov	r3, r0
 80086fa:	2200      	movs	r2, #0
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 ffbb 	bl	8009678 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008702:	e0e3      	b.n	80088cc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	2b03      	cmp	r3, #3
 8008708:	f040 80e0 	bne.w	80088cc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	220d      	movs	r2, #13
 8008710:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	705a      	strb	r2, [r3, #1]
      break;
 8008718:	e0d8      	b.n	80088cc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800871a:	2109      	movs	r1, #9
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f99d 	bl	8008a5c <USBH_Get_CfgDesc>
 8008722:	4603      	mov	r3, r0
 8008724:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d103      	bne.n	8008734 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2204      	movs	r2, #4
 8008730:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008732:	e0cd      	b.n	80088d0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	2b03      	cmp	r3, #3
 8008738:	f040 80ca 	bne.w	80088d0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008742:	3301      	adds	r3, #1
 8008744:	b2da      	uxtb	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008752:	2b03      	cmp	r3, #3
 8008754:	d903      	bls.n	800875e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	220d      	movs	r2, #13
 800875a:	701a      	strb	r2, [r3, #0]
      break;
 800875c:	e0b8      	b.n	80088d0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	795b      	ldrb	r3, [r3, #5]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 ffd7 	bl	8009718 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	791b      	ldrb	r3, [r3, #4]
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 ffd1 	bl	8009718 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	701a      	strb	r2, [r3, #0]
      break;
 8008782:	e0a5      	b.n	80088d0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f965 	bl	8008a5c <USBH_Get_CfgDesc>
 8008792:	4603      	mov	r3, r0
 8008794:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d103      	bne.n	80087a4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2205      	movs	r2, #5
 80087a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80087a2:	e097      	b.n	80088d4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	f040 8094 	bne.w	80088d4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087b2:	3301      	adds	r3, #1
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d903      	bls.n	80087ce <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	220d      	movs	r2, #13
 80087ca:	701a      	strb	r2, [r3, #0]
      break;
 80087cc:	e082      	b.n	80088d4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	795b      	ldrb	r3, [r3, #5]
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 ff9f 	bl	8009718 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	791b      	ldrb	r3, [r3, #4]
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 ff99 	bl	8009718 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	701a      	strb	r2, [r3, #0]
      break;
 80087f2:	e06f      	b.n	80088d4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d019      	beq.n	8008832 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800880a:	23ff      	movs	r3, #255	; 0xff
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f949 	bl	8008aa4 <USBH_Get_StringDesc>
 8008812:	4603      	mov	r3, r0
 8008814:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d103      	bne.n	8008824 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2206      	movs	r2, #6
 8008820:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008822:	e059      	b.n	80088d8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008824:	7bbb      	ldrb	r3, [r7, #14]
 8008826:	2b03      	cmp	r3, #3
 8008828:	d156      	bne.n	80088d8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2206      	movs	r2, #6
 800882e:	705a      	strb	r2, [r3, #1]
      break;
 8008830:	e052      	b.n	80088d8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2206      	movs	r2, #6
 8008836:	705a      	strb	r2, [r3, #1]
      break;
 8008838:	e04e      	b.n	80088d8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008840:	2b00      	cmp	r3, #0
 8008842:	d019      	beq.n	8008878 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008850:	23ff      	movs	r3, #255	; 0xff
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f926 	bl	8008aa4 <USBH_Get_StringDesc>
 8008858:	4603      	mov	r3, r0
 800885a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d103      	bne.n	800886a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2207      	movs	r2, #7
 8008866:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008868:	e038      	b.n	80088dc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800886a:	7bbb      	ldrb	r3, [r7, #14]
 800886c:	2b03      	cmp	r3, #3
 800886e:	d135      	bne.n	80088dc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2207      	movs	r2, #7
 8008874:	705a      	strb	r2, [r3, #1]
      break;
 8008876:	e031      	b.n	80088dc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2207      	movs	r2, #7
 800887c:	705a      	strb	r2, [r3, #1]
      break;
 800887e:	e02d      	b.n	80088dc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008886:	2b00      	cmp	r3, #0
 8008888:	d017      	beq.n	80088ba <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008896:	23ff      	movs	r3, #255	; 0xff
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f903 	bl	8008aa4 <USBH_Get_StringDesc>
 800889e:	4603      	mov	r3, r0
 80088a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d102      	bne.n	80088ae <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80088ac:	e018      	b.n	80088e0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d115      	bne.n	80088e0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73fb      	strb	r3, [r7, #15]
      break;
 80088b8:	e012      	b.n	80088e0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
      break;
 80088be:	e00f      	b.n	80088e0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80088c0:	bf00      	nop
 80088c2:	e00e      	b.n	80088e2 <USBH_HandleEnum+0x3be>
      break;
 80088c4:	bf00      	nop
 80088c6:	e00c      	b.n	80088e2 <USBH_HandleEnum+0x3be>
      break;
 80088c8:	bf00      	nop
 80088ca:	e00a      	b.n	80088e2 <USBH_HandleEnum+0x3be>
      break;
 80088cc:	bf00      	nop
 80088ce:	e008      	b.n	80088e2 <USBH_HandleEnum+0x3be>
      break;
 80088d0:	bf00      	nop
 80088d2:	e006      	b.n	80088e2 <USBH_HandleEnum+0x3be>
      break;
 80088d4:	bf00      	nop
 80088d6:	e004      	b.n	80088e2 <USBH_HandleEnum+0x3be>
      break;
 80088d8:	bf00      	nop
 80088da:	e002      	b.n	80088e2 <USBH_HandleEnum+0x3be>
      break;
 80088dc:	bf00      	nop
 80088de:	e000      	b.n	80088e2 <USBH_HandleEnum+0x3be>
      break;
 80088e0:	bf00      	nop
  }
  return Status;
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80088fe:	bf00      	nop
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f804 	bl	800892e <USBH_HandleSof>
}
 8008926:	bf00      	nop
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b082      	sub	sp, #8
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b0b      	cmp	r3, #11
 800893e:	d10a      	bne.n	8008956 <USBH_HandleSof+0x28>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008946:	2b00      	cmp	r3, #0
 8008948:	d005      	beq.n	8008956 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	4798      	blx	r3
  }
}
 8008956:	bf00      	nop
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800896e:	bf00      	nop
}
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800898a:	bf00      	nop
}
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 f844 	bl	8009a72 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	791b      	ldrb	r3, [r3, #4]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fe91 	bl	8009718 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	795b      	ldrb	r3, [r3, #5]
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fe8b 	bl	8009718 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af02      	add	r7, sp, #8
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008a1e:	78fb      	ldrb	r3, [r7, #3]
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	4613      	mov	r3, r2
 8008a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f864 	bl	8008afa <USBH_GetDescriptor>
 8008a32:	4603      	mov	r3, r0
 8008a34:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a48:	78fa      	ldrb	r2, [r7, #3]
 8008a4a:	b292      	uxth	r2, r2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f000 f918 	bl	8008c82 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	331c      	adds	r3, #28
 8008a6c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008a6e:	887b      	ldrh	r3, [r7, #2]
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a78:	2100      	movs	r1, #0
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f83d 	bl	8008afa <USBH_GetDescriptor>
 8008a80:	4603      	mov	r3, r0
 8008a82:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d107      	bne.n	8008a9a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008a8a:	887b      	ldrh	r3, [r7, #2]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	68b9      	ldr	r1, [r7, #8]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f987 	bl	8008da4 <USBH_ParseCfgDesc>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b088      	sub	sp, #32
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	607a      	str	r2, [r7, #4]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	72fb      	strb	r3, [r7, #11]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008ab8:	7afb      	ldrb	r3, [r7, #11]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008ac0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008ac8:	893b      	ldrh	r3, [r7, #8]
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	460b      	mov	r3, r1
 8008ace:	2100      	movs	r1, #0
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 f812 	bl	8008afa <USBH_GetDescriptor>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008ada:	7dfb      	ldrb	r3, [r7, #23]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d107      	bne.n	8008af0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ae6:	893a      	ldrh	r2, [r7, #8]
 8008ae8:	6879      	ldr	r1, [r7, #4]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 fb24 	bl	8009138 <USBH_ParseStringDesc>
  }

  return status;
 8008af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	607b      	str	r3, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	72fb      	strb	r3, [r7, #11]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	789b      	ldrb	r3, [r3, #2]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d11c      	bne.n	8008b4e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2206      	movs	r2, #6
 8008b24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	893a      	ldrh	r2, [r7, #8]
 8008b2a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008b2c:	893b      	ldrh	r3, [r7, #8]
 8008b2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b36:	d104      	bne.n	8008b42 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f240 4209 	movw	r2, #1033	; 0x409
 8008b3e:	829a      	strh	r2, [r3, #20]
 8008b40:	e002      	b.n	8008b48 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	8b3a      	ldrh	r2, [r7, #24]
 8008b4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008b4e:	8b3b      	ldrh	r3, [r7, #24]
 8008b50:	461a      	mov	r2, r3
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 fb3d 	bl	80091d4 <USBH_CtlReq>
 8008b5a:	4603      	mov	r3, r0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	789b      	ldrb	r3, [r3, #2]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d10f      	bne.n	8008b98 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2205      	movs	r2, #5
 8008b82:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fb19 	bl	80091d4 <USBH_CtlReq>
 8008ba2:	4603      	mov	r3, r0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	789b      	ldrb	r3, [r3, #2]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d10e      	bne.n	8008bde <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2209      	movs	r2, #9
 8008bca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	887a      	ldrh	r2, [r7, #2]
 8008bd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008bde:	2200      	movs	r2, #0
 8008be0:	2100      	movs	r1, #0
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 faf6 	bl	80091d4 <USBH_CtlReq>
 8008be8:	4603      	mov	r3, r0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	789b      	ldrb	r3, [r3, #2]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d10f      	bne.n	8008c26 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2203      	movs	r2, #3
 8008c10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008c12:	78fb      	ldrb	r3, [r7, #3]
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c26:	2200      	movs	r2, #0
 8008c28:	2100      	movs	r1, #0
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fad2 	bl	80091d4 <USBH_CtlReq>
 8008c30:	4603      	mov	r3, r0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	460b      	mov	r3, r1
 8008c44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	789b      	ldrb	r3, [r3, #2]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d10f      	bne.n	8008c6e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2202      	movs	r2, #2
 8008c52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008c6e:	2200      	movs	r2, #0
 8008c70:	2100      	movs	r1, #0
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 faae 	bl	80091d4 <USBH_CtlReq>
 8008c78:	4603      	mov	r3, r0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	781a      	ldrb	r2, [r3, #0]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	785a      	ldrb	r2, [r3, #1]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	3302      	adds	r3, #2
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	3303      	adds	r3, #3
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	021b      	lsls	r3, r3, #8
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	791a      	ldrb	r2, [r3, #4]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	795a      	ldrb	r2, [r3, #5]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	799a      	ldrb	r2, [r3, #6]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	79da      	ldrb	r2, [r3, #7]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	79db      	ldrb	r3, [r3, #7]
 8008ce0:	2b20      	cmp	r3, #32
 8008ce2:	dc11      	bgt.n	8008d08 <USBH_ParseDevDesc+0x86>
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	db16      	blt.n	8008d16 <USBH_ParseDevDesc+0x94>
 8008ce8:	3b08      	subs	r3, #8
 8008cea:	2201      	movs	r2, #1
 8008cec:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	bf14      	ite	ne
 8008cfc:	2301      	movne	r3, #1
 8008cfe:	2300      	moveq	r3, #0
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d102      	bne.n	8008d0c <USBH_ParseDevDesc+0x8a>
 8008d06:	e006      	b.n	8008d16 <USBH_ParseDevDesc+0x94>
 8008d08:	2b40      	cmp	r3, #64	; 0x40
 8008d0a:	d104      	bne.n	8008d16 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	79da      	ldrb	r2, [r3, #7]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	71da      	strb	r2, [r3, #7]
      break;
 8008d14:	e003      	b.n	8008d1e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2240      	movs	r2, #64	; 0x40
 8008d1a:	71da      	strb	r2, [r3, #7]
      break;
 8008d1c:	bf00      	nop
  }

  if (length > 8U)
 8008d1e:	88fb      	ldrh	r3, [r7, #6]
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d939      	bls.n	8008d98 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	3308      	adds	r3, #8
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	3309      	adds	r3, #9
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	021b      	lsls	r3, r3, #8
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	330a      	adds	r3, #10
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	330b      	adds	r3, #11
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	4313      	orrs	r3, r2
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	330c      	adds	r3, #12
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	330d      	adds	r3, #13
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	021b      	lsls	r3, r3, #8
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	4313      	orrs	r3, r2
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	7b9a      	ldrb	r2, [r3, #14]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	7bda      	ldrb	r2, [r3, #15]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	7c1a      	ldrb	r2, [r3, #16]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	7c5a      	ldrb	r2, [r3, #17]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	745a      	strb	r2, [r3, #17]
  }
}
 8008d98:	bf00      	nop
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b08c      	sub	sp, #48	; 0x30
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	4613      	mov	r3, r2
 8008db0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008db8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	781a      	ldrb	r2, [r3, #0]
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	785a      	ldrb	r2, [r3, #1]
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	3302      	adds	r3, #2
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	3303      	adds	r3, #3
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	021b      	lsls	r3, r3, #8
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e00:	bf28      	it	cs
 8008e02:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	791a      	ldrb	r2, [r3, #4]
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	795a      	ldrb	r2, [r3, #5]
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	799a      	ldrb	r2, [r3, #6]
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	79da      	ldrb	r2, [r3, #7]
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	7a1a      	ldrb	r2, [r3, #8]
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	2b09      	cmp	r3, #9
 8008e3a:	d002      	beq.n	8008e42 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	2209      	movs	r2, #9
 8008e40:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008e42:	88fb      	ldrh	r3, [r7, #6]
 8008e44:	2b09      	cmp	r3, #9
 8008e46:	f240 809d 	bls.w	8008f84 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008e4a:	2309      	movs	r3, #9
 8008e4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e52:	e081      	b.n	8008f58 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e54:	f107 0316 	add.w	r3, r7, #22
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e5c:	f000 f99f 	bl	800919e <USBH_GetNextDesc>
 8008e60:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e64:	785b      	ldrb	r3, [r3, #1]
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d176      	bne.n	8008f58 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	2b09      	cmp	r3, #9
 8008e70:	d002      	beq.n	8008e78 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e74:	2209      	movs	r2, #9
 8008e76:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e7c:	221a      	movs	r2, #26
 8008e7e:	fb02 f303 	mul.w	r3, r2, r3
 8008e82:	3308      	adds	r3, #8
 8008e84:	6a3a      	ldr	r2, [r7, #32]
 8008e86:	4413      	add	r3, r2
 8008e88:	3302      	adds	r3, #2
 8008e8a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e8e:	69f8      	ldr	r0, [r7, #28]
 8008e90:	f000 f87e 	bl	8008f90 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e9e:	e043      	b.n	8008f28 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ea0:	f107 0316 	add.w	r3, r7, #22
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ea8:	f000 f979 	bl	800919e <USBH_GetNextDesc>
 8008eac:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb0:	785b      	ldrb	r3, [r3, #1]
 8008eb2:	2b05      	cmp	r3, #5
 8008eb4:	d138      	bne.n	8008f28 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	795b      	ldrb	r3, [r3, #5]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d10f      	bne.n	8008ede <USBH_ParseCfgDesc+0x13a>
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	799b      	ldrb	r3, [r3, #6]
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d10b      	bne.n	8008ede <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	79db      	ldrb	r3, [r3, #7]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10f      	bne.n	8008eee <USBH_ParseCfgDesc+0x14a>
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b09      	cmp	r3, #9
 8008ed4:	d00b      	beq.n	8008eee <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed8:	2209      	movs	r2, #9
 8008eda:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008edc:	e007      	b.n	8008eee <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b07      	cmp	r3, #7
 8008ee4:	d004      	beq.n	8008ef0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee8:	2207      	movs	r2, #7
 8008eea:	701a      	strb	r2, [r3, #0]
 8008eec:	e000      	b.n	8008ef0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008eee:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ef4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008ef8:	3201      	adds	r2, #1
 8008efa:	00d2      	lsls	r2, r2, #3
 8008efc:	211a      	movs	r1, #26
 8008efe:	fb01 f303 	mul.w	r3, r1, r3
 8008f02:	4413      	add	r3, r2
 8008f04:	3308      	adds	r3, #8
 8008f06:	6a3a      	ldr	r2, [r7, #32]
 8008f08:	4413      	add	r3, r2
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f10:	69b9      	ldr	r1, [r7, #24]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 f86b 	bl	8008fee <USBH_ParseEPDesc>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008f1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f22:	3301      	adds	r3, #1
 8008f24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	791b      	ldrb	r3, [r3, #4]
 8008f2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d204      	bcs.n	8008f3e <USBH_ParseCfgDesc+0x19a>
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	885a      	ldrh	r2, [r3, #2]
 8008f38:	8afb      	ldrh	r3, [r7, #22]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d8b0      	bhi.n	8008ea0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	791b      	ldrb	r3, [r3, #4]
 8008f42:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d201      	bcs.n	8008f4e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e01c      	b.n	8008f88 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f52:	3301      	adds	r3, #1
 8008f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d805      	bhi.n	8008f6c <USBH_ParseCfgDesc+0x1c8>
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	885a      	ldrh	r2, [r3, #2]
 8008f64:	8afb      	ldrh	r3, [r7, #22]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	f63f af74 	bhi.w	8008e54 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	791b      	ldrb	r3, [r3, #4]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	bf28      	it	cs
 8008f74:	2302      	movcs	r3, #2
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d201      	bcs.n	8008f84 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e001      	b.n	8008f88 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008f84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3730      	adds	r7, #48	; 0x30
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781a      	ldrb	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	785a      	ldrb	r2, [r3, #1]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	789a      	ldrb	r2, [r3, #2]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	78da      	ldrb	r2, [r3, #3]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	791a      	ldrb	r2, [r3, #4]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	795a      	ldrb	r2, [r3, #5]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	799a      	ldrb	r2, [r3, #6]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	79da      	ldrb	r2, [r3, #7]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	7a1a      	ldrb	r2, [r3, #8]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	721a      	strb	r2, [r3, #8]
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b087      	sub	sp, #28
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	781a      	ldrb	r2, [r3, #0]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	785a      	ldrb	r2, [r3, #1]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	789a      	ldrb	r2, [r3, #2]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	78da      	ldrb	r2, [r3, #3]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3304      	adds	r3, #4
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	b29a      	uxth	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	3305      	adds	r3, #5
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	b29b      	uxth	r3, r3
 800902e:	021b      	lsls	r3, r3, #8
 8009030:	b29b      	uxth	r3, r3
 8009032:	4313      	orrs	r3, r2
 8009034:	b29a      	uxth	r2, r3
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	799a      	ldrb	r2, [r3, #6]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	889b      	ldrh	r3, [r3, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d102      	bne.n	8009050 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800904a:	2303      	movs	r3, #3
 800904c:	75fb      	strb	r3, [r7, #23]
 800904e:	e033      	b.n	80090b8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	889b      	ldrh	r3, [r3, #4]
 8009054:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009058:	f023 0307 	bic.w	r3, r3, #7
 800905c:	b29a      	uxth	r2, r3
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	889b      	ldrh	r3, [r3, #4]
 8009066:	b21a      	sxth	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3304      	adds	r3, #4
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	b299      	uxth	r1, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3305      	adds	r3, #5
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	b29b      	uxth	r3, r3
 8009078:	021b      	lsls	r3, r3, #8
 800907a:	b29b      	uxth	r3, r3
 800907c:	430b      	orrs	r3, r1
 800907e:	b29b      	uxth	r3, r3
 8009080:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009084:	2b00      	cmp	r3, #0
 8009086:	d110      	bne.n	80090aa <USBH_ParseEPDesc+0xbc>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	3304      	adds	r3, #4
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	b299      	uxth	r1, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	3305      	adds	r3, #5
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	021b      	lsls	r3, r3, #8
 800909a:	b29b      	uxth	r3, r3
 800909c:	430b      	orrs	r3, r1
 800909e:	b29b      	uxth	r3, r3
 80090a0:	b21b      	sxth	r3, r3
 80090a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090a6:	b21b      	sxth	r3, r3
 80090a8:	e001      	b.n	80090ae <USBH_ParseEPDesc+0xc0>
 80090aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090ae:	4313      	orrs	r3, r2
 80090b0:	b21b      	sxth	r3, r3
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d116      	bne.n	80090f0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	78db      	ldrb	r3, [r3, #3]
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d005      	beq.n	80090da <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	78db      	ldrb	r3, [r3, #3]
 80090d2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d127      	bne.n	800912a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	799b      	ldrb	r3, [r3, #6]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d003      	beq.n	80090ea <USBH_ParseEPDesc+0xfc>
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	799b      	ldrb	r3, [r3, #6]
 80090e6:	2b10      	cmp	r3, #16
 80090e8:	d91f      	bls.n	800912a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80090ea:	2303      	movs	r3, #3
 80090ec:	75fb      	strb	r3, [r7, #23]
 80090ee:	e01c      	b.n	800912a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	78db      	ldrb	r3, [r3, #3]
 80090f4:	f003 0303 	and.w	r3, r3, #3
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d10a      	bne.n	8009112 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	799b      	ldrb	r3, [r3, #6]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d003      	beq.n	800910c <USBH_ParseEPDesc+0x11e>
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	799b      	ldrb	r3, [r3, #6]
 8009108:	2b10      	cmp	r3, #16
 800910a:	d90e      	bls.n	800912a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800910c:	2303      	movs	r3, #3
 800910e:	75fb      	strb	r3, [r7, #23]
 8009110:	e00b      	b.n	800912a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	78db      	ldrb	r3, [r3, #3]
 8009116:	f003 0303 	and.w	r3, r3, #3
 800911a:	2b03      	cmp	r3, #3
 800911c:	d105      	bne.n	800912a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	799b      	ldrb	r3, [r3, #6]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009126:	2303      	movs	r3, #3
 8009128:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800912a:	7dfb      	ldrb	r3, [r7, #23]
}
 800912c:	4618      	mov	r0, r3
 800912e:	371c      	adds	r7, #28
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	4613      	mov	r3, r2
 8009144:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3301      	adds	r3, #1
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2b03      	cmp	r3, #3
 800914e:	d120      	bne.n	8009192 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	1e9a      	subs	r2, r3, #2
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	4293      	cmp	r3, r2
 800915a:	bf28      	it	cs
 800915c:	4613      	movcs	r3, r2
 800915e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3302      	adds	r3, #2
 8009164:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009166:	2300      	movs	r3, #0
 8009168:	82fb      	strh	r3, [r7, #22]
 800916a:	e00b      	b.n	8009184 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800916c:	8afb      	ldrh	r3, [r7, #22]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	4413      	add	r3, r2
 8009172:	781a      	ldrb	r2, [r3, #0]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	3301      	adds	r3, #1
 800917c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800917e:	8afb      	ldrh	r3, [r7, #22]
 8009180:	3302      	adds	r3, #2
 8009182:	82fb      	strh	r3, [r7, #22]
 8009184:	8afa      	ldrh	r2, [r7, #22]
 8009186:	8abb      	ldrh	r3, [r7, #20]
 8009188:	429a      	cmp	r2, r3
 800918a:	d3ef      	bcc.n	800916c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	2200      	movs	r2, #0
 8009190:	701a      	strb	r2, [r3, #0]
  }
}
 8009192:	bf00      	nop
 8009194:	371c      	adds	r7, #28
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800919e:	b480      	push	{r7}
 80091a0:	b085      	sub	sp, #20
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	881a      	ldrh	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	4413      	add	r3, r2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4413      	add	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80091c6:	68fb      	ldr	r3, [r7, #12]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	4613      	mov	r3, r2
 80091e0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80091e2:	2301      	movs	r3, #1
 80091e4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	789b      	ldrb	r3, [r3, #2]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d002      	beq.n	80091f4 <USBH_CtlReq+0x20>
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d00f      	beq.n	8009212 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80091f2:	e027      	b.n	8009244 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	88fa      	ldrh	r2, [r7, #6]
 80091fe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2201      	movs	r2, #1
 8009204:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2202      	movs	r2, #2
 800920a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800920c:	2301      	movs	r3, #1
 800920e:	75fb      	strb	r3, [r7, #23]
      break;
 8009210:	e018      	b.n	8009244 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 f81c 	bl	8009250 <USBH_HandleControl>
 8009218:	4603      	mov	r3, r0
 800921a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <USBH_CtlReq+0x54>
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	2b03      	cmp	r3, #3
 8009226:	d106      	bne.n	8009236 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2201      	movs	r2, #1
 800922c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	761a      	strb	r2, [r3, #24]
      break;
 8009234:	e005      	b.n	8009242 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d102      	bne.n	8009242 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2201      	movs	r2, #1
 8009240:	709a      	strb	r2, [r3, #2]
      break;
 8009242:	bf00      	nop
  }
  return status;
 8009244:	7dfb      	ldrb	r3, [r7, #23]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af02      	add	r7, sp, #8
 8009256:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009258:	2301      	movs	r3, #1
 800925a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800925c:	2300      	movs	r3, #0
 800925e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	7e1b      	ldrb	r3, [r3, #24]
 8009264:	3b01      	subs	r3, #1
 8009266:	2b0a      	cmp	r3, #10
 8009268:	f200 8156 	bhi.w	8009518 <USBH_HandleControl+0x2c8>
 800926c:	a201      	add	r2, pc, #4	; (adr r2, 8009274 <USBH_HandleControl+0x24>)
 800926e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009272:	bf00      	nop
 8009274:	080092a1 	.word	0x080092a1
 8009278:	080092bb 	.word	0x080092bb
 800927c:	08009325 	.word	0x08009325
 8009280:	0800934b 	.word	0x0800934b
 8009284:	08009383 	.word	0x08009383
 8009288:	080093ad 	.word	0x080093ad
 800928c:	080093ff 	.word	0x080093ff
 8009290:	08009421 	.word	0x08009421
 8009294:	0800945d 	.word	0x0800945d
 8009298:	08009483 	.word	0x08009483
 800929c:	080094c1 	.word	0x080094c1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f103 0110 	add.w	r1, r3, #16
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	795b      	ldrb	r3, [r3, #5]
 80092aa:	461a      	mov	r2, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f943 	bl	8009538 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2202      	movs	r2, #2
 80092b6:	761a      	strb	r2, [r3, #24]
      break;
 80092b8:	e139      	b.n	800952e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	795b      	ldrb	r3, [r3, #5]
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fcc5 	bl	8009c50 <USBH_LL_GetURBState>
 80092c6:	4603      	mov	r3, r0
 80092c8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80092ca:	7bbb      	ldrb	r3, [r7, #14]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d11e      	bne.n	800930e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	7c1b      	ldrb	r3, [r3, #16]
 80092d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092d8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	8adb      	ldrh	r3, [r3, #22]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80092e2:	7b7b      	ldrb	r3, [r7, #13]
 80092e4:	2b80      	cmp	r3, #128	; 0x80
 80092e6:	d103      	bne.n	80092f0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2203      	movs	r2, #3
 80092ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092ee:	e115      	b.n	800951c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2205      	movs	r2, #5
 80092f4:	761a      	strb	r2, [r3, #24]
      break;
 80092f6:	e111      	b.n	800951c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80092f8:	7b7b      	ldrb	r3, [r7, #13]
 80092fa:	2b80      	cmp	r3, #128	; 0x80
 80092fc:	d103      	bne.n	8009306 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2209      	movs	r2, #9
 8009302:	761a      	strb	r2, [r3, #24]
      break;
 8009304:	e10a      	b.n	800951c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2207      	movs	r2, #7
 800930a:	761a      	strb	r2, [r3, #24]
      break;
 800930c:	e106      	b.n	800951c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800930e:	7bbb      	ldrb	r3, [r7, #14]
 8009310:	2b04      	cmp	r3, #4
 8009312:	d003      	beq.n	800931c <USBH_HandleControl+0xcc>
 8009314:	7bbb      	ldrb	r3, [r7, #14]
 8009316:	2b02      	cmp	r3, #2
 8009318:	f040 8100 	bne.w	800951c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	220b      	movs	r2, #11
 8009320:	761a      	strb	r2, [r3, #24]
      break;
 8009322:	e0fb      	b.n	800951c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800932a:	b29a      	uxth	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6899      	ldr	r1, [r3, #8]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	899a      	ldrh	r2, [r3, #12]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	791b      	ldrb	r3, [r3, #4]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f93a 	bl	80095b6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2204      	movs	r2, #4
 8009346:	761a      	strb	r2, [r3, #24]
      break;
 8009348:	e0f1      	b.n	800952e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	791b      	ldrb	r3, [r3, #4]
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fc7d 	bl	8009c50 <USBH_LL_GetURBState>
 8009356:	4603      	mov	r3, r0
 8009358:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d102      	bne.n	8009366 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2209      	movs	r2, #9
 8009364:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	2b05      	cmp	r3, #5
 800936a:	d102      	bne.n	8009372 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800936c:	2303      	movs	r3, #3
 800936e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009370:	e0d6      	b.n	8009520 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b04      	cmp	r3, #4
 8009376:	f040 80d3 	bne.w	8009520 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	220b      	movs	r2, #11
 800937e:	761a      	strb	r2, [r3, #24]
      break;
 8009380:	e0ce      	b.n	8009520 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6899      	ldr	r1, [r3, #8]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	899a      	ldrh	r2, [r3, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	795b      	ldrb	r3, [r3, #5]
 800938e:	2001      	movs	r0, #1
 8009390:	9000      	str	r0, [sp, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f8ea 	bl	800956c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800939e:	b29a      	uxth	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2206      	movs	r2, #6
 80093a8:	761a      	strb	r2, [r3, #24]
      break;
 80093aa:	e0c0      	b.n	800952e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	795b      	ldrb	r3, [r3, #5]
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fc4c 	bl	8009c50 <USBH_LL_GetURBState>
 80093b8:	4603      	mov	r3, r0
 80093ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d103      	bne.n	80093ca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2207      	movs	r2, #7
 80093c6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093c8:	e0ac      	b.n	8009524 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	2b05      	cmp	r3, #5
 80093ce:	d105      	bne.n	80093dc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	220c      	movs	r2, #12
 80093d4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80093d6:	2303      	movs	r3, #3
 80093d8:	73fb      	strb	r3, [r7, #15]
      break;
 80093da:	e0a3      	b.n	8009524 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d103      	bne.n	80093ea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2205      	movs	r2, #5
 80093e6:	761a      	strb	r2, [r3, #24]
      break;
 80093e8:	e09c      	b.n	8009524 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	f040 8099 	bne.w	8009524 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	220b      	movs	r2, #11
 80093f6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80093f8:	2302      	movs	r3, #2
 80093fa:	73fb      	strb	r3, [r7, #15]
      break;
 80093fc:	e092      	b.n	8009524 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	791b      	ldrb	r3, [r3, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	2100      	movs	r1, #0
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f8d5 	bl	80095b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009412:	b29a      	uxth	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2208      	movs	r2, #8
 800941c:	761a      	strb	r2, [r3, #24]

      break;
 800941e:	e086      	b.n	800952e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	791b      	ldrb	r3, [r3, #4]
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fc12 	bl	8009c50 <USBH_LL_GetURBState>
 800942c:	4603      	mov	r3, r0
 800942e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009430:	7bbb      	ldrb	r3, [r7, #14]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d105      	bne.n	8009442 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	220d      	movs	r2, #13
 800943a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009440:	e072      	b.n	8009528 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009442:	7bbb      	ldrb	r3, [r7, #14]
 8009444:	2b04      	cmp	r3, #4
 8009446:	d103      	bne.n	8009450 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	220b      	movs	r2, #11
 800944c:	761a      	strb	r2, [r3, #24]
      break;
 800944e:	e06b      	b.n	8009528 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	2b05      	cmp	r3, #5
 8009454:	d168      	bne.n	8009528 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009456:	2303      	movs	r3, #3
 8009458:	73fb      	strb	r3, [r7, #15]
      break;
 800945a:	e065      	b.n	8009528 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	795b      	ldrb	r3, [r3, #5]
 8009460:	2201      	movs	r2, #1
 8009462:	9200      	str	r2, [sp, #0]
 8009464:	2200      	movs	r2, #0
 8009466:	2100      	movs	r1, #0
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f87f 	bl	800956c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009474:	b29a      	uxth	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	220a      	movs	r2, #10
 800947e:	761a      	strb	r2, [r3, #24]
      break;
 8009480:	e055      	b.n	800952e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	795b      	ldrb	r3, [r3, #5]
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fbe1 	bl	8009c50 <USBH_LL_GetURBState>
 800948e:	4603      	mov	r3, r0
 8009490:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009492:	7bbb      	ldrb	r3, [r7, #14]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d105      	bne.n	80094a4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	220d      	movs	r2, #13
 80094a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094a2:	e043      	b.n	800952c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d103      	bne.n	80094b2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2209      	movs	r2, #9
 80094ae:	761a      	strb	r2, [r3, #24]
      break;
 80094b0:	e03c      	b.n	800952c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	2b04      	cmp	r3, #4
 80094b6:	d139      	bne.n	800952c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	220b      	movs	r2, #11
 80094bc:	761a      	strb	r2, [r3, #24]
      break;
 80094be:	e035      	b.n	800952c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	7e5b      	ldrb	r3, [r3, #25]
 80094c4:	3301      	adds	r3, #1
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	765a      	strb	r2, [r3, #25]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	7e5b      	ldrb	r3, [r3, #25]
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d806      	bhi.n	80094e2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80094e0:	e025      	b.n	800952e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094e8:	2106      	movs	r1, #6
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	795b      	ldrb	r3, [r3, #5]
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f90c 	bl	8009718 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	791b      	ldrb	r3, [r3, #4]
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f906 	bl	8009718 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009512:	2302      	movs	r3, #2
 8009514:	73fb      	strb	r3, [r7, #15]
      break;
 8009516:	e00a      	b.n	800952e <USBH_HandleControl+0x2de>

    default:
      break;
 8009518:	bf00      	nop
 800951a:	e008      	b.n	800952e <USBH_HandleControl+0x2de>
      break;
 800951c:	bf00      	nop
 800951e:	e006      	b.n	800952e <USBH_HandleControl+0x2de>
      break;
 8009520:	bf00      	nop
 8009522:	e004      	b.n	800952e <USBH_HandleControl+0x2de>
      break;
 8009524:	bf00      	nop
 8009526:	e002      	b.n	800952e <USBH_HandleControl+0x2de>
      break;
 8009528:	bf00      	nop
 800952a:	e000      	b.n	800952e <USBH_HandleControl+0x2de>
      break;
 800952c:	bf00      	nop
  }

  return status;
 800952e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b088      	sub	sp, #32
 800953c:	af04      	add	r7, sp, #16
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	4613      	mov	r3, r2
 8009544:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009546:	79f9      	ldrb	r1, [r7, #7]
 8009548:	2300      	movs	r3, #0
 800954a:	9303      	str	r3, [sp, #12]
 800954c:	2308      	movs	r3, #8
 800954e:	9302      	str	r3, [sp, #8]
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	9301      	str	r3, [sp, #4]
 8009554:	2300      	movs	r3, #0
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	2300      	movs	r3, #0
 800955a:	2200      	movs	r2, #0
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f000 fb46 	bl	8009bee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b088      	sub	sp, #32
 8009570:	af04      	add	r7, sp, #16
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	4611      	mov	r1, r2
 8009578:	461a      	mov	r2, r3
 800957a:	460b      	mov	r3, r1
 800957c:	80fb      	strh	r3, [r7, #6]
 800957e:	4613      	mov	r3, r2
 8009580:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009590:	7979      	ldrb	r1, [r7, #5]
 8009592:	7e3b      	ldrb	r3, [r7, #24]
 8009594:	9303      	str	r3, [sp, #12]
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	9302      	str	r3, [sp, #8]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	2301      	movs	r3, #1
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	2300      	movs	r3, #0
 80095a4:	2200      	movs	r2, #0
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 fb21 	bl	8009bee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b088      	sub	sp, #32
 80095ba:	af04      	add	r7, sp, #16
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	60b9      	str	r1, [r7, #8]
 80095c0:	4611      	mov	r1, r2
 80095c2:	461a      	mov	r2, r3
 80095c4:	460b      	mov	r3, r1
 80095c6:	80fb      	strh	r3, [r7, #6]
 80095c8:	4613      	mov	r3, r2
 80095ca:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095cc:	7979      	ldrb	r1, [r7, #5]
 80095ce:	2300      	movs	r3, #0
 80095d0:	9303      	str	r3, [sp, #12]
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	9302      	str	r3, [sp, #8]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	9301      	str	r3, [sp, #4]
 80095da:	2301      	movs	r3, #1
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	2300      	movs	r3, #0
 80095e0:	2201      	movs	r2, #1
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f000 fb03 	bl	8009bee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80095e8:	2300      	movs	r3, #0

}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b088      	sub	sp, #32
 80095f6:	af04      	add	r7, sp, #16
 80095f8:	60f8      	str	r0, [r7, #12]
 80095fa:	60b9      	str	r1, [r7, #8]
 80095fc:	4611      	mov	r1, r2
 80095fe:	461a      	mov	r2, r3
 8009600:	460b      	mov	r3, r1
 8009602:	80fb      	strh	r3, [r7, #6]
 8009604:	4613      	mov	r3, r2
 8009606:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009612:	2300      	movs	r3, #0
 8009614:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009616:	7979      	ldrb	r1, [r7, #5]
 8009618:	7e3b      	ldrb	r3, [r7, #24]
 800961a:	9303      	str	r3, [sp, #12]
 800961c:	88fb      	ldrh	r3, [r7, #6]
 800961e:	9302      	str	r3, [sp, #8]
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	9301      	str	r3, [sp, #4]
 8009624:	2301      	movs	r3, #1
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	2302      	movs	r3, #2
 800962a:	2200      	movs	r2, #0
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 fade 	bl	8009bee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af04      	add	r7, sp, #16
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	4611      	mov	r1, r2
 8009648:	461a      	mov	r2, r3
 800964a:	460b      	mov	r3, r1
 800964c:	80fb      	strh	r3, [r7, #6]
 800964e:	4613      	mov	r3, r2
 8009650:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009652:	7979      	ldrb	r1, [r7, #5]
 8009654:	2300      	movs	r3, #0
 8009656:	9303      	str	r3, [sp, #12]
 8009658:	88fb      	ldrh	r3, [r7, #6]
 800965a:	9302      	str	r3, [sp, #8]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	9301      	str	r3, [sp, #4]
 8009660:	2301      	movs	r3, #1
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	2302      	movs	r3, #2
 8009666:	2201      	movs	r2, #1
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 fac0 	bl	8009bee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af04      	add	r7, sp, #16
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	4608      	mov	r0, r1
 8009682:	4611      	mov	r1, r2
 8009684:	461a      	mov	r2, r3
 8009686:	4603      	mov	r3, r0
 8009688:	70fb      	strb	r3, [r7, #3]
 800968a:	460b      	mov	r3, r1
 800968c:	70bb      	strb	r3, [r7, #2]
 800968e:	4613      	mov	r3, r2
 8009690:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009692:	7878      	ldrb	r0, [r7, #1]
 8009694:	78ba      	ldrb	r2, [r7, #2]
 8009696:	78f9      	ldrb	r1, [r7, #3]
 8009698:	8b3b      	ldrh	r3, [r7, #24]
 800969a:	9302      	str	r3, [sp, #8]
 800969c:	7d3b      	ldrb	r3, [r7, #20]
 800969e:	9301      	str	r3, [sp, #4]
 80096a0:	7c3b      	ldrb	r3, [r7, #16]
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	4603      	mov	r3, r0
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fa53 	bl	8009b52 <USBH_LL_OpenPipe>

  return USBH_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	460b      	mov	r3, r1
 80096c0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80096c2:	78fb      	ldrb	r3, [r7, #3]
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fa72 	bl	8009bb0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b084      	sub	sp, #16
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	460b      	mov	r3, r1
 80096e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f836 	bl	8009754 <USBH_GetFreePipe>
 80096e8:	4603      	mov	r3, r0
 80096ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80096ec:	89fb      	ldrh	r3, [r7, #14]
 80096ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d00a      	beq.n	800970c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80096f6:	78fa      	ldrb	r2, [r7, #3]
 80096f8:	89fb      	ldrh	r3, [r7, #14]
 80096fa:	f003 030f 	and.w	r3, r3, #15
 80096fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009702:	6879      	ldr	r1, [r7, #4]
 8009704:	33e0      	adds	r3, #224	; 0xe0
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	440b      	add	r3, r1
 800970a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800970c:	89fb      	ldrh	r3, [r7, #14]
 800970e:	b2db      	uxtb	r3, r3
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	2b0f      	cmp	r3, #15
 8009728:	d80d      	bhi.n	8009746 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800972a:	78fb      	ldrb	r3, [r7, #3]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	33e0      	adds	r3, #224	; 0xe0
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	78fb      	ldrb	r3, [r7, #3]
 8009738:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800973c:	6879      	ldr	r1, [r7, #4]
 800973e:	33e0      	adds	r3, #224	; 0xe0
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	440b      	add	r3, r1
 8009744:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009760:	2300      	movs	r3, #0
 8009762:	73fb      	strb	r3, [r7, #15]
 8009764:	e00f      	b.n	8009786 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009766:	7bfb      	ldrb	r3, [r7, #15]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	33e0      	adds	r3, #224	; 0xe0
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	b29b      	uxth	r3, r3
 800977e:	e007      	b.n	8009790 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	3301      	adds	r3, #1
 8009784:	73fb      	strb	r3, [r7, #15]
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	2b0f      	cmp	r3, #15
 800978a:	d9ec      	bls.n	8009766 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800978c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009790:	4618      	mov	r0, r3
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80097a0:	2201      	movs	r2, #1
 80097a2:	490e      	ldr	r1, [pc, #56]	; (80097dc <MX_USB_HOST_Init+0x40>)
 80097a4:	480e      	ldr	r0, [pc, #56]	; (80097e0 <MX_USB_HOST_Init+0x44>)
 80097a6:	f7fe fba7 	bl	8007ef8 <USBH_Init>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80097b0:	f7f7 fa3e 	bl	8000c30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80097b4:	490b      	ldr	r1, [pc, #44]	; (80097e4 <MX_USB_HOST_Init+0x48>)
 80097b6:	480a      	ldr	r0, [pc, #40]	; (80097e0 <MX_USB_HOST_Init+0x44>)
 80097b8:	f7fe fc2c 	bl	8008014 <USBH_RegisterClass>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80097c2:	f7f7 fa35 	bl	8000c30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80097c6:	4806      	ldr	r0, [pc, #24]	; (80097e0 <MX_USB_HOST_Init+0x44>)
 80097c8:	f7fe fcb0 	bl	800812c <USBH_Start>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80097d2:	f7f7 fa2d 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80097d6:	bf00      	nop
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	080097fd 	.word	0x080097fd
 80097e0:	2000032c 	.word	0x2000032c
 80097e4:	2000000c 	.word	0x2000000c

080097e8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80097ec:	4802      	ldr	r0, [pc, #8]	; (80097f8 <MX_USB_HOST_Process+0x10>)
 80097ee:	f7fe fcad 	bl	800814c <USBH_Process>
}
 80097f2:	bf00      	nop
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	2000032c 	.word	0x2000032c

080097fc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	3b01      	subs	r3, #1
 800980c:	2b04      	cmp	r3, #4
 800980e:	d819      	bhi.n	8009844 <USBH_UserProcess+0x48>
 8009810:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <USBH_UserProcess+0x1c>)
 8009812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009816:	bf00      	nop
 8009818:	08009845 	.word	0x08009845
 800981c:	08009835 	.word	0x08009835
 8009820:	08009845 	.word	0x08009845
 8009824:	0800983d 	.word	0x0800983d
 8009828:	0800982d 	.word	0x0800982d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800982c:	4b09      	ldr	r3, [pc, #36]	; (8009854 <USBH_UserProcess+0x58>)
 800982e:	2203      	movs	r2, #3
 8009830:	701a      	strb	r2, [r3, #0]
  break;
 8009832:	e008      	b.n	8009846 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009834:	4b07      	ldr	r3, [pc, #28]	; (8009854 <USBH_UserProcess+0x58>)
 8009836:	2202      	movs	r2, #2
 8009838:	701a      	strb	r2, [r3, #0]
  break;
 800983a:	e004      	b.n	8009846 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800983c:	4b05      	ldr	r3, [pc, #20]	; (8009854 <USBH_UserProcess+0x58>)
 800983e:	2201      	movs	r2, #1
 8009840:	701a      	strb	r2, [r3, #0]
  break;
 8009842:	e000      	b.n	8009846 <USBH_UserProcess+0x4a>

  default:
  break;
 8009844:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009846:	bf00      	nop
 8009848:	370c      	adds	r7, #12
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	20000704 	.word	0x20000704

08009858 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08a      	sub	sp, #40	; 0x28
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009860:	f107 0314 	add.w	r3, r7, #20
 8009864:	2200      	movs	r2, #0
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	605a      	str	r2, [r3, #4]
 800986a:	609a      	str	r2, [r3, #8]
 800986c:	60da      	str	r2, [r3, #12]
 800986e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009878:	d147      	bne.n	800990a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800987a:	2300      	movs	r3, #0
 800987c:	613b      	str	r3, [r7, #16]
 800987e:	4b25      	ldr	r3, [pc, #148]	; (8009914 <HAL_HCD_MspInit+0xbc>)
 8009880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009882:	4a24      	ldr	r2, [pc, #144]	; (8009914 <HAL_HCD_MspInit+0xbc>)
 8009884:	f043 0301 	orr.w	r3, r3, #1
 8009888:	6313      	str	r3, [r2, #48]	; 0x30
 800988a:	4b22      	ldr	r3, [pc, #136]	; (8009914 <HAL_HCD_MspInit+0xbc>)
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	613b      	str	r3, [r7, #16]
 8009894:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800989a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800989c:	2300      	movs	r3, #0
 800989e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098a0:	2300      	movs	r3, #0
 80098a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80098a4:	f107 0314 	add.w	r3, r7, #20
 80098a8:	4619      	mov	r1, r3
 80098aa:	481b      	ldr	r0, [pc, #108]	; (8009918 <HAL_HCD_MspInit+0xc0>)
 80098ac:	f7f8 ffa6 	bl	80027fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80098b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80098b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098b6:	2302      	movs	r3, #2
 80098b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098be:	2303      	movs	r3, #3
 80098c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80098c2:	230a      	movs	r3, #10
 80098c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098c6:	f107 0314 	add.w	r3, r7, #20
 80098ca:	4619      	mov	r1, r3
 80098cc:	4812      	ldr	r0, [pc, #72]	; (8009918 <HAL_HCD_MspInit+0xc0>)
 80098ce:	f7f8 ff95 	bl	80027fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80098d2:	4b10      	ldr	r3, [pc, #64]	; (8009914 <HAL_HCD_MspInit+0xbc>)
 80098d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d6:	4a0f      	ldr	r2, [pc, #60]	; (8009914 <HAL_HCD_MspInit+0xbc>)
 80098d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098dc:	6353      	str	r3, [r2, #52]	; 0x34
 80098de:	2300      	movs	r3, #0
 80098e0:	60fb      	str	r3, [r7, #12]
 80098e2:	4b0c      	ldr	r3, [pc, #48]	; (8009914 <HAL_HCD_MspInit+0xbc>)
 80098e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e6:	4a0b      	ldr	r2, [pc, #44]	; (8009914 <HAL_HCD_MspInit+0xbc>)
 80098e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098ec:	6453      	str	r3, [r2, #68]	; 0x44
 80098ee:	4b09      	ldr	r3, [pc, #36]	; (8009914 <HAL_HCD_MspInit+0xbc>)
 80098f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80098fa:	2200      	movs	r2, #0
 80098fc:	2100      	movs	r1, #0
 80098fe:	2043      	movs	r0, #67	; 0x43
 8009900:	f7f8 fbd5 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009904:	2043      	movs	r0, #67	; 0x43
 8009906:	f7f8 fbee 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800990a:	bf00      	nop
 800990c:	3728      	adds	r7, #40	; 0x28
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	40023800 	.word	0x40023800
 8009918:	40020000 	.word	0x40020000

0800991c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe ffed 	bl	800890a <USBH_LL_IncTimer>
}
 8009930:	bf00      	nop
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff f825 	bl	8008996 <USBH_LL_Connect>
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009962:	4618      	mov	r0, r3
 8009964:	f7ff f82e 	bl	80089c4 <USBH_LL_Disconnect>
}
 8009968:	bf00      	nop
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	70fb      	strb	r3, [r7, #3]
 800997c:	4613      	mov	r3, r2
 800997e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe ffdf 	bl	800895e <USBH_LL_PortEnabled>
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe ffdf 	bl	800897a <USBH_LL_PortDisabled>
}
 80099bc:	bf00      	nop
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d12a      	bne.n	8009a2c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80099d6:	4a18      	ldr	r2, [pc, #96]	; (8009a38 <USBH_LL_Init+0x74>)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a15      	ldr	r2, [pc, #84]	; (8009a38 <USBH_LL_Init+0x74>)
 80099e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80099e6:	4b14      	ldr	r3, [pc, #80]	; (8009a38 <USBH_LL_Init+0x74>)
 80099e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80099ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80099ee:	4b12      	ldr	r3, [pc, #72]	; (8009a38 <USBH_LL_Init+0x74>)
 80099f0:	2208      	movs	r2, #8
 80099f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80099f4:	4b10      	ldr	r3, [pc, #64]	; (8009a38 <USBH_LL_Init+0x74>)
 80099f6:	2201      	movs	r2, #1
 80099f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80099fa:	4b0f      	ldr	r3, [pc, #60]	; (8009a38 <USBH_LL_Init+0x74>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009a00:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <USBH_LL_Init+0x74>)
 8009a02:	2202      	movs	r2, #2
 8009a04:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a06:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <USBH_LL_Init+0x74>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009a0c:	480a      	ldr	r0, [pc, #40]	; (8009a38 <USBH_LL_Init+0x74>)
 8009a0e:	f7f9 f892 	bl	8002b36 <HAL_HCD_Init>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009a18:	f7f7 f90a 	bl	8000c30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009a1c:	4806      	ldr	r0, [pc, #24]	; (8009a38 <USBH_LL_Init+0x74>)
 8009a1e:	f7f9 fc76 	bl	800330e <HAL_HCD_GetCurrentFrame>
 8009a22:	4603      	mov	r3, r0
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7fe ff60 	bl	80088ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	20000708 	.word	0x20000708

08009a3c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7f9 fbe5 	bl	8003222 <HAL_HCD_Start>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 f95c 	bl	8009d1c <USBH_Get_USB_Status>
 8009a64:	4603      	mov	r3, r0
 8009a66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7f9 fbed 	bl	8003268 <HAL_HCD_Stop>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 f941 	bl	8009d1c <USBH_Get_USB_Status>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7f9 fc35 	bl	800332a <HAL_HCD_GetCurrentSpeed>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d00c      	beq.n	8009ae0 <USBH_LL_GetSpeed+0x38>
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d80d      	bhi.n	8009ae6 <USBH_LL_GetSpeed+0x3e>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d002      	beq.n	8009ad4 <USBH_LL_GetSpeed+0x2c>
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d003      	beq.n	8009ada <USBH_LL_GetSpeed+0x32>
 8009ad2:	e008      	b.n	8009ae6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad8:	e008      	b.n	8009aec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009ada:	2301      	movs	r3, #1
 8009adc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ade:	e005      	b.n	8009aec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae4:	e002      	b.n	8009aec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aea:	bf00      	nop
  }
  return  speed;
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7f9 fbc8 	bl	80032a2 <HAL_HCD_ResetPort>
 8009b12:	4603      	mov	r3, r0
 8009b14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 f8ff 	bl	8009d1c <USBH_Get_USB_Status>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b3e:	78fa      	ldrb	r2, [r7, #3]
 8009b40:	4611      	mov	r1, r2
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7f9 fbcf 	bl	80032e6 <HAL_HCD_HC_GetXferCount>
 8009b48:	4603      	mov	r3, r0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009b52:	b590      	push	{r4, r7, lr}
 8009b54:	b089      	sub	sp, #36	; 0x24
 8009b56:	af04      	add	r7, sp, #16
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	4608      	mov	r0, r1
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	461a      	mov	r2, r3
 8009b60:	4603      	mov	r3, r0
 8009b62:	70fb      	strb	r3, [r7, #3]
 8009b64:	460b      	mov	r3, r1
 8009b66:	70bb      	strb	r3, [r7, #2]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b7a:	787c      	ldrb	r4, [r7, #1]
 8009b7c:	78ba      	ldrb	r2, [r7, #2]
 8009b7e:	78f9      	ldrb	r1, [r7, #3]
 8009b80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b82:	9302      	str	r3, [sp, #8]
 8009b84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	4623      	mov	r3, r4
 8009b92:	f7f9 f832 	bl	8002bfa <HAL_HCD_HC_Init>
 8009b96:	4603      	mov	r3, r0
 8009b98:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 f8bd 	bl	8009d1c <USBH_Get_USB_Status>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd90      	pop	{r4, r7, pc}

08009bb0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009bca:	78fa      	ldrb	r2, [r7, #3]
 8009bcc:	4611      	mov	r1, r2
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f9 f8a2 	bl	8002d18 <HAL_HCD_HC_Halt>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 f89e 	bl	8009d1c <USBH_Get_USB_Status>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009bee:	b590      	push	{r4, r7, lr}
 8009bf0:	b089      	sub	sp, #36	; 0x24
 8009bf2:	af04      	add	r7, sp, #16
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	70fb      	strb	r3, [r7, #3]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70bb      	strb	r3, [r7, #2]
 8009c04:	4613      	mov	r3, r2
 8009c06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009c16:	787c      	ldrb	r4, [r7, #1]
 8009c18:	78ba      	ldrb	r2, [r7, #2]
 8009c1a:	78f9      	ldrb	r1, [r7, #3]
 8009c1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c20:	9303      	str	r3, [sp, #12]
 8009c22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c24:	9302      	str	r3, [sp, #8]
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	4623      	mov	r3, r4
 8009c32:	f7f9 f895 	bl	8002d60 <HAL_HCD_HC_SubmitRequest>
 8009c36:	4603      	mov	r3, r0
 8009c38:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 f86d 	bl	8009d1c <USBH_Get_USB_Status>
 8009c42:	4603      	mov	r3, r0
 8009c44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd90      	pop	{r4, r7, pc}

08009c50 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c62:	78fa      	ldrb	r2, [r7, #3]
 8009c64:	4611      	mov	r1, r2
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7f9 fb29 	bl	80032be <HAL_HCD_HC_GetURBState>
 8009c6c:	4603      	mov	r3, r0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d103      	bne.n	8009c94 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009c8c:	78fb      	ldrb	r3, [r7, #3]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f000 f870 	bl	8009d74 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009c94:	20c8      	movs	r0, #200	; 0xc8
 8009c96:	f7f7 fbbb 	bl	8001410 <HAL_Delay>
  return USBH_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	70fb      	strb	r3, [r7, #3]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009cba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009cbc:	78fb      	ldrb	r3, [r7, #3]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	212c      	movs	r1, #44	; 0x2c
 8009cc2:	fb01 f303 	mul.w	r3, r1, r3
 8009cc6:	4413      	add	r3, r2
 8009cc8:	333b      	adds	r3, #59	; 0x3b
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d009      	beq.n	8009ce4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	212c      	movs	r1, #44	; 0x2c
 8009cd6:	fb01 f303 	mul.w	r3, r1, r3
 8009cda:	4413      	add	r3, r2
 8009cdc:	3354      	adds	r3, #84	; 0x54
 8009cde:	78ba      	ldrb	r2, [r7, #2]
 8009ce0:	701a      	strb	r2, [r3, #0]
 8009ce2:	e008      	b.n	8009cf6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	212c      	movs	r1, #44	; 0x2c
 8009cea:	fb01 f303 	mul.w	r3, r1, r3
 8009cee:	4413      	add	r3, r2
 8009cf0:	3355      	adds	r3, #85	; 0x55
 8009cf2:	78ba      	ldrb	r2, [r7, #2]
 8009cf4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7f7 fb7f 	bl	8001410 <HAL_Delay>
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
	...

08009d1c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d817      	bhi.n	8009d60 <USBH_Get_USB_Status+0x44>
 8009d30:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <USBH_Get_USB_Status+0x1c>)
 8009d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d36:	bf00      	nop
 8009d38:	08009d49 	.word	0x08009d49
 8009d3c:	08009d4f 	.word	0x08009d4f
 8009d40:	08009d55 	.word	0x08009d55
 8009d44:	08009d5b 	.word	0x08009d5b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d4c:	e00b      	b.n	8009d66 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009d4e:	2302      	movs	r3, #2
 8009d50:	73fb      	strb	r3, [r7, #15]
    break;
 8009d52:	e008      	b.n	8009d66 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009d54:	2301      	movs	r3, #1
 8009d56:	73fb      	strb	r3, [r7, #15]
    break;
 8009d58:	e005      	b.n	8009d66 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d5e:	e002      	b.n	8009d66 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009d60:	2302      	movs	r3, #2
 8009d62:	73fb      	strb	r3, [r7, #15]
    break;
 8009d64:	bf00      	nop
  }
  return usb_status;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d102      	bne.n	8009d8e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73fb      	strb	r3, [r7, #15]
 8009d8c:	e001      	b.n	8009d92 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	461a      	mov	r2, r3
 8009d96:	2101      	movs	r1, #1
 8009d98:	4803      	ldr	r0, [pc, #12]	; (8009da8 <MX_DriverVbusFS+0x34>)
 8009d9a:	f7f8 feb3 	bl	8002b04 <HAL_GPIO_WritePin>
}
 8009d9e:	bf00      	nop
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	40020800 	.word	0x40020800

08009dac <__errno>:
 8009dac:	4b01      	ldr	r3, [pc, #4]	; (8009db4 <__errno+0x8>)
 8009dae:	6818      	ldr	r0, [r3, #0]
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	2000002c 	.word	0x2000002c

08009db8 <__libc_init_array>:
 8009db8:	b570      	push	{r4, r5, r6, lr}
 8009dba:	4d0d      	ldr	r5, [pc, #52]	; (8009df0 <__libc_init_array+0x38>)
 8009dbc:	4c0d      	ldr	r4, [pc, #52]	; (8009df4 <__libc_init_array+0x3c>)
 8009dbe:	1b64      	subs	r4, r4, r5
 8009dc0:	10a4      	asrs	r4, r4, #2
 8009dc2:	2600      	movs	r6, #0
 8009dc4:	42a6      	cmp	r6, r4
 8009dc6:	d109      	bne.n	8009ddc <__libc_init_array+0x24>
 8009dc8:	4d0b      	ldr	r5, [pc, #44]	; (8009df8 <__libc_init_array+0x40>)
 8009dca:	4c0c      	ldr	r4, [pc, #48]	; (8009dfc <__libc_init_array+0x44>)
 8009dcc:	f000 f92e 	bl	800a02c <_init>
 8009dd0:	1b64      	subs	r4, r4, r5
 8009dd2:	10a4      	asrs	r4, r4, #2
 8009dd4:	2600      	movs	r6, #0
 8009dd6:	42a6      	cmp	r6, r4
 8009dd8:	d105      	bne.n	8009de6 <__libc_init_array+0x2e>
 8009dda:	bd70      	pop	{r4, r5, r6, pc}
 8009ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009de0:	4798      	blx	r3
 8009de2:	3601      	adds	r6, #1
 8009de4:	e7ee      	b.n	8009dc4 <__libc_init_array+0xc>
 8009de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dea:	4798      	blx	r3
 8009dec:	3601      	adds	r6, #1
 8009dee:	e7f2      	b.n	8009dd6 <__libc_init_array+0x1e>
 8009df0:	0800a070 	.word	0x0800a070
 8009df4:	0800a070 	.word	0x0800a070
 8009df8:	0800a070 	.word	0x0800a070
 8009dfc:	0800a074 	.word	0x0800a074

08009e00 <malloc>:
 8009e00:	4b02      	ldr	r3, [pc, #8]	; (8009e0c <malloc+0xc>)
 8009e02:	4601      	mov	r1, r0
 8009e04:	6818      	ldr	r0, [r3, #0]
 8009e06:	f000 b87f 	b.w	8009f08 <_malloc_r>
 8009e0a:	bf00      	nop
 8009e0c:	2000002c 	.word	0x2000002c

08009e10 <free>:
 8009e10:	4b02      	ldr	r3, [pc, #8]	; (8009e1c <free+0xc>)
 8009e12:	4601      	mov	r1, r0
 8009e14:	6818      	ldr	r0, [r3, #0]
 8009e16:	f000 b80b 	b.w	8009e30 <_free_r>
 8009e1a:	bf00      	nop
 8009e1c:	2000002c 	.word	0x2000002c

08009e20 <memset>:
 8009e20:	4402      	add	r2, r0
 8009e22:	4603      	mov	r3, r0
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d100      	bne.n	8009e2a <memset+0xa>
 8009e28:	4770      	bx	lr
 8009e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e2e:	e7f9      	b.n	8009e24 <memset+0x4>

08009e30 <_free_r>:
 8009e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e32:	2900      	cmp	r1, #0
 8009e34:	d044      	beq.n	8009ec0 <_free_r+0x90>
 8009e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e3a:	9001      	str	r0, [sp, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e42:	bfb8      	it	lt
 8009e44:	18e4      	addlt	r4, r4, r3
 8009e46:	f000 f8e3 	bl	800a010 <__malloc_lock>
 8009e4a:	4a1e      	ldr	r2, [pc, #120]	; (8009ec4 <_free_r+0x94>)
 8009e4c:	9801      	ldr	r0, [sp, #4]
 8009e4e:	6813      	ldr	r3, [r2, #0]
 8009e50:	b933      	cbnz	r3, 8009e60 <_free_r+0x30>
 8009e52:	6063      	str	r3, [r4, #4]
 8009e54:	6014      	str	r4, [r2, #0]
 8009e56:	b003      	add	sp, #12
 8009e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e5c:	f000 b8de 	b.w	800a01c <__malloc_unlock>
 8009e60:	42a3      	cmp	r3, r4
 8009e62:	d908      	bls.n	8009e76 <_free_r+0x46>
 8009e64:	6825      	ldr	r5, [r4, #0]
 8009e66:	1961      	adds	r1, r4, r5
 8009e68:	428b      	cmp	r3, r1
 8009e6a:	bf01      	itttt	eq
 8009e6c:	6819      	ldreq	r1, [r3, #0]
 8009e6e:	685b      	ldreq	r3, [r3, #4]
 8009e70:	1949      	addeq	r1, r1, r5
 8009e72:	6021      	streq	r1, [r4, #0]
 8009e74:	e7ed      	b.n	8009e52 <_free_r+0x22>
 8009e76:	461a      	mov	r2, r3
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	b10b      	cbz	r3, 8009e80 <_free_r+0x50>
 8009e7c:	42a3      	cmp	r3, r4
 8009e7e:	d9fa      	bls.n	8009e76 <_free_r+0x46>
 8009e80:	6811      	ldr	r1, [r2, #0]
 8009e82:	1855      	adds	r5, r2, r1
 8009e84:	42a5      	cmp	r5, r4
 8009e86:	d10b      	bne.n	8009ea0 <_free_r+0x70>
 8009e88:	6824      	ldr	r4, [r4, #0]
 8009e8a:	4421      	add	r1, r4
 8009e8c:	1854      	adds	r4, r2, r1
 8009e8e:	42a3      	cmp	r3, r4
 8009e90:	6011      	str	r1, [r2, #0]
 8009e92:	d1e0      	bne.n	8009e56 <_free_r+0x26>
 8009e94:	681c      	ldr	r4, [r3, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	6053      	str	r3, [r2, #4]
 8009e9a:	4421      	add	r1, r4
 8009e9c:	6011      	str	r1, [r2, #0]
 8009e9e:	e7da      	b.n	8009e56 <_free_r+0x26>
 8009ea0:	d902      	bls.n	8009ea8 <_free_r+0x78>
 8009ea2:	230c      	movs	r3, #12
 8009ea4:	6003      	str	r3, [r0, #0]
 8009ea6:	e7d6      	b.n	8009e56 <_free_r+0x26>
 8009ea8:	6825      	ldr	r5, [r4, #0]
 8009eaa:	1961      	adds	r1, r4, r5
 8009eac:	428b      	cmp	r3, r1
 8009eae:	bf04      	itt	eq
 8009eb0:	6819      	ldreq	r1, [r3, #0]
 8009eb2:	685b      	ldreq	r3, [r3, #4]
 8009eb4:	6063      	str	r3, [r4, #4]
 8009eb6:	bf04      	itt	eq
 8009eb8:	1949      	addeq	r1, r1, r5
 8009eba:	6021      	streq	r1, [r4, #0]
 8009ebc:	6054      	str	r4, [r2, #4]
 8009ebe:	e7ca      	b.n	8009e56 <_free_r+0x26>
 8009ec0:	b003      	add	sp, #12
 8009ec2:	bd30      	pop	{r4, r5, pc}
 8009ec4:	20000a0c 	.word	0x20000a0c

08009ec8 <sbrk_aligned>:
 8009ec8:	b570      	push	{r4, r5, r6, lr}
 8009eca:	4e0e      	ldr	r6, [pc, #56]	; (8009f04 <sbrk_aligned+0x3c>)
 8009ecc:	460c      	mov	r4, r1
 8009ece:	6831      	ldr	r1, [r6, #0]
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	b911      	cbnz	r1, 8009eda <sbrk_aligned+0x12>
 8009ed4:	f000 f88c 	bl	8009ff0 <_sbrk_r>
 8009ed8:	6030      	str	r0, [r6, #0]
 8009eda:	4621      	mov	r1, r4
 8009edc:	4628      	mov	r0, r5
 8009ede:	f000 f887 	bl	8009ff0 <_sbrk_r>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	d00a      	beq.n	8009efc <sbrk_aligned+0x34>
 8009ee6:	1cc4      	adds	r4, r0, #3
 8009ee8:	f024 0403 	bic.w	r4, r4, #3
 8009eec:	42a0      	cmp	r0, r4
 8009eee:	d007      	beq.n	8009f00 <sbrk_aligned+0x38>
 8009ef0:	1a21      	subs	r1, r4, r0
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f000 f87c 	bl	8009ff0 <_sbrk_r>
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d101      	bne.n	8009f00 <sbrk_aligned+0x38>
 8009efc:	f04f 34ff 	mov.w	r4, #4294967295
 8009f00:	4620      	mov	r0, r4
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	20000a10 	.word	0x20000a10

08009f08 <_malloc_r>:
 8009f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f0c:	1ccd      	adds	r5, r1, #3
 8009f0e:	f025 0503 	bic.w	r5, r5, #3
 8009f12:	3508      	adds	r5, #8
 8009f14:	2d0c      	cmp	r5, #12
 8009f16:	bf38      	it	cc
 8009f18:	250c      	movcc	r5, #12
 8009f1a:	2d00      	cmp	r5, #0
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	db01      	blt.n	8009f24 <_malloc_r+0x1c>
 8009f20:	42a9      	cmp	r1, r5
 8009f22:	d905      	bls.n	8009f30 <_malloc_r+0x28>
 8009f24:	230c      	movs	r3, #12
 8009f26:	603b      	str	r3, [r7, #0]
 8009f28:	2600      	movs	r6, #0
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f30:	4e2e      	ldr	r6, [pc, #184]	; (8009fec <_malloc_r+0xe4>)
 8009f32:	f000 f86d 	bl	800a010 <__malloc_lock>
 8009f36:	6833      	ldr	r3, [r6, #0]
 8009f38:	461c      	mov	r4, r3
 8009f3a:	bb34      	cbnz	r4, 8009f8a <_malloc_r+0x82>
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	4638      	mov	r0, r7
 8009f40:	f7ff ffc2 	bl	8009ec8 <sbrk_aligned>
 8009f44:	1c43      	adds	r3, r0, #1
 8009f46:	4604      	mov	r4, r0
 8009f48:	d14d      	bne.n	8009fe6 <_malloc_r+0xde>
 8009f4a:	6834      	ldr	r4, [r6, #0]
 8009f4c:	4626      	mov	r6, r4
 8009f4e:	2e00      	cmp	r6, #0
 8009f50:	d140      	bne.n	8009fd4 <_malloc_r+0xcc>
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	4631      	mov	r1, r6
 8009f56:	4638      	mov	r0, r7
 8009f58:	eb04 0803 	add.w	r8, r4, r3
 8009f5c:	f000 f848 	bl	8009ff0 <_sbrk_r>
 8009f60:	4580      	cmp	r8, r0
 8009f62:	d13a      	bne.n	8009fda <_malloc_r+0xd2>
 8009f64:	6821      	ldr	r1, [r4, #0]
 8009f66:	3503      	adds	r5, #3
 8009f68:	1a6d      	subs	r5, r5, r1
 8009f6a:	f025 0503 	bic.w	r5, r5, #3
 8009f6e:	3508      	adds	r5, #8
 8009f70:	2d0c      	cmp	r5, #12
 8009f72:	bf38      	it	cc
 8009f74:	250c      	movcc	r5, #12
 8009f76:	4629      	mov	r1, r5
 8009f78:	4638      	mov	r0, r7
 8009f7a:	f7ff ffa5 	bl	8009ec8 <sbrk_aligned>
 8009f7e:	3001      	adds	r0, #1
 8009f80:	d02b      	beq.n	8009fda <_malloc_r+0xd2>
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	442b      	add	r3, r5
 8009f86:	6023      	str	r3, [r4, #0]
 8009f88:	e00e      	b.n	8009fa8 <_malloc_r+0xa0>
 8009f8a:	6822      	ldr	r2, [r4, #0]
 8009f8c:	1b52      	subs	r2, r2, r5
 8009f8e:	d41e      	bmi.n	8009fce <_malloc_r+0xc6>
 8009f90:	2a0b      	cmp	r2, #11
 8009f92:	d916      	bls.n	8009fc2 <_malloc_r+0xba>
 8009f94:	1961      	adds	r1, r4, r5
 8009f96:	42a3      	cmp	r3, r4
 8009f98:	6025      	str	r5, [r4, #0]
 8009f9a:	bf18      	it	ne
 8009f9c:	6059      	strne	r1, [r3, #4]
 8009f9e:	6863      	ldr	r3, [r4, #4]
 8009fa0:	bf08      	it	eq
 8009fa2:	6031      	streq	r1, [r6, #0]
 8009fa4:	5162      	str	r2, [r4, r5]
 8009fa6:	604b      	str	r3, [r1, #4]
 8009fa8:	4638      	mov	r0, r7
 8009faa:	f104 060b 	add.w	r6, r4, #11
 8009fae:	f000 f835 	bl	800a01c <__malloc_unlock>
 8009fb2:	f026 0607 	bic.w	r6, r6, #7
 8009fb6:	1d23      	adds	r3, r4, #4
 8009fb8:	1af2      	subs	r2, r6, r3
 8009fba:	d0b6      	beq.n	8009f2a <_malloc_r+0x22>
 8009fbc:	1b9b      	subs	r3, r3, r6
 8009fbe:	50a3      	str	r3, [r4, r2]
 8009fc0:	e7b3      	b.n	8009f2a <_malloc_r+0x22>
 8009fc2:	6862      	ldr	r2, [r4, #4]
 8009fc4:	42a3      	cmp	r3, r4
 8009fc6:	bf0c      	ite	eq
 8009fc8:	6032      	streq	r2, [r6, #0]
 8009fca:	605a      	strne	r2, [r3, #4]
 8009fcc:	e7ec      	b.n	8009fa8 <_malloc_r+0xa0>
 8009fce:	4623      	mov	r3, r4
 8009fd0:	6864      	ldr	r4, [r4, #4]
 8009fd2:	e7b2      	b.n	8009f3a <_malloc_r+0x32>
 8009fd4:	4634      	mov	r4, r6
 8009fd6:	6876      	ldr	r6, [r6, #4]
 8009fd8:	e7b9      	b.n	8009f4e <_malloc_r+0x46>
 8009fda:	230c      	movs	r3, #12
 8009fdc:	603b      	str	r3, [r7, #0]
 8009fde:	4638      	mov	r0, r7
 8009fe0:	f000 f81c 	bl	800a01c <__malloc_unlock>
 8009fe4:	e7a1      	b.n	8009f2a <_malloc_r+0x22>
 8009fe6:	6025      	str	r5, [r4, #0]
 8009fe8:	e7de      	b.n	8009fa8 <_malloc_r+0xa0>
 8009fea:	bf00      	nop
 8009fec:	20000a0c 	.word	0x20000a0c

08009ff0 <_sbrk_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d06      	ldr	r5, [pc, #24]	; (800a00c <_sbrk_r+0x1c>)
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	602b      	str	r3, [r5, #0]
 8009ffc:	f7f7 f924 	bl	8001248 <_sbrk>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_sbrk_r+0x1a>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_sbrk_r+0x1a>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	20000a14 	.word	0x20000a14

0800a010 <__malloc_lock>:
 800a010:	4801      	ldr	r0, [pc, #4]	; (800a018 <__malloc_lock+0x8>)
 800a012:	f000 b809 	b.w	800a028 <__retarget_lock_acquire_recursive>
 800a016:	bf00      	nop
 800a018:	20000a18 	.word	0x20000a18

0800a01c <__malloc_unlock>:
 800a01c:	4801      	ldr	r0, [pc, #4]	; (800a024 <__malloc_unlock+0x8>)
 800a01e:	f000 b804 	b.w	800a02a <__retarget_lock_release_recursive>
 800a022:	bf00      	nop
 800a024:	20000a18 	.word	0x20000a18

0800a028 <__retarget_lock_acquire_recursive>:
 800a028:	4770      	bx	lr

0800a02a <__retarget_lock_release_recursive>:
 800a02a:	4770      	bx	lr

0800a02c <_init>:
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	bf00      	nop
 800a030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a032:	bc08      	pop	{r3}
 800a034:	469e      	mov	lr, r3
 800a036:	4770      	bx	lr

0800a038 <_fini>:
 800a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03a:	bf00      	nop
 800a03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03e:	bc08      	pop	{r3}
 800a040:	469e      	mov	lr, r3
 800a042:	4770      	bx	lr
