
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bf4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009d8c  08009d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009db0  08009db0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009db0  08009db0  00019db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009db8  08009db8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009db8  08009db8  00019db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dbc  08009dbc  00019dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000090  08009e50  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  08009e50  00020a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c651  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004109  00000000  00000000  0003c711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00040820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001690  00000000  00000000  00042060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3b9  00000000  00000000  000436f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1a4  00000000  00000000  0005eaa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2ce7  00000000  00000000  0007dc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120934  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006940  00000000  00000000  00120984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009d74 	.word	0x08009d74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08009d74 	.word	0x08009d74

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 ff20 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f828 	bl	8000538 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e8:	f000 f88e 	bl	8000608 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 faae 	bl	8000a4c <MX_GPIO_Init>
  MX_DMA_Init();
 80004f0:	f000 fa8c 	bl	8000a0c <MX_DMA_Init>
  MX_I2C1_Init();
 80004f4:	f000 f8fa 	bl	80006ec <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f8:	f000 f926 	bl	8000748 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004fc:	f000 f952 	bl	80007a4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000500:	f000 f980 	bl	8000804 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000504:	f008 ffee 	bl	80094e4 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000508:	f000 f89e 	bl	8000648 <MX_ADC1_Init>
  MX_TIM2_Init();
 800050c:	f000 f9b0 	bl	8000870 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000510:	f000 fa06 	bl	8000920 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000514:	2104      	movs	r1, #4
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <main+0x50>)
 8000518:	f005 fa9c 	bl	8005a54 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1,&AD_RES,1);
 800051c:	2201      	movs	r2, #1
 800051e:	4904      	ldr	r1, [pc, #16]	; (8000530 <main+0x54>)
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <main+0x58>)
 8000522:	f000 ffd9 	bl	80014d8 <HAL_ADC_Start_DMA>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000526:	f009 f803 	bl	8009530 <MX_USB_HOST_Process>
	  HAL_ADC_Start_DMA(&hadc1,&AD_RES,1);
 800052a:	e7f7      	b.n	800051c <main+0x40>
 800052c:	200002d8 	.word	0x200002d8
 8000530:	20000320 	.word	0x20000320
 8000534:	200000ac 	.word	0x200000ac

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f009 fb0e 	bl	8009b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <SystemClock_Config+0xc8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a26      	ldr	r2, [pc, #152]	; (8000600 <SystemClock_Config+0xc8>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <SystemClock_Config+0xc8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <SystemClock_Config+0xcc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <SystemClock_Config+0xcc>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <SystemClock_Config+0xcc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005ac:	2348      	movs	r3, #72	; 0x48
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005b4:	2303      	movs	r3, #3
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 fb4d 	bl	8004c5c <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c8:	f000 fb2e 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2102      	movs	r1, #2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 fdaf 	bl	800514c <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f4:	f000 fb18 	bl	8000c28 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800061e:	2301      	movs	r3, #1
 8000620:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000622:	23c8      	movs	r3, #200	; 0xc8
 8000624:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000626:	2305      	movs	r3, #5
 8000628:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800062a:	2302      	movs	r3, #2
 800062c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4618      	mov	r0, r3
 8000632:	f004 ff97 	bl	8005564 <HAL_RCCEx_PeriphCLKConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800063c:	f000 faf4 	bl	8000c28 <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064e:	463b      	mov	r3, r7
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_ADC1_Init+0x98>)
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <MX_ADC1_Init+0x9c>)
 800065e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_ADC1_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_ADC1_Init+0x98>)
 8000674:	2201      	movs	r2, #1
 8000676:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_ADC1_Init+0x98>)
 8000688:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <MX_ADC1_Init+0xa0>)
 800068a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_ADC1_Init+0x98>)
 8000694:	2201      	movs	r2, #1
 8000696:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_ADC1_Init+0x98>)
 800069a:	2201      	movs	r2, #1
 800069c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_ADC1_Init+0x98>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <MX_ADC1_Init+0x98>)
 80006a8:	f000 fed2 	bl	8001450 <HAL_ADC_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 fab9 	bl	8000c28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006b6:	2308      	movs	r3, #8
 80006b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	4619      	mov	r1, r3
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <MX_ADC1_Init+0x98>)
 80006c8:	f001 f80a 	bl	80016e0 <HAL_ADC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006d2:	f000 faa9 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000ac 	.word	0x200000ac
 80006e4:	40012000 	.word	0x40012000
 80006e8:	0f000001 	.word	0x0f000001

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f003 fcb3 	bl	8004094 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 fa78 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000154 	.word	0x20000154
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2S2_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	; (800079c <MX_I2S2_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_I2S2_Init+0x50>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2S2_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_I2S2_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_I2S2_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_I2S2_Init+0x50>)
 800076e:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <MX_I2S2_Init+0x58>)
 8000770:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2S2_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_I2S2_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2S2_Init+0x50>)
 8000780:	2201      	movs	r2, #1
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2S2_Init+0x50>)
 8000786:	f003 fdc9 	bl	800431c <HAL_I2S_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 fa4a 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001a8 	.word	0x200001a8
 800079c:	40003800 	.word	0x40003800
 80007a0:	00017700 	.word	0x00017700

080007a4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007aa:	4a14      	ldr	r2, [pc, #80]	; (80007fc <MX_I2S3_Init+0x58>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007cc:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <MX_I2S3_Init+0x5c>)
 80007ce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007e4:	f003 fd9a 	bl	800431c <HAL_I2S_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ee:	f000 fa1b 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200001f0 	.word	0x200001f0
 80007fc:	40003c00 	.word	0x40003c00
 8000800:	00017700 	.word	0x00017700

08000804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_SPI1_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	; (800086c <MX_SPI1_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_SPI1_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_SPI1_Init+0x64>)
 8000856:	f004 ffd5 	bl	8005804 <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 f9e2 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000238 	.word	0x20000238
 800086c:	40013000 	.word	0x40013000

08000870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
 800088e:	615a      	str	r2, [r3, #20]
 8000890:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_TIM2_Init+0xac>)
 8000894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000898:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_TIM2_Init+0xac>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_TIM2_Init+0xac>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_TIM2_Init+0xac>)
 80008a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_TIM2_Init+0xac>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_TIM2_Init+0xac>)
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <MX_TIM2_Init+0xac>)
 80008bc:	f005 f87a 	bl	80059b4 <HAL_TIM_PWM_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80008c6:	f000 f9af 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	4619      	mov	r1, r3
 80008d8:	4810      	ldr	r0, [pc, #64]	; (800091c <MX_TIM2_Init+0xac>)
 80008da:	f005 fdc1 	bl	8006460 <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80008e4:	f000 f9a0 	bl	8000c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e8:	2360      	movs	r3, #96	; 0x60
 80008ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	4807      	ldr	r0, [pc, #28]	; (800091c <MX_TIM2_Init+0xac>)
 8000900:	f005 f958 	bl	8005bb4 <HAL_TIM_PWM_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800090a:	f000 f98d 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800090e:	4803      	ldr	r0, [pc, #12]	; (800091c <MX_TIM2_Init+0xac>)
 8000910:	f000 fbf6 	bl	8001100 <HAL_TIM_MspPostInit>

}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000290 	.word	0x20000290

08000920 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08e      	sub	sp, #56	; 0x38
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	f107 0320 	add.w	r3, r7, #32
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000950:	4b2c      	ldr	r3, [pc, #176]	; (8000a04 <MX_TIM4_Init+0xe4>)
 8000952:	4a2d      	ldr	r2, [pc, #180]	; (8000a08 <MX_TIM4_Init+0xe8>)
 8000954:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000956:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <MX_TIM4_Init+0xe4>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <MX_TIM4_Init+0xe4>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <MX_TIM4_Init+0xe4>)
 8000964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000968:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <MX_TIM4_Init+0xe4>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <MX_TIM4_Init+0xe4>)
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000976:	4823      	ldr	r0, [pc, #140]	; (8000a04 <MX_TIM4_Init+0xe4>)
 8000978:	f004 ffcd 	bl	8005916 <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000982:	f000 f951 	bl	8000c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800098c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000990:	4619      	mov	r1, r3
 8000992:	481c      	ldr	r0, [pc, #112]	; (8000a04 <MX_TIM4_Init+0xe4>)
 8000994:	f005 f9d0 	bl	8005d38 <HAL_TIM_ConfigClockSource>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800099e:	f000 f943 	bl	8000c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009a2:	4818      	ldr	r0, [pc, #96]	; (8000a04 <MX_TIM4_Init+0xe4>)
 80009a4:	f005 f806 	bl	80059b4 <HAL_TIM_PWM_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80009ae:	f000 f93b 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	4619      	mov	r1, r3
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <MX_TIM4_Init+0xe4>)
 80009c2:	f005 fd4d 	bl	8006460 <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80009cc:	f000 f92c 	bl	8000c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d0:	2360      	movs	r3, #96	; 0x60
 80009d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2204      	movs	r2, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <MX_TIM4_Init+0xe4>)
 80009e8:	f005 f8e4 	bl	8005bb4 <HAL_TIM_PWM_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80009f2:	f000 f919 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009f6:	4803      	ldr	r0, [pc, #12]	; (8000a04 <MX_TIM4_Init+0xe4>)
 80009f8:	f000 fb82 	bl	8001100 <HAL_TIM_MspPostInit>

}
 80009fc:	bf00      	nop
 80009fe:	3738      	adds	r7, #56	; 0x38
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200002d8 	.word	0x200002d8
 8000a08:	40000800 	.word	0x40000800

08000a0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_DMA_Init+0x3c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <MX_DMA_Init+0x3c>)
 8000a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_DMA_Init+0x3c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2038      	movs	r0, #56	; 0x38
 8000a34:	f001 f9df 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a38:	2038      	movs	r0, #56	; 0x38
 8000a3a:	f001 f9f8 	bl	8001e2e <HAL_NVIC_EnableIRQ>

}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b61      	ldr	r3, [pc, #388]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a60      	ldr	r2, [pc, #384]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000a6c:	f043 0310 	orr.w	r3, r3, #16
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b5e      	ldr	r3, [pc, #376]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	4b5a      	ldr	r3, [pc, #360]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a59      	ldr	r2, [pc, #356]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b57      	ldr	r3, [pc, #348]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b53      	ldr	r3, [pc, #332]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a52      	ldr	r2, [pc, #328]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b50      	ldr	r3, [pc, #320]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b4c      	ldr	r3, [pc, #304]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a4b      	ldr	r2, [pc, #300]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b49      	ldr	r3, [pc, #292]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b45      	ldr	r3, [pc, #276]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a44      	ldr	r2, [pc, #272]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b42      	ldr	r3, [pc, #264]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b3e      	ldr	r3, [pc, #248]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a3d      	ldr	r2, [pc, #244]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b3b      	ldr	r3, [pc, #236]	; (8000bec <MX_GPIO_Init+0x1a0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	4838      	ldr	r0, [pc, #224]	; (8000bf0 <MX_GPIO_Init+0x1a4>)
 8000b10:	f001 fe9c 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2101      	movs	r1, #1
 8000b18:	4836      	ldr	r0, [pc, #216]	; (8000bf4 <MX_GPIO_Init+0x1a8>)
 8000b1a:	f001 fe97 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f244 0110 	movw	r1, #16400	; 0x4010
 8000b24:	4834      	ldr	r0, [pc, #208]	; (8000bf8 <MX_GPIO_Init+0x1ac>)
 8000b26:	f001 fe91 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	482c      	ldr	r0, [pc, #176]	; (8000bf0 <MX_GPIO_Init+0x1a4>)
 8000b3e:	f001 fd01 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b42:	2308      	movs	r3, #8
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4825      	ldr	r0, [pc, #148]	; (8000bf0 <MX_GPIO_Init+0x1a4>)
 8000b5a:	f001 fcf3 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000b5e:	2332      	movs	r3, #50	; 0x32
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b62:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	481f      	ldr	r0, [pc, #124]	; (8000bf0 <MX_GPIO_Init+0x1a4>)
 8000b74:	f001 fce6 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4819      	ldr	r0, [pc, #100]	; (8000bf4 <MX_GPIO_Init+0x1a8>)
 8000b90:	f001 fcd8 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b98:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4814      	ldr	r0, [pc, #80]	; (8000bfc <MX_GPIO_Init+0x1b0>)
 8000baa:	f001 fccb 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD5_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD5_Pin|Audio_RST_Pin;
 8000bae:	f244 0310 	movw	r3, #16400	; 0x4010
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_GPIO_Init+0x1ac>)
 8000bc8:	f001 fcbc 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_GPIO_Init+0x1ac>)
 8000be0:	f001 fcb0 	bl	8002544 <HAL_GPIO_Init>

}
 8000be4:	bf00      	nop
 8000be6:	3730      	adds	r7, #48	; 0x30
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40020800 	.word	0x40020800
 8000bf8:	40020c00 	.word	0x40020c00
 8000bfc:	40020000 	.word	0x40020000

08000c00 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well
    // So The AD_RES Is Now Updated & Let's Move IT To The PWM CCR1
    // Update The PWM Duty Cycle With Latest ADC Conversion Result
    TIM4->CCR2 = (AD_RES<<4);
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_ADC_ConvCpltCallback+0x20>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	011a      	lsls	r2, r3, #4
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_ADC_ConvCpltCallback+0x24>)
 8000c10:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000320 	.word	0x20000320
 8000c24:	40000800 	.word	0x40000800

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c72:	2007      	movs	r0, #7
 8000c74:	f001 f8b4 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a2f      	ldr	r2, [pc, #188]	; (8000d60 <HAL_ADC_MspInit+0xdc>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d157      	bne.n	8000d56 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <HAL_ADC_MspInit+0xe0>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a2d      	ldr	r2, [pc, #180]	; (8000d64 <HAL_ADC_MspInit+0xe0>)
 8000cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <HAL_ADC_MspInit+0xe0>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <HAL_ADC_MspInit+0xe0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a26      	ldr	r2, [pc, #152]	; (8000d64 <HAL_ADC_MspInit+0xe0>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <HAL_ADC_MspInit+0xe0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481d      	ldr	r0, [pc, #116]	; (8000d68 <HAL_ADC_MspInit+0xe4>)
 8000cf2:	f001 fc27 	bl	8002544 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000cfa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000d20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d3a:	480c      	ldr	r0, [pc, #48]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000d3c:	f001 f892 	bl	8001e64 <HAL_DMA_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000d46:	f7ff ff6f 	bl	8000c28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40012000 	.word	0x40012000
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	200000f4 	.word	0x200000f4
 8000d70:	40026410 	.word	0x40026410

08000d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <HAL_I2C_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12c      	bne.n	8000df0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_I2C_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_I2C_MspInit+0x88>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_I2C_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000db2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db8:	2312      	movs	r3, #18
 8000dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480c      	ldr	r0, [pc, #48]	; (8000e00 <HAL_I2C_MspInit+0x8c>)
 8000dd0:	f001 fbb8 	bl	8002544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_I2C_MspInit+0x88>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_I2C_MspInit+0x88>)
 8000dde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_I2C_MspInit+0x88>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020400 	.word	0x40020400

08000e04 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	; 0x38
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a59      	ldr	r2, [pc, #356]	; (8000f88 <HAL_I2S_MspInit+0x184>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d15b      	bne.n	8000ede <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
 8000e2a:	4b58      	ldr	r3, [pc, #352]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a57      	ldr	r2, [pc, #348]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b55      	ldr	r3, [pc, #340]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	623b      	str	r3, [r7, #32]
 8000e40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	4b51      	ldr	r3, [pc, #324]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a50      	ldr	r2, [pc, #320]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b4e      	ldr	r3, [pc, #312]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	4b4a      	ldr	r3, [pc, #296]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a49      	ldr	r2, [pc, #292]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	483e      	ldr	r0, [pc, #248]	; (8000f90 <HAL_I2S_MspInit+0x18c>)
 8000e96:	f001 fb55 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e9a:	2308      	movs	r3, #8
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eaa:	2305      	movs	r3, #5
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4836      	ldr	r0, [pc, #216]	; (8000f90 <HAL_I2S_MspInit+0x18c>)
 8000eb6:	f001 fb45 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000eba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	482f      	ldr	r0, [pc, #188]	; (8000f94 <HAL_I2S_MspInit+0x190>)
 8000ed8:	f001 fb34 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000edc:	e04f      	b.n	8000f7e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a2d      	ldr	r2, [pc, #180]	; (8000f98 <HAL_I2S_MspInit+0x194>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d14a      	bne.n	8000f7e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a26      	ldr	r2, [pc, #152]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	4619      	mov	r1, r3
 8000f56:	4811      	ldr	r0, [pc, #68]	; (8000f9c <HAL_I2S_MspInit+0x198>)
 8000f58:	f001 faf4 	bl	8002544 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f5c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f6e:	2306      	movs	r3, #6
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <HAL_I2S_MspInit+0x18c>)
 8000f7a:	f001 fae3 	bl	8002544 <HAL_GPIO_Init>
}
 8000f7e:	bf00      	nop
 8000f80:	3738      	adds	r7, #56	; 0x38
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40003800 	.word	0x40003800
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40003c00 	.word	0x40003c00
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	; (8001024 <HAL_SPI_MspInit+0x84>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d12b      	bne.n	800101a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ffa:	23e0      	movs	r3, #224	; 0xe0
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800100a:	2305      	movs	r3, #5
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <HAL_SPI_MspInit+0x8c>)
 8001016:	f001 fa95 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	; 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40013000 	.word	0x40013000
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000

08001030 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001040:	d10d      	bne.n	800105e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_TIM_PWM_MspInit+0x3c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_TIM_PWM_MspInit+0x3c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_TIM_PWM_MspInit+0x3c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <HAL_TIM_Base_MspInit+0x84>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d12c      	bne.n	80010ec <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_TIM_Base_MspInit+0x88>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_TIM_Base_MspInit+0x88>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_TIM_Base_MspInit+0x88>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_TIM_Base_MspInit+0x88>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_TIM_Base_MspInit+0x88>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_TIM_Base_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010dc:	2302      	movs	r3, #2
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_TIM_Base_MspInit+0x8c>)
 80010e8:	f001 fa2c 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40000800 	.word	0x40000800
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020c00 	.word	0x40020c00

08001100 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001120:	d11f      	bne.n	8001162 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <HAL_TIM_MspPostInit+0xb4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <HAL_TIM_MspPostInit+0xb4>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <HAL_TIM_MspPostInit+0xb4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800113e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001150:	2301      	movs	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4817      	ldr	r0, [pc, #92]	; (80011b8 <HAL_TIM_MspPostInit+0xb8>)
 800115c:	f001 f9f2 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001160:	e023      	b.n	80011aa <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <HAL_TIM_MspPostInit+0xbc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d11e      	bne.n	80011aa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_TIM_MspPostInit+0xb4>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <HAL_TIM_MspPostInit+0xb4>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_TIM_MspPostInit+0xb4>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800119a:	2302      	movs	r3, #2
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4806      	ldr	r0, [pc, #24]	; (80011c0 <HAL_TIM_MspPostInit+0xc0>)
 80011a6:	f001 f9cd 	bl	8002544 <HAL_GPIO_Init>
}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40000800 	.word	0x40000800
 80011c0:	40020c00 	.word	0x40020c00

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001210:	f000 f8da 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <DMA2_Stream0_IRQHandler+0x10>)
 800121e:	f000 ff27 	bl	8002070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000f4 	.word	0x200000f4

0800122c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <OTG_FS_IRQHandler+0x10>)
 8001232:	f001 fd8f 	bl	8002d54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000708 	.word	0x20000708

08001240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001270:	f008 fc40 	bl	8009af4 <__errno>
 8001274:	4603      	mov	r3, r0
 8001276:	220c      	movs	r2, #12
 8001278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <_sbrk+0x64>)
 8001290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20020000 	.word	0x20020000
 80012a0:	00000400 	.word	0x00000400
 80012a4:	20000324 	.word	0x20000324
 80012a8:	20000a20 	.word	0x20000a20

080012ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <SystemInit+0x20>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <SystemInit+0x20>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001308 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012d6:	490e      	ldr	r1, [pc, #56]	; (8001310 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d8:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012ec:	4c0b      	ldr	r4, [pc, #44]	; (800131c <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012fa:	f7ff ffd7 	bl	80012ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fe:	f008 fbff 	bl	8009b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001302:	f7ff f8eb 	bl	80004dc <main>
  bx  lr    
 8001306:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001314:	08009dc0 	.word	0x08009dc0
  ldr r2, =_sbss
 8001318:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800131c:	20000a1c 	.word	0x20000a1c

08001320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <HAL_Init+0x40>)
 800132e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_Init+0x40>)
 800133a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_Init+0x40>)
 8001346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 fd47 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff fc6c 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023c00 	.word	0x40023c00

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fd5f 	bl	8001e4a <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f000 fd27 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000008 	.word	0x20000008
 80013c4:	20000004 	.word	0x20000004

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000328 	.word	0x20000328

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000328 	.word	0x20000328

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008

08001450 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e033      	b.n	80014ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fc08 	bl	8000c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	d118      	bne.n	80014c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001496:	f023 0302 	bic.w	r3, r3, #2
 800149a:	f043 0202 	orr.w	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fa4e 	bl	8001944 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
 80014be:	e001      	b.n	80014c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Start_DMA+0x1e>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e0ce      	b.n	8001694 <HAL_ADC_Start_DMA+0x1bc>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b01      	cmp	r3, #1
 800150a:	d018      	beq.n	800153e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800151c:	4b5f      	ldr	r3, [pc, #380]	; (800169c <HAL_ADC_Start_DMA+0x1c4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a5f      	ldr	r2, [pc, #380]	; (80016a0 <HAL_ADC_Start_DMA+0x1c8>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0c9a      	lsrs	r2, r3, #18
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001530:	e002      	b.n	8001538 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	3b01      	subs	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f9      	bne.n	8001532 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800154c:	d107      	bne.n	800155e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800155c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b01      	cmp	r3, #1
 800156a:	f040 8086 	bne.w	800167a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001576:	f023 0301 	bic.w	r3, r3, #1
 800157a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001598:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ac:	d106      	bne.n	80015bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f023 0206 	bic.w	r2, r3, #6
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
 80015ba:	e002      	b.n	80015c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ca:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_ADC_Start_DMA+0x1cc>)
 80015cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d2:	4a35      	ldr	r2, [pc, #212]	; (80016a8 <HAL_ADC_Start_DMA+0x1d0>)
 80015d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015da:	4a34      	ldr	r2, [pc, #208]	; (80016ac <HAL_ADC_Start_DMA+0x1d4>)
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	4a33      	ldr	r2, [pc, #204]	; (80016b0 <HAL_ADC_Start_DMA+0x1d8>)
 80015e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800160e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	334c      	adds	r3, #76	; 0x4c
 800161a:	4619      	mov	r1, r3
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f000 fcce 	bl	8001fc0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10f      	bne.n	8001650 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d129      	bne.n	8001692 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	e020      	b.n	8001692 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a17      	ldr	r2, [pc, #92]	; (80016b4 <HAL_ADC_Start_DMA+0x1dc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d11b      	bne.n	8001692 <HAL_ADC_Start_DMA+0x1ba>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d114      	bne.n	8001692 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	e00b      	b.n	8001692 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f043 0210 	orr.w	r2, r3, #16
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	431bde83 	.word	0x431bde83
 80016a4:	40012300 	.word	0x40012300
 80016a8:	08001b3d 	.word	0x08001b3d
 80016ac:	08001bf7 	.word	0x08001bf7
 80016b0:	08001c13 	.word	0x08001c13
 80016b4:	40012000 	.word	0x40012000

080016b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x1c>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e113      	b.n	8001924 <HAL_ADC_ConfigChannel+0x244>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b09      	cmp	r3, #9
 800170a:	d925      	bls.n	8001758 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68d9      	ldr	r1, [r3, #12]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	3b1e      	subs	r3, #30
 8001722:	2207      	movs	r2, #7
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43da      	mvns	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	400a      	ands	r2, r1
 8001730:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68d9      	ldr	r1, [r3, #12]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	b29b      	uxth	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	4603      	mov	r3, r0
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4403      	add	r3, r0
 800174a:	3b1e      	subs	r3, #30
 800174c:	409a      	lsls	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	e022      	b.n	800179e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6919      	ldr	r1, [r3, #16]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	b29b      	uxth	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	2207      	movs	r2, #7
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	400a      	ands	r2, r1
 800177a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6919      	ldr	r1, [r3, #16]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	4603      	mov	r3, r0
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4403      	add	r3, r0
 8001794:	409a      	lsls	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d824      	bhi.n	80017f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	3b05      	subs	r3, #5
 80017b8:	221f      	movs	r2, #31
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	400a      	ands	r2, r1
 80017c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	3b05      	subs	r3, #5
 80017e2:	fa00 f203 	lsl.w	r2, r0, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
 80017ee:	e04c      	b.n	800188a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d824      	bhi.n	8001842 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	3b23      	subs	r3, #35	; 0x23
 800180a:	221f      	movs	r2, #31
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43da      	mvns	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	400a      	ands	r2, r1
 8001818:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b29b      	uxth	r3, r3
 8001826:	4618      	mov	r0, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b23      	subs	r3, #35	; 0x23
 8001834:	fa00 f203 	lsl.w	r2, r0, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	631a      	str	r2, [r3, #48]	; 0x30
 8001840:	e023      	b.n	800188a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	3b41      	subs	r3, #65	; 0x41
 8001854:	221f      	movs	r2, #31
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	400a      	ands	r2, r1
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	3b41      	subs	r3, #65	; 0x41
 800187e:	fa00 f203 	lsl.w	r2, r0, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800188a:	4b29      	ldr	r3, [pc, #164]	; (8001930 <HAL_ADC_ConfigChannel+0x250>)
 800188c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a28      	ldr	r2, [pc, #160]	; (8001934 <HAL_ADC_ConfigChannel+0x254>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d10f      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1d8>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b12      	cmp	r3, #18
 800189e:	d10b      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_ADC_ConfigChannel+0x254>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d12b      	bne.n	800191a <HAL_ADC_ConfigChannel+0x23a>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <HAL_ADC_ConfigChannel+0x258>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d003      	beq.n	80018d4 <HAL_ADC_ConfigChannel+0x1f4>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b11      	cmp	r3, #17
 80018d2:	d122      	bne.n	800191a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a11      	ldr	r2, [pc, #68]	; (8001938 <HAL_ADC_ConfigChannel+0x258>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d111      	bne.n	800191a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_ADC_ConfigChannel+0x25c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a11      	ldr	r2, [pc, #68]	; (8001940 <HAL_ADC_ConfigChannel+0x260>)
 80018fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001900:	0c9a      	lsrs	r2, r3, #18
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800190c:	e002      	b.n	8001914 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	3b01      	subs	r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f9      	bne.n	800190e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40012300 	.word	0x40012300
 8001934:	40012000 	.word	0x40012000
 8001938:	10000012 	.word	0x10000012
 800193c:	20000000 	.word	0x20000000
 8001940:	431bde83 	.word	0x431bde83

08001944 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800194c:	4b79      	ldr	r3, [pc, #484]	; (8001b34 <ADC_Init+0x1f0>)
 800194e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	431a      	orrs	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	021a      	lsls	r2, r3, #8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800199c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6899      	ldr	r1, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <ADC_Init+0x1f4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d022      	beq.n	8001a22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6899      	ldr	r1, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6899      	ldr	r1, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	e00f      	b.n	8001a42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0202 	bic.w	r2, r2, #2
 8001a50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6899      	ldr	r1, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7e1b      	ldrb	r3, [r3, #24]
 8001a5c:	005a      	lsls	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01b      	beq.n	8001aa8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6859      	ldr	r1, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	035a      	lsls	r2, r3, #13
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	e007      	b.n	8001ab8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ab6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	051a      	lsls	r2, r3, #20
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001aec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6899      	ldr	r1, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001afa:	025a      	lsls	r2, r3, #9
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6899      	ldr	r1, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	029a      	lsls	r2, r3, #10
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	609a      	str	r2, [r3, #8]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	40012300 	.word	0x40012300
 8001b38:	0f000001 	.word	0x0f000001

08001b3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b48:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d13c      	bne.n	8001bd0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d12b      	bne.n	8001bc8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d127      	bne.n	8001bc8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d119      	bne.n	8001bc8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0220 	bic.w	r2, r2, #32
 8001ba2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f043 0201 	orr.w	r2, r3, #1
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f7ff f819 	bl	8000c00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bce:	e00e      	b.n	8001bee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f7ff fd75 	bl	80016cc <HAL_ADC_ErrorCallback>
}
 8001be2:	e004      	b.n	8001bee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	4798      	blx	r3
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c02:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f7ff fd57 	bl	80016b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2240      	movs	r2, #64	; 0x40
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f043 0204 	orr.w	r2, r3, #4
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7ff fd4a 	bl	80016cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	; (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff fabe 	bl	80013f0 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e099      	b.n	8001fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea0:	e00f      	b.n	8001ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea2:	f7ff faa5 	bl	80013f0 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d908      	bls.n	8001ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e078      	b.n	8001fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e8      	bne.n	8001ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_DMA_Init+0x158>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4313      	orrs	r3, r2
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f023 0307 	bic.w	r3, r3, #7
 8001f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d117      	bne.n	8001f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fa6f 	bl	800244c <DMA_CheckFifoParam>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2240      	movs	r2, #64	; 0x40
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f82:	2301      	movs	r3, #1
 8001f84:	e016      	b.n	8001fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa26 	bl	80023e0 <DMA_CalcBaseAndBitshift>
 8001f94:	4603      	mov	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	223f      	movs	r2, #63	; 0x3f
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f010803f 	.word	0xf010803f

08001fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DMA_Start_IT+0x26>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e040      	b.n	8002068 <HAL_DMA_Start_IT+0xa8>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d12f      	bne.n	800205a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f9b8 	bl	8002384 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	223f      	movs	r2, #63	; 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0216 	orr.w	r2, r2, #22
 800202e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0208 	orr.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e005      	b.n	8002066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800207c:	4b8e      	ldr	r3, [pc, #568]	; (80022b8 <HAL_DMA_IRQHandler+0x248>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a8e      	ldr	r2, [pc, #568]	; (80022bc <HAL_DMA_IRQHandler+0x24c>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0a9b      	lsrs	r3, r3, #10
 8002088:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	2208      	movs	r2, #8
 800209c:	409a      	lsls	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01a      	beq.n	80020dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0204 	bic.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2208      	movs	r2, #8
 80020ca:	409a      	lsls	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	2201      	movs	r2, #1
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d012      	beq.n	8002112 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	2201      	movs	r2, #1
 8002100:	409a      	lsls	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f043 0202 	orr.w	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2204      	movs	r2, #4
 8002118:	409a      	lsls	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2204      	movs	r2, #4
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f043 0204 	orr.w	r2, r3, #4
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2210      	movs	r2, #16
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d043      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d03c      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2210      	movs	r2, #16
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d018      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d108      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d024      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	e01f      	b.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
 80021b0:	e016      	b.n	80021e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0208 	bic.w	r2, r2, #8
 80021ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	2220      	movs	r2, #32
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 808f 	beq.w	8002310 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8087 	beq.w	8002310 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002206:	2220      	movs	r2, #32
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b05      	cmp	r3, #5
 8002218:	d136      	bne.n	8002288 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0216 	bic.w	r2, r2, #22
 8002228:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002238:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <HAL_DMA_IRQHandler+0x1da>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0208 	bic.w	r2, r2, #8
 8002258:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	223f      	movs	r2, #63	; 0x3f
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227a:	2b00      	cmp	r3, #0
 800227c:	d07e      	beq.n	800237c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
        }
        return;
 8002286:	e079      	b.n	800237c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01d      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10d      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d031      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
 80022b4:	e02c      	b.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
 80022b6:	bf00      	nop
 80022b8:	20000000 	.word	0x20000000
 80022bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d023      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
 80022d0:	e01e      	b.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10f      	bne.n	8002300 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0210 	bic.w	r2, r2, #16
 80022ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	2b00      	cmp	r3, #0
 8002316:	d032      	beq.n	800237e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d022      	beq.n	800236a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2205      	movs	r2, #5
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	3301      	adds	r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	d307      	bcc.n	8002358 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f2      	bne.n	800233c <HAL_DMA_IRQHandler+0x2cc>
 8002356:	e000      	b.n	800235a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002358:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
 800237a:	e000      	b.n	800237e <HAL_DMA_IRQHandler+0x30e>
        return;
 800237c:	bf00      	nop
    }
  }
}
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d108      	bne.n	80023c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023c2:	e007      	b.n	80023d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3b10      	subs	r3, #16
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <DMA_CalcBaseAndBitshift+0x64>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023fa:	4a13      	ldr	r2, [pc, #76]	; (8002448 <DMA_CalcBaseAndBitshift+0x68>)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d909      	bls.n	8002422 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	1d1a      	adds	r2, r3, #4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	659a      	str	r2, [r3, #88]	; 0x58
 8002420:	e007      	b.n	8002432 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	aaaaaaab 	.word	0xaaaaaaab
 8002448:	08009da8 	.word	0x08009da8

0800244c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11f      	bne.n	80024a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d856      	bhi.n	800251a <DMA_CheckFifoParam+0xce>
 800246c:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <DMA_CheckFifoParam+0x28>)
 800246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002472:	bf00      	nop
 8002474:	08002485 	.word	0x08002485
 8002478:	08002497 	.word	0x08002497
 800247c:	08002485 	.word	0x08002485
 8002480:	0800251b 	.word	0x0800251b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d046      	beq.n	800251e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002494:	e043      	b.n	800251e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800249e:	d140      	bne.n	8002522 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a4:	e03d      	b.n	8002522 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ae:	d121      	bne.n	80024f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d837      	bhi.n	8002526 <DMA_CheckFifoParam+0xda>
 80024b6:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <DMA_CheckFifoParam+0x70>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024cd 	.word	0x080024cd
 80024c0:	080024d3 	.word	0x080024d3
 80024c4:	080024cd 	.word	0x080024cd
 80024c8:	080024e5 	.word	0x080024e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      break;
 80024d0:	e030      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d025      	beq.n	800252a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e2:	e022      	b.n	800252a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ec:	d11f      	bne.n	800252e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024f2:	e01c      	b.n	800252e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d903      	bls.n	8002502 <DMA_CheckFifoParam+0xb6>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d003      	beq.n	8002508 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002500:	e018      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
      break;
 8002506:	e015      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00e      	beq.n	8002532 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
      break;
 8002518:	e00b      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
      break;
 800251a:	bf00      	nop
 800251c:	e00a      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 800251e:	bf00      	nop
 8002520:	e008      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 8002522:	bf00      	nop
 8002524:	e006      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 8002526:	bf00      	nop
 8002528:	e004      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 800252a:	bf00      	nop
 800252c:	e002      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;   
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
    }
  } 
  
  return status; 
 8002534:	7bfb      	ldrb	r3, [r7, #15]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	; 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	e159      	b.n	8002814 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002560:	2201      	movs	r2, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	f040 8148 	bne.w	800280e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d005      	beq.n	8002596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002592:	2b02      	cmp	r3, #2
 8002594:	d130      	bne.n	80025f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 0201 	and.w	r2, r3, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b03      	cmp	r3, #3
 8002602:	d017      	beq.n	8002634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d123      	bne.n	8002688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	08da      	lsrs	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3208      	adds	r2, #8
 8002648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	220f      	movs	r2, #15
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	08da      	lsrs	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3208      	adds	r2, #8
 8002682:	69b9      	ldr	r1, [r7, #24]
 8002684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0203 	and.w	r2, r3, #3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80a2 	beq.w	800280e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4b57      	ldr	r3, [pc, #348]	; (800282c <HAL_GPIO_Init+0x2e8>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	4a56      	ldr	r2, [pc, #344]	; (800282c <HAL_GPIO_Init+0x2e8>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	; 0x44
 80026da:	4b54      	ldr	r3, [pc, #336]	; (800282c <HAL_GPIO_Init+0x2e8>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e6:	4a52      	ldr	r2, [pc, #328]	; (8002830 <HAL_GPIO_Init+0x2ec>)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a49      	ldr	r2, [pc, #292]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d019      	beq.n	8002746 <HAL_GPIO_Init+0x202>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a48      	ldr	r2, [pc, #288]	; (8002838 <HAL_GPIO_Init+0x2f4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_GPIO_Init+0x1fe>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a47      	ldr	r2, [pc, #284]	; (800283c <HAL_GPIO_Init+0x2f8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00d      	beq.n	800273e <HAL_GPIO_Init+0x1fa>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a46      	ldr	r2, [pc, #280]	; (8002840 <HAL_GPIO_Init+0x2fc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <HAL_GPIO_Init+0x1f6>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a45      	ldr	r2, [pc, #276]	; (8002844 <HAL_GPIO_Init+0x300>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_GPIO_Init+0x1f2>
 8002732:	2304      	movs	r3, #4
 8002734:	e008      	b.n	8002748 <HAL_GPIO_Init+0x204>
 8002736:	2307      	movs	r3, #7
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x204>
 800273a:	2303      	movs	r3, #3
 800273c:	e004      	b.n	8002748 <HAL_GPIO_Init+0x204>
 800273e:	2302      	movs	r3, #2
 8002740:	e002      	b.n	8002748 <HAL_GPIO_Init+0x204>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x204>
 8002746:	2300      	movs	r3, #0
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f002 0203 	and.w	r2, r2, #3
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	4093      	lsls	r3, r2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002758:	4935      	ldr	r1, [pc, #212]	; (8002830 <HAL_GPIO_Init+0x2ec>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002766:	4b38      	ldr	r3, [pc, #224]	; (8002848 <HAL_GPIO_Init+0x304>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278a:	4a2f      	ldr	r2, [pc, #188]	; (8002848 <HAL_GPIO_Init+0x304>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002790:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_GPIO_Init+0x304>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b4:	4a24      	ldr	r2, [pc, #144]	; (8002848 <HAL_GPIO_Init+0x304>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ba:	4b23      	ldr	r3, [pc, #140]	; (8002848 <HAL_GPIO_Init+0x304>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027de:	4a1a      	ldr	r2, [pc, #104]	; (8002848 <HAL_GPIO_Init+0x304>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e4:	4b18      	ldr	r3, [pc, #96]	; (8002848 <HAL_GPIO_Init+0x304>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002808:	4a0f      	ldr	r2, [pc, #60]	; (8002848 <HAL_GPIO_Init+0x304>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	f67f aea2 	bls.w	8002560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40013800 	.word	0x40013800
 8002834:	40020000 	.word	0x40020000
 8002838:	40020400 	.word	0x40020400
 800283c:	40020800 	.word	0x40020800
 8002840:	40020c00 	.word	0x40020c00
 8002844:	40021000 	.word	0x40021000
 8002848:	40013c00 	.word	0x40013c00

0800284c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
 8002858:	4613      	mov	r3, r2
 800285a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800285c:	787b      	ldrb	r3, [r7, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002868:	e003      	b.n	8002872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800286a:	887b      	ldrh	r3, [r7, #2]
 800286c:	041a      	lsls	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800287e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002880:	b08f      	sub	sp, #60	; 0x3c
 8002882:	af0a      	add	r7, sp, #40	; 0x28
 8002884:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e054      	b.n	800293a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f006 fe78 	bl	80095a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2203      	movs	r2, #3
 80028b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 fea6 	bl	8006620 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	687e      	ldr	r6, [r7, #4]
 80028dc:	466d      	mov	r5, sp
 80028de:	f106 0410 	add.w	r4, r6, #16
 80028e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80028f2:	1d33      	adds	r3, r6, #4
 80028f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f6:	6838      	ldr	r0, [r7, #0]
 80028f8:	f003 fe20 	bl	800653c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f003 fe9d 	bl	8006642 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	687e      	ldr	r6, [r7, #4]
 8002910:	466d      	mov	r5, sp
 8002912:	f106 0410 	add.w	r4, r6, #16
 8002916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002922:	e885 0003 	stmia.w	r5, {r0, r1}
 8002926:	1d33      	adds	r3, r6, #4
 8002928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292a:	6838      	ldr	r0, [r7, #0]
 800292c:	f004 f826 	bl	800697c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002942 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002942:	b590      	push	{r4, r7, lr}
 8002944:	b089      	sub	sp, #36	; 0x24
 8002946:	af04      	add	r7, sp, #16
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	4608      	mov	r0, r1
 800294c:	4611      	mov	r1, r2
 800294e:	461a      	mov	r2, r3
 8002950:	4603      	mov	r3, r0
 8002952:	70fb      	strb	r3, [r7, #3]
 8002954:	460b      	mov	r3, r1
 8002956:	70bb      	strb	r3, [r7, #2]
 8002958:	4613      	mov	r3, r2
 800295a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_HCD_HC_Init+0x28>
 8002966:	2302      	movs	r3, #2
 8002968:	e076      	b.n	8002a58 <HAL_HCD_HC_Init+0x116>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	333d      	adds	r3, #61	; 0x3d
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3338      	adds	r3, #56	; 0x38
 8002992:	787a      	ldrb	r2, [r7, #1]
 8002994:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	3340      	adds	r3, #64	; 0x40
 80029a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029a6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3339      	adds	r3, #57	; 0x39
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	333f      	adds	r3, #63	; 0x3f
 80029c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80029cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	78ba      	ldrb	r2, [r7, #2]
 80029d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029d6:	b2d0      	uxtb	r0, r2
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	333a      	adds	r3, #58	; 0x3a
 80029e4:	4602      	mov	r2, r0
 80029e6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80029e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	da09      	bge.n	8002a04 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	333b      	adds	r3, #59	; 0x3b
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e008      	b.n	8002a16 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	333b      	adds	r3, #59	; 0x3b
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	333c      	adds	r3, #60	; 0x3c
 8002a24:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a28:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	787c      	ldrb	r4, [r7, #1]
 8002a30:	78ba      	ldrb	r2, [r7, #2]
 8002a32:	78f9      	ldrb	r1, [r7, #3]
 8002a34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a36:	9302      	str	r3, [sp, #8]
 8002a38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	4623      	mov	r3, r4
 8002a46:	f004 f91f 	bl	8006c88 <USB_HC_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}

08002a60 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_HCD_HC_Halt+0x1e>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e00f      	b.n	8002a9e <HAL_HCD_HC_Halt+0x3e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 fb6f 	bl	8007172 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	4608      	mov	r0, r1
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	70fb      	strb	r3, [r7, #3]
 8002aba:	460b      	mov	r3, r1
 8002abc:	70bb      	strb	r3, [r7, #2]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	333b      	adds	r3, #59	; 0x3b
 8002ad0:	78ba      	ldrb	r2, [r7, #2]
 8002ad2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	333f      	adds	r3, #63	; 0x3f
 8002ae2:	787a      	ldrb	r2, [r7, #1]
 8002ae4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002ae6:	7c3b      	ldrb	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d112      	bne.n	8002b12 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3342      	adds	r3, #66	; 0x42
 8002afa:	2203      	movs	r2, #3
 8002afc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	333d      	adds	r3, #61	; 0x3d
 8002b0c:	7f3a      	ldrb	r2, [r7, #28]
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e008      	b.n	8002b24 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3342      	adds	r3, #66	; 0x42
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002b24:	787b      	ldrb	r3, [r7, #1]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	f200 80c6 	bhi.w	8002cb8 <HAL_HCD_HC_SubmitRequest+0x210>
 8002b2c:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002b45 	.word	0x08002b45
 8002b38:	08002ca5 	.word	0x08002ca5
 8002b3c:	08002ba9 	.word	0x08002ba9
 8002b40:	08002c27 	.word	0x08002c27
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002b44:	7c3b      	ldrb	r3, [r7, #16]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	f040 80b8 	bne.w	8002cbc <HAL_HCD_HC_SubmitRequest+0x214>
 8002b4c:	78bb      	ldrb	r3, [r7, #2]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 80b4 	bne.w	8002cbc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002b54:	8b3b      	ldrh	r3, [r7, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d108      	bne.n	8002b6c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3355      	adds	r3, #85	; 0x55
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	212c      	movs	r1, #44	; 0x2c
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	3355      	adds	r3, #85	; 0x55
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3342      	adds	r3, #66	; 0x42
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b92:	e093      	b.n	8002cbc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3342      	adds	r3, #66	; 0x42
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	701a      	strb	r2, [r3, #0]
      break;
 8002ba6:	e089      	b.n	8002cbc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ba8:	78bb      	ldrb	r3, [r7, #2]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11d      	bne.n	8002bea <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3355      	adds	r3, #85	; 0x55
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3342      	adds	r3, #66	; 0x42
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002bd4:	e073      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3342      	adds	r3, #66	; 0x42
 8002be4:	2202      	movs	r2, #2
 8002be6:	701a      	strb	r2, [r3, #0]
      break;
 8002be8:	e069      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3354      	adds	r3, #84	; 0x54
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3342      	adds	r3, #66	; 0x42
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
      break;
 8002c10:	e055      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3342      	adds	r3, #66	; 0x42
 8002c20:	2202      	movs	r2, #2
 8002c22:	701a      	strb	r2, [r3, #0]
      break;
 8002c24:	e04b      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002c26:	78bb      	ldrb	r3, [r7, #2]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d11d      	bne.n	8002c68 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3355      	adds	r3, #85	; 0x55
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3342      	adds	r3, #66	; 0x42
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c52:	e034      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3342      	adds	r3, #66	; 0x42
 8002c62:	2202      	movs	r2, #2
 8002c64:	701a      	strb	r2, [r3, #0]
      break;
 8002c66:	e02a      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3354      	adds	r3, #84	; 0x54
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3342      	adds	r3, #66	; 0x42
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
      break;
 8002c8e:	e016      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	212c      	movs	r1, #44	; 0x2c
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3342      	adds	r3, #66	; 0x42
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	701a      	strb	r2, [r3, #0]
      break;
 8002ca2:	e00c      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3342      	adds	r3, #66	; 0x42
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
      break;
 8002cb6:	e002      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002cbc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3344      	adds	r3, #68	; 0x44
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	8b3a      	ldrh	r2, [r7, #24]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	202c      	movs	r0, #44	; 0x2c
 8002cd8:	fb00 f303 	mul.w	r3, r0, r3
 8002cdc:	440b      	add	r3, r1
 8002cde:	334c      	adds	r3, #76	; 0x4c
 8002ce0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3360      	adds	r3, #96	; 0x60
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3350      	adds	r3, #80	; 0x50
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3339      	adds	r3, #57	; 0x39
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3361      	adds	r3, #97	; 0x61
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	222c      	movs	r2, #44	; 0x2c
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	3338      	adds	r3, #56	; 0x38
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	18d1      	adds	r1, r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	f004 f8c2 	bl	8006ecc <USB_HC_StartXfer>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 fdc3 	bl	80068f6 <USB_GetMode>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	f040 80f6 	bne.w	8002f64 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 fda7 	bl	80068d0 <USB_ReadInterrupts>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80ec 	beq.w	8002f62 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 fd9e 	bl	80068d0 <USB_ReadInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d9e:	d104      	bne.n	8002daa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002da8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 fd8e 	bl	80068d0 <USB_ReadInterrupts>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dbe:	d104      	bne.n	8002dca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fd7e 	bl	80068d0 <USB_ReadInterrupts>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dde:	d104      	bne.n	8002dea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002de8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 fd6e 	bl	80068d0 <USB_ReadInterrupts>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d103      	bne.n	8002e06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2202      	movs	r2, #2
 8002e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f003 fd60 	bl	80068d0 <USB_ReadInterrupts>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e1a:	d11c      	bne.n	8002e56 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10f      	bne.n	8002e56 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002e36:	2110      	movs	r1, #16
 8002e38:	6938      	ldr	r0, [r7, #16]
 8002e3a:	f003 fc4f 	bl	80066dc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002e3e:	6938      	ldr	r0, [r7, #16]
 8002e40:	f003 fc80 	bl	8006744 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 fe56 	bl	8006afc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f006 fc23 	bl	800969c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f003 fd38 	bl	80068d0 <USB_ReadInterrupts>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e6a:	d102      	bne.n	8002e72 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f001 f89e 	bl	8003fae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fd2a 	bl	80068d0 <USB_ReadInterrupts>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d106      	bne.n	8002e94 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f006 fbec 	bl	8009664 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2208      	movs	r2, #8
 8002e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 fd19 	bl	80068d0 <USB_ReadInterrupts>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d101      	bne.n	8002eac <HAL_HCD_IRQHandler+0x158>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <HAL_HCD_IRQHandler+0x15a>
 8002eac:	2300      	movs	r3, #0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d012      	beq.n	8002ed8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0210 	bic.w	r2, r2, #16
 8002ec0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 ffa1 	bl	8003e0a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0210 	orr.w	r2, r2, #16
 8002ed6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 fcf7 	bl	80068d0 <USB_ReadInterrupts>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eec:	d13a      	bne.n	8002f64 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f004 f92c 	bl	8007150 <USB_HC_ReadInterrupt>
 8002ef8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e025      	b.n	8002f4c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d018      	beq.n	8002f46 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2a:	d106      	bne.n	8002f3a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f8ab 	bl	800308e <HCD_HC_IN_IRQHandler>
 8002f38:	e005      	b.n	8002f46 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fbf9 	bl	8003738 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d3d4      	bcc.n	8002f00 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f5e:	615a      	str	r2, [r3, #20]
 8002f60:	e000      	b.n	8002f64 <HAL_HCD_IRQHandler+0x210>
      return;
 8002f62:	bf00      	nop
    }
  }
}
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_HCD_Start+0x16>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e013      	b.n	8002fa8 <HAL_HCD_Start+0x3e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 fe18 	bl	8006bc4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fb30 	bl	80065fe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_HCD_Stop+0x16>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e00d      	b.n	8002fe2 <HAL_HCD_Stop+0x32>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 fa06 	bl	80073e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 fdba 	bl	8006b70 <USB_ResetPort>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	3360      	adds	r3, #96	; 0x60
 8003020:	781b      	ldrb	r3, [r3, #0]
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	3350      	adds	r3, #80	; 0x50
 8003048:	681b      	ldr	r3, [r3, #0]
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f003 fdfe 	bl	8006c64 <USB_GetCurrentFrame>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f003 fdd9 	bl	8006c36 <USB_GetHostSpeed>
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d11a      	bne.n	80030f4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ca:	461a      	mov	r2, r3
 80030cc:	2304      	movs	r3, #4
 80030ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3361      	adds	r3, #97	; 0x61
 80030de:	2206      	movs	r2, #6
 80030e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f004 f840 	bl	8007172 <USB_HC_Halt>
 80030f2:	e0af      	b.n	8003254 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310a:	d11b      	bne.n	8003144 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	461a      	mov	r2, r3
 800311a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800311e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3361      	adds	r3, #97	; 0x61
 800312e:	2207      	movs	r2, #7
 8003130:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f004 f818 	bl	8007172 <USB_HC_Halt>
 8003142:	e087      	b.n	8003254 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d109      	bne.n	800316e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4413      	add	r3, r2
 8003162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003166:	461a      	mov	r2, r3
 8003168:	2320      	movs	r3, #32
 800316a:	6093      	str	r3, [r2, #8]
 800316c:	e072      	b.n	8003254 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4413      	add	r3, r2
 8003176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b08      	cmp	r3, #8
 8003182:	d11a      	bne.n	80031ba <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003190:	461a      	mov	r2, r3
 8003192:	2308      	movs	r3, #8
 8003194:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	3361      	adds	r3, #97	; 0x61
 80031a4:	2205      	movs	r2, #5
 80031a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f003 ffdd 	bl	8007172 <USB_HC_Halt>
 80031b8:	e04c      	b.n	8003254 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d0:	d11b      	bne.n	800320a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031de:	461a      	mov	r2, r3
 80031e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3361      	adds	r3, #97	; 0x61
 80031f4:	2208      	movs	r2, #8
 80031f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f003 ffb5 	bl	8007172 <USB_HC_Halt>
 8003208:	e024      	b.n	8003254 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4413      	add	r3, r2
 8003212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d119      	bne.n	8003254 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	461a      	mov	r2, r3
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3361      	adds	r3, #97	; 0x61
 8003240:	2206      	movs	r2, #6
 8003242:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f003 ff8f 	bl	8007172 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800326a:	d112      	bne.n	8003292 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f003 ff7b 	bl	8007172 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	461a      	mov	r2, r3
 800328a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800328e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003290:	e24e      	b.n	8003730 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4413      	add	r3, r2
 800329a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	f040 80df 	bne.w	8003468 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d019      	beq.n	80032e6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	212c      	movs	r1, #44	; 0x2c
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	4413      	add	r3, r2
 80032be:	3348      	adds	r3, #72	; 0x48
 80032c0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	0159      	lsls	r1, r3, #5
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	440b      	add	r3, r1
 80032ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80032d4:	1ad2      	subs	r2, r2, r3
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	202c      	movs	r0, #44	; 0x2c
 80032dc:	fb00 f303 	mul.w	r3, r0, r3
 80032e0:	440b      	add	r3, r1
 80032e2:	3350      	adds	r3, #80	; 0x50
 80032e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	3361      	adds	r3, #97	; 0x61
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	335c      	adds	r3, #92	; 0x5c
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4413      	add	r3, r2
 8003312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003316:	461a      	mov	r2, r3
 8003318:	2301      	movs	r3, #1
 800331a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	333f      	adds	r3, #63	; 0x3f
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d009      	beq.n	8003344 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	333f      	adds	r3, #63	; 0x3f
 800333e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003340:	2b02      	cmp	r3, #2
 8003342:	d111      	bne.n	8003368 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f003 ff0f 	bl	8007172 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	461a      	mov	r2, r3
 8003362:	2310      	movs	r3, #16
 8003364:	6093      	str	r3, [r2, #8]
 8003366:	e03a      	b.n	80033de <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	333f      	adds	r3, #63	; 0x3f
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d009      	beq.n	8003390 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	333f      	adds	r3, #63	; 0x3f
 800338a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800338c:	2b01      	cmp	r3, #1
 800338e:	d126      	bne.n	80033de <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	0151      	lsls	r1, r2, #5
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	440a      	add	r2, r1
 80033a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3360      	adds	r3, #96	; 0x60
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	b2d9      	uxtb	r1, r3
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	202c      	movs	r0, #44	; 0x2c
 80033cc:	fb00 f303 	mul.w	r3, r0, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	3360      	adds	r3, #96	; 0x60
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f006 f96d 	bl	80096b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d12b      	bne.n	800343e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	3348      	adds	r3, #72	; 0x48
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	202c      	movs	r0, #44	; 0x2c
 80033fc:	fb00 f202 	mul.w	r2, r0, r2
 8003400:	440a      	add	r2, r1
 8003402:	3240      	adds	r2, #64	; 0x40
 8003404:	8812      	ldrh	r2, [r2, #0]
 8003406:	fbb3 f3f2 	udiv	r3, r3, r2
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 818e 	beq.w	8003730 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3354      	adds	r3, #84	; 0x54
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	f083 0301 	eor.w	r3, r3, #1
 8003428:	b2d8      	uxtb	r0, r3
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3354      	adds	r3, #84	; 0x54
 8003438:	4602      	mov	r2, r0
 800343a:	701a      	strb	r2, [r3, #0]
}
 800343c:	e178      	b.n	8003730 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3354      	adds	r3, #84	; 0x54
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	f083 0301 	eor.w	r3, r3, #1
 8003452:	b2d8      	uxtb	r0, r3
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3354      	adds	r3, #84	; 0x54
 8003462:	4602      	mov	r2, r0
 8003464:	701a      	strb	r2, [r3, #0]
}
 8003466:	e163      	b.n	8003730 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b02      	cmp	r3, #2
 800347c:	f040 80f6 	bne.w	800366c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	3361      	adds	r3, #97	; 0x61
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d109      	bne.n	80034a8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3360      	adds	r3, #96	; 0x60
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e0c9      	b.n	800363c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3361      	adds	r3, #97	; 0x61
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b05      	cmp	r3, #5
 80034ba:	d109      	bne.n	80034d0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3360      	adds	r3, #96	; 0x60
 80034ca:	2205      	movs	r2, #5
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e0b5      	b.n	800363c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	3361      	adds	r3, #97	; 0x61
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b06      	cmp	r3, #6
 80034e2:	d009      	beq.n	80034f8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3361      	adds	r3, #97	; 0x61
 80034f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d150      	bne.n	800359a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	335c      	adds	r3, #92	; 0x5c
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	202c      	movs	r0, #44	; 0x2c
 8003510:	fb00 f303 	mul.w	r3, r0, r3
 8003514:	440b      	add	r3, r1
 8003516:	335c      	adds	r3, #92	; 0x5c
 8003518:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	335c      	adds	r3, #92	; 0x5c
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d912      	bls.n	8003554 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	335c      	adds	r3, #92	; 0x5c
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	4413      	add	r3, r2
 800354c:	3360      	adds	r3, #96	; 0x60
 800354e:	2204      	movs	r2, #4
 8003550:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003552:	e073      	b.n	800363c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3360      	adds	r3, #96	; 0x60
 8003562:	2202      	movs	r2, #2
 8003564:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800357c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003584:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003598:	e050      	b.n	800363c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	212c      	movs	r1, #44	; 0x2c
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	3361      	adds	r3, #97	; 0x61
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d122      	bne.n	80035f4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	212c      	movs	r1, #44	; 0x2c
 80035b4:	fb01 f303 	mul.w	r3, r1, r3
 80035b8:	4413      	add	r3, r2
 80035ba:	3360      	adds	r3, #96	; 0x60
 80035bc:	2202      	movs	r2, #2
 80035be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	461a      	mov	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e023      	b.n	800363c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3361      	adds	r3, #97	; 0x61
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b07      	cmp	r3, #7
 8003606:	d119      	bne.n	800363c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	335c      	adds	r3, #92	; 0x5c
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	202c      	movs	r0, #44	; 0x2c
 8003620:	fb00 f303 	mul.w	r3, r0, r3
 8003624:	440b      	add	r3, r1
 8003626:	335c      	adds	r3, #92	; 0x5c
 8003628:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	212c      	movs	r1, #44	; 0x2c
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	4413      	add	r3, r2
 8003636:	3360      	adds	r3, #96	; 0x60
 8003638:	2204      	movs	r2, #4
 800363a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003648:	461a      	mov	r2, r3
 800364a:	2302      	movs	r3, #2
 800364c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	b2d9      	uxtb	r1, r3
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	202c      	movs	r0, #44	; 0x2c
 8003658:	fb00 f303 	mul.w	r3, r0, r3
 800365c:	4413      	add	r3, r2
 800365e:	3360      	adds	r3, #96	; 0x60
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f006 f827 	bl	80096b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800366a:	e061      	b.n	8003730 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4413      	add	r3, r2
 8003674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b10      	cmp	r3, #16
 8003680:	d156      	bne.n	8003730 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	212c      	movs	r1, #44	; 0x2c
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	4413      	add	r3, r2
 800368e:	333f      	adds	r3, #63	; 0x3f
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d111      	bne.n	80036ba <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	212c      	movs	r1, #44	; 0x2c
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	335c      	adds	r3, #92	; 0x5c
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f003 fd5d 	bl	8007172 <USB_HC_Halt>
 80036b8:	e031      	b.n	800371e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	333f      	adds	r3, #63	; 0x3f
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	333f      	adds	r3, #63	; 0x3f
 80036dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d11d      	bne.n	800371e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	335c      	adds	r3, #92	; 0x5c
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d110      	bne.n	800371e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	212c      	movs	r1, #44	; 0x2c
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	3361      	adds	r3, #97	; 0x61
 800370a:	2203      	movs	r2, #3
 800370c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f003 fd2a 	bl	8007172 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372a:	461a      	mov	r2, r3
 800372c:	2310      	movs	r3, #16
 800372e:	6093      	str	r3, [r2, #8]
}
 8003730:	bf00      	nop
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b04      	cmp	r3, #4
 8003766:	d11a      	bne.n	800379e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003774:	461a      	mov	r2, r3
 8003776:	2304      	movs	r3, #4
 8003778:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	212c      	movs	r1, #44	; 0x2c
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	4413      	add	r3, r2
 8003786:	3361      	adds	r3, #97	; 0x61
 8003788:	2206      	movs	r2, #6
 800378a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f003 fceb 	bl	8007172 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800379c:	e331      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d12e      	bne.n	8003812 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	461a      	mov	r2, r3
 80037c2:	2320      	movs	r3, #32
 80037c4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	333d      	adds	r3, #61	; 0x3d
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	f040 8313 	bne.w	8003e02 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	333d      	adds	r3, #61	; 0x3d
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	3360      	adds	r3, #96	; 0x60
 80037fc:	2202      	movs	r2, #2
 80037fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f003 fcb1 	bl	8007172 <USB_HC_Halt>
}
 8003810:	e2f7      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	4413      	add	r3, r2
 800381a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d112      	bne.n	8003850 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	4413      	add	r3, r2
 8003832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003836:	461a      	mov	r2, r3
 8003838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800383c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f003 fc92 	bl	8007172 <USB_HC_Halt>
}
 800384e:	e2d8      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	4413      	add	r3, r2
 8003858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d140      	bne.n	80038e8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	212c      	movs	r1, #44	; 0x2c
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	4413      	add	r3, r2
 8003872:	335c      	adds	r3, #92	; 0x5c
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	4413      	add	r3, r2
 8003880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d111      	bne.n	80038b2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	333d      	adds	r3, #61	; 0x3d
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ac:	461a      	mov	r2, r3
 80038ae:	2340      	movs	r3, #64	; 0x40
 80038b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	461a      	mov	r2, r3
 80038c0:	2301      	movs	r3, #1
 80038c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	212c      	movs	r1, #44	; 0x2c
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	3361      	adds	r3, #97	; 0x61
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f003 fc46 	bl	8007172 <USB_HC_Halt>
}
 80038e6:	e28c      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d12c      	bne.n	8003958 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	212c      	movs	r1, #44	; 0x2c
 8003904:	fb01 f303 	mul.w	r3, r1, r3
 8003908:	4413      	add	r3, r2
 800390a:	3361      	adds	r3, #97	; 0x61
 800390c:	2204      	movs	r2, #4
 800390e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	333d      	adds	r3, #61	; 0x3d
 800391e:	2201      	movs	r2, #1
 8003920:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	212c      	movs	r1, #44	; 0x2c
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	4413      	add	r3, r2
 800392e:	335c      	adds	r3, #92	; 0x5c
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f003 fc17 	bl	8007172 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	4413      	add	r3, r2
 800394c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003950:	461a      	mov	r2, r3
 8003952:	2340      	movs	r3, #64	; 0x40
 8003954:	6093      	str	r3, [r2, #8]
}
 8003956:	e254      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11a      	bne.n	80039a4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	461a      	mov	r2, r3
 800397c:	2308      	movs	r3, #8
 800397e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	3361      	adds	r3, #97	; 0x61
 800398e:	2205      	movs	r2, #5
 8003990:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f003 fbe8 	bl	8007172 <USB_HC_Halt>
}
 80039a2:	e22e      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d140      	bne.n	8003a3c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	212c      	movs	r1, #44	; 0x2c
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	335c      	adds	r3, #92	; 0x5c
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	212c      	movs	r1, #44	; 0x2c
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	3361      	adds	r3, #97	; 0x61
 80039da:	2203      	movs	r2, #3
 80039dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	212c      	movs	r1, #44	; 0x2c
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	4413      	add	r3, r2
 80039ea:	333d      	adds	r3, #61	; 0x3d
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d112      	bne.n	8003a18 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	333c      	adds	r3, #60	; 0x3c
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d108      	bne.n	8003a18 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	333d      	adds	r3, #61	; 0x3d
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f003 fba5 	bl	8007172 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	461a      	mov	r2, r3
 8003a36:	2310      	movs	r3, #16
 8003a38:	6093      	str	r3, [r2, #8]
}
 8003a3a:	e1e2      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b80      	cmp	r3, #128	; 0x80
 8003a50:	d164      	bne.n	8003b1c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d111      	bne.n	8003a7e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	212c      	movs	r1, #44	; 0x2c
 8003a60:	fb01 f303 	mul.w	r3, r1, r3
 8003a64:	4413      	add	r3, r2
 8003a66:	3361      	adds	r3, #97	; 0x61
 8003a68:	2206      	movs	r2, #6
 8003a6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 fb7b 	bl	8007172 <USB_HC_Halt>
 8003a7c:	e044      	b.n	8003b08 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	335c      	adds	r3, #92	; 0x5c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	202c      	movs	r0, #44	; 0x2c
 8003a96:	fb00 f303 	mul.w	r3, r0, r3
 8003a9a:	440b      	add	r3, r1
 8003a9c:	335c      	adds	r3, #92	; 0x5c
 8003a9e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	212c      	movs	r1, #44	; 0x2c
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	335c      	adds	r3, #92	; 0x5c
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d920      	bls.n	8003af6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	212c      	movs	r1, #44	; 0x2c
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	4413      	add	r3, r2
 8003ac0:	335c      	adds	r3, #92	; 0x5c
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	212c      	movs	r1, #44	; 0x2c
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3360      	adds	r3, #96	; 0x60
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	b2d9      	uxtb	r1, r3
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	202c      	movs	r0, #44	; 0x2c
 8003ae2:	fb00 f303 	mul.w	r3, r0, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3360      	adds	r3, #96	; 0x60
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f005 fde2 	bl	80096b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003af4:	e008      	b.n	8003b08 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	3360      	adds	r3, #96	; 0x60
 8003b04:	2202      	movs	r2, #2
 8003b06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	6093      	str	r3, [r2, #8]
}
 8003b1a:	e172      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b32:	d11b      	bne.n	8003b6c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	212c      	movs	r1, #44	; 0x2c
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	3361      	adds	r3, #97	; 0x61
 8003b42:	2208      	movs	r2, #8
 8003b44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f003 fb0e 	bl	8007172 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b62:	461a      	mov	r2, r3
 8003b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b68:	6093      	str	r3, [r2, #8]
}
 8003b6a:	e14a      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	f040 813f 	bne.w	8003e02 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	212c      	movs	r1, #44	; 0x2c
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	3361      	adds	r3, #97	; 0x61
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d17d      	bne.n	8003c94 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	212c      	movs	r1, #44	; 0x2c
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3360      	adds	r3, #96	; 0x60
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	212c      	movs	r1, #44	; 0x2c
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	333f      	adds	r3, #63	; 0x3f
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d00a      	beq.n	8003bd4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	212c      	movs	r1, #44	; 0x2c
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	333f      	adds	r3, #63	; 0x3f
 8003bcc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	f040 8100 	bne.w	8003dd4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d113      	bne.n	8003c04 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	212c      	movs	r1, #44	; 0x2c
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	4413      	add	r3, r2
 8003be8:	3355      	adds	r3, #85	; 0x55
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	f083 0301 	eor.w	r3, r3, #1
 8003bf0:	b2d8      	uxtb	r0, r3
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	212c      	movs	r1, #44	; 0x2c
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3355      	adds	r3, #85	; 0x55
 8003c00:	4602      	mov	r2, r0
 8003c02:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	f040 80e3 	bne.w	8003dd4 <HCD_HC_OUT_IRQHandler+0x69c>
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	212c      	movs	r1, #44	; 0x2c
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	334c      	adds	r3, #76	; 0x4c
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80d8 	beq.w	8003dd4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	212c      	movs	r1, #44	; 0x2c
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	334c      	adds	r3, #76	; 0x4c
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	202c      	movs	r0, #44	; 0x2c
 8003c3a:	fb00 f202 	mul.w	r2, r0, r2
 8003c3e:	440a      	add	r2, r1
 8003c40:	3240      	adds	r2, #64	; 0x40
 8003c42:	8812      	ldrh	r2, [r2, #0]
 8003c44:	4413      	add	r3, r2
 8003c46:	3b01      	subs	r3, #1
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	202c      	movs	r0, #44	; 0x2c
 8003c4e:	fb00 f202 	mul.w	r2, r0, r2
 8003c52:	440a      	add	r2, r1
 8003c54:	3240      	adds	r2, #64	; 0x40
 8003c56:	8812      	ldrh	r2, [r2, #0]
 8003c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80b5 	beq.w	8003dd4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	212c      	movs	r1, #44	; 0x2c
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	4413      	add	r3, r2
 8003c76:	3355      	adds	r3, #85	; 0x55
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	f083 0301 	eor.w	r3, r3, #1
 8003c7e:	b2d8      	uxtb	r0, r3
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	212c      	movs	r1, #44	; 0x2c
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3355      	adds	r3, #85	; 0x55
 8003c8e:	4602      	mov	r2, r0
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e09f      	b.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	212c      	movs	r1, #44	; 0x2c
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3361      	adds	r3, #97	; 0x61
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d109      	bne.n	8003cbc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	212c      	movs	r1, #44	; 0x2c
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3360      	adds	r3, #96	; 0x60
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e08b      	b.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	212c      	movs	r1, #44	; 0x2c
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3361      	adds	r3, #97	; 0x61
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d109      	bne.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	212c      	movs	r1, #44	; 0x2c
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	3360      	adds	r3, #96	; 0x60
 8003cde:	2202      	movs	r2, #2
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e077      	b.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	212c      	movs	r1, #44	; 0x2c
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	4413      	add	r3, r2
 8003cf0:	3361      	adds	r3, #97	; 0x61
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d109      	bne.n	8003d0c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	212c      	movs	r1, #44	; 0x2c
 8003cfe:	fb01 f303 	mul.w	r3, r1, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	3360      	adds	r3, #96	; 0x60
 8003d06:	2205      	movs	r2, #5
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e063      	b.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	212c      	movs	r1, #44	; 0x2c
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	3361      	adds	r3, #97	; 0x61
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b06      	cmp	r3, #6
 8003d1e:	d009      	beq.n	8003d34 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	212c      	movs	r1, #44	; 0x2c
 8003d26:	fb01 f303 	mul.w	r3, r1, r3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3361      	adds	r3, #97	; 0x61
 8003d2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d14f      	bne.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	335c      	adds	r3, #92	; 0x5c
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	202c      	movs	r0, #44	; 0x2c
 8003d4c:	fb00 f303 	mul.w	r3, r0, r3
 8003d50:	440b      	add	r3, r1
 8003d52:	335c      	adds	r3, #92	; 0x5c
 8003d54:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	212c      	movs	r1, #44	; 0x2c
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	335c      	adds	r3, #92	; 0x5c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d912      	bls.n	8003d90 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	212c      	movs	r1, #44	; 0x2c
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	335c      	adds	r3, #92	; 0x5c
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	212c      	movs	r1, #44	; 0x2c
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	3360      	adds	r3, #96	; 0x60
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e021      	b.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	212c      	movs	r1, #44	; 0x2c
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3360      	adds	r3, #96	; 0x60
 8003d9e:	2202      	movs	r2, #2
 8003da0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003db8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dc0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dce:	461a      	mov	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de0:	461a      	mov	r2, r3
 8003de2:	2302      	movs	r3, #2
 8003de4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	b2d9      	uxtb	r1, r3
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	202c      	movs	r0, #44	; 0x2c
 8003df0:	fb00 f303 	mul.w	r3, r0, r3
 8003df4:	4413      	add	r3, r2
 8003df6:	3360      	adds	r3, #96	; 0x60
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f005 fc5b 	bl	80096b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e02:	bf00      	nop
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b08a      	sub	sp, #40	; 0x28
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	0c5b      	lsrs	r3, r3, #17
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e3e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d004      	beq.n	8003e50 <HCD_RXQLVL_IRQHandler+0x46>
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	f000 80a9 	beq.w	8003fa0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e4e:	e0aa      	b.n	8003fa6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80a6 	beq.w	8003fa4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	3344      	adds	r3, #68	; 0x44
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 809b 	beq.w	8003fa4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	3350      	adds	r3, #80	; 0x50
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	441a      	add	r2, r3
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	202c      	movs	r0, #44	; 0x2c
 8003e88:	fb00 f303 	mul.w	r3, r0, r3
 8003e8c:	440b      	add	r3, r1
 8003e8e:	334c      	adds	r3, #76	; 0x4c
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d87a      	bhi.n	8003f8c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3344      	adds	r3, #68	; 0x44
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	b292      	uxth	r2, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f002 fcb6 	bl	8006820 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	212c      	movs	r1, #44	; 0x2c
 8003eba:	fb01 f303 	mul.w	r3, r1, r3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3344      	adds	r3, #68	; 0x44
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	441a      	add	r2, r3
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	202c      	movs	r0, #44	; 0x2c
 8003ece:	fb00 f303 	mul.w	r3, r0, r3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3344      	adds	r3, #68	; 0x44
 8003ed6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3350      	adds	r3, #80	; 0x50
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	441a      	add	r2, r3
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	202c      	movs	r0, #44	; 0x2c
 8003ef2:	fb00 f303 	mul.w	r3, r0, r3
 8003ef6:	440b      	add	r3, r1
 8003ef8:	3350      	adds	r3, #80	; 0x50
 8003efa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	0cdb      	lsrs	r3, r3, #19
 8003f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f10:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3340      	adds	r3, #64	; 0x40
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d13c      	bne.n	8003fa4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d039      	beq.n	8003fa4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f46:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f4e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	212c      	movs	r1, #44	; 0x2c
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3354      	adds	r3, #84	; 0x54
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	f083 0301 	eor.w	r3, r3, #1
 8003f76:	b2d8      	uxtb	r0, r3
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	3354      	adds	r3, #84	; 0x54
 8003f86:	4602      	mov	r2, r0
 8003f88:	701a      	strb	r2, [r3, #0]
      break;
 8003f8a:	e00b      	b.n	8003fa4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	3360      	adds	r3, #96	; 0x60
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	701a      	strb	r2, [r3, #0]
      break;
 8003f9e:	e001      	b.n	8003fa4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003fa4:	bf00      	nop
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	3728      	adds	r7, #40	; 0x28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b086      	sub	sp, #24
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003fda:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d10b      	bne.n	8003ffe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d102      	bne.n	8003ff6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f005 fb45 	bl	8009680 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f043 0302 	orr.w	r3, r3, #2
 8003ffc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b08      	cmp	r3, #8
 8004006:	d132      	bne.n	800406e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f043 0308 	orr.w	r3, r3, #8
 800400e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b04      	cmp	r3, #4
 8004018:	d126      	bne.n	8004068 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d113      	bne.n	800404a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004028:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800402c:	d106      	bne.n	800403c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2102      	movs	r1, #2
 8004034:	4618      	mov	r0, r3
 8004036:	f002 fd61 	bl	8006afc <USB_InitFSLSPClkSel>
 800403a:	e011      	b.n	8004060 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2101      	movs	r1, #1
 8004042:	4618      	mov	r0, r3
 8004044:	f002 fd5a 	bl	8006afc <USB_InitFSLSPClkSel>
 8004048:	e00a      	b.n	8004060 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d106      	bne.n	8004060 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004058:	461a      	mov	r2, r3
 800405a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800405e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f005 fb37 	bl	80096d4 <HAL_HCD_PortEnabled_Callback>
 8004066:	e002      	b.n	800406e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f005 fb41 	bl	80096f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b20      	cmp	r3, #32
 8004076:	d103      	bne.n	8004080 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f043 0320 	orr.w	r3, r3, #32
 800407e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004086:	461a      	mov	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	6013      	str	r3, [r2, #0]
}
 800408c:	bf00      	nop
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e12b      	b.n	80042fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fc fe5a 	bl	8000d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2224      	movs	r2, #36	; 0x24
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040f8:	f001 fa20 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 80040fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4a81      	ldr	r2, [pc, #516]	; (8004308 <HAL_I2C_Init+0x274>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d807      	bhi.n	8004118 <HAL_I2C_Init+0x84>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4a80      	ldr	r2, [pc, #512]	; (800430c <HAL_I2C_Init+0x278>)
 800410c:	4293      	cmp	r3, r2
 800410e:	bf94      	ite	ls
 8004110:	2301      	movls	r3, #1
 8004112:	2300      	movhi	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e006      	b.n	8004126 <HAL_I2C_Init+0x92>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4a7d      	ldr	r2, [pc, #500]	; (8004310 <HAL_I2C_Init+0x27c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	bf94      	ite	ls
 8004120:	2301      	movls	r3, #1
 8004122:	2300      	movhi	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e0e7      	b.n	80042fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4a78      	ldr	r2, [pc, #480]	; (8004314 <HAL_I2C_Init+0x280>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	0c9b      	lsrs	r3, r3, #18
 8004138:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	4a6a      	ldr	r2, [pc, #424]	; (8004308 <HAL_I2C_Init+0x274>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d802      	bhi.n	8004168 <HAL_I2C_Init+0xd4>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	3301      	adds	r3, #1
 8004166:	e009      	b.n	800417c <HAL_I2C_Init+0xe8>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	4a69      	ldr	r2, [pc, #420]	; (8004318 <HAL_I2C_Init+0x284>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	3301      	adds	r3, #1
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	430b      	orrs	r3, r1
 8004182:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800418e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	495c      	ldr	r1, [pc, #368]	; (8004308 <HAL_I2C_Init+0x274>)
 8004198:	428b      	cmp	r3, r1
 800419a:	d819      	bhi.n	80041d0 <HAL_I2C_Init+0x13c>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1e59      	subs	r1, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80041aa:	1c59      	adds	r1, r3, #1
 80041ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041b0:	400b      	ands	r3, r1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_I2C_Init+0x138>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1e59      	subs	r1, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80041c4:	3301      	adds	r3, #1
 80041c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ca:	e051      	b.n	8004270 <HAL_I2C_Init+0x1dc>
 80041cc:	2304      	movs	r3, #4
 80041ce:	e04f      	b.n	8004270 <HAL_I2C_Init+0x1dc>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d111      	bne.n	80041fc <HAL_I2C_Init+0x168>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1e58      	subs	r0, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	440b      	add	r3, r1
 80041e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ea:	3301      	adds	r3, #1
 80041ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e012      	b.n	8004222 <HAL_I2C_Init+0x18e>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1e58      	subs	r0, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	0099      	lsls	r1, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004212:	3301      	adds	r3, #1
 8004214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_I2C_Init+0x196>
 8004226:	2301      	movs	r3, #1
 8004228:	e022      	b.n	8004270 <HAL_I2C_Init+0x1dc>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10e      	bne.n	8004250 <HAL_I2C_Init+0x1bc>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1e58      	subs	r0, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6859      	ldr	r1, [r3, #4]
 800423a:	460b      	mov	r3, r1
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	440b      	add	r3, r1
 8004240:	fbb0 f3f3 	udiv	r3, r0, r3
 8004244:	3301      	adds	r3, #1
 8004246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424e:	e00f      	b.n	8004270 <HAL_I2C_Init+0x1dc>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1e58      	subs	r0, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	0099      	lsls	r1, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	fbb0 f3f3 	udiv	r3, r0, r3
 8004266:	3301      	adds	r3, #1
 8004268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	6809      	ldr	r1, [r1, #0]
 8004274:	4313      	orrs	r3, r2
 8004276:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69da      	ldr	r2, [r3, #28]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800429e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6911      	ldr	r1, [r2, #16]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68d2      	ldr	r2, [r2, #12]
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695a      	ldr	r2, [r3, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	000186a0 	.word	0x000186a0
 800430c:	001e847f 	.word	0x001e847f
 8004310:	003d08ff 	.word	0x003d08ff
 8004314:	431bde83 	.word	0x431bde83
 8004318:	10624dd3 	.word	0x10624dd3

0800431c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e128      	b.n	8004580 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a90      	ldr	r2, [pc, #576]	; (8004588 <HAL_I2S_Init+0x26c>)
 8004346:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7fc fd5b 	bl	8000e04 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004364:	f023 030f 	bic.w	r3, r3, #15
 8004368:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2202      	movs	r2, #2
 8004370:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d060      	beq.n	800443c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004382:	2310      	movs	r3, #16
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	e001      	b.n	800438c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004388:	2320      	movs	r3, #32
 800438a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b20      	cmp	r3, #32
 8004392:	d802      	bhi.n	800439a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800439a:	2001      	movs	r0, #1
 800439c:	f001 f9d2 	bl	8005744 <HAL_RCCEx_GetPeriphCLKFreq>
 80043a0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043aa:	d125      	bne.n	80043f8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d010      	beq.n	80043d6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	3305      	adds	r3, #5
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	e01f      	b.n	8004416 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	461a      	mov	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	3305      	adds	r3, #5
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	e00e      	b.n	8004416 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	461a      	mov	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004412:	3305      	adds	r3, #5
 8004414:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4a5c      	ldr	r2, [pc, #368]	; (800458c <HAL_I2S_Init+0x270>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	08db      	lsrs	r3, r3, #3
 8004420:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	e003      	b.n	8004444 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800443c:	2302      	movs	r3, #2
 800443e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d902      	bls.n	8004450 <HAL_I2S_Init+0x134>
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	2bff      	cmp	r3, #255	; 0xff
 800444e:	d907      	bls.n	8004460 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004454:	f043 0210 	orr.w	r2, r3, #16
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e08f      	b.n	8004580 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	ea42 0103 	orr.w	r1, r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	430a      	orrs	r2, r1
 8004472:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800447e:	f023 030f 	bic.w	r3, r3, #15
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6851      	ldr	r1, [r2, #4]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6892      	ldr	r2, [r2, #8]
 800448a:	4311      	orrs	r1, r2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68d2      	ldr	r2, [r2, #12]
 8004490:	4311      	orrs	r1, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6992      	ldr	r2, [r2, #24]
 8004496:	430a      	orrs	r2, r1
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d161      	bne.n	8004570 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a38      	ldr	r2, [pc, #224]	; (8004590 <HAL_I2S_Init+0x274>)
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a37      	ldr	r2, [pc, #220]	; (8004594 <HAL_I2S_Init+0x278>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <HAL_I2S_Init+0x1a4>
 80044bc:	4b36      	ldr	r3, [pc, #216]	; (8004598 <HAL_I2S_Init+0x27c>)
 80044be:	e001      	b.n	80044c4 <HAL_I2S_Init+0x1a8>
 80044c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	4932      	ldr	r1, [pc, #200]	; (8004594 <HAL_I2S_Init+0x278>)
 80044cc:	428a      	cmp	r2, r1
 80044ce:	d101      	bne.n	80044d4 <HAL_I2S_Init+0x1b8>
 80044d0:	4a31      	ldr	r2, [pc, #196]	; (8004598 <HAL_I2S_Init+0x27c>)
 80044d2:	e001      	b.n	80044d8 <HAL_I2S_Init+0x1bc>
 80044d4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80044d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80044dc:	f023 030f 	bic.w	r3, r3, #15
 80044e0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2b      	ldr	r2, [pc, #172]	; (8004594 <HAL_I2S_Init+0x278>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_I2S_Init+0x1d4>
 80044ec:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <HAL_I2S_Init+0x27c>)
 80044ee:	e001      	b.n	80044f4 <HAL_I2S_Init+0x1d8>
 80044f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044f4:	2202      	movs	r2, #2
 80044f6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a25      	ldr	r2, [pc, #148]	; (8004594 <HAL_I2S_Init+0x278>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d101      	bne.n	8004506 <HAL_I2S_Init+0x1ea>
 8004502:	4b25      	ldr	r3, [pc, #148]	; (8004598 <HAL_I2S_Init+0x27c>)
 8004504:	e001      	b.n	800450a <HAL_I2S_Init+0x1ee>
 8004506:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004516:	d003      	beq.n	8004520 <HAL_I2S_Init+0x204>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	e001      	b.n	800452c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004528:	2300      	movs	r3, #0
 800452a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004536:	4313      	orrs	r3, r2
 8004538:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004540:	4313      	orrs	r3, r2
 8004542:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800454a:	4313      	orrs	r3, r2
 800454c:	b29a      	uxth	r2, r3
 800454e:	897b      	ldrh	r3, [r7, #10]
 8004550:	4313      	orrs	r3, r2
 8004552:	b29b      	uxth	r3, r3
 8004554:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004558:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <HAL_I2S_Init+0x278>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d101      	bne.n	8004568 <HAL_I2S_Init+0x24c>
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <HAL_I2S_Init+0x27c>)
 8004566:	e001      	b.n	800456c <HAL_I2S_Init+0x250>
 8004568:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800456c:	897a      	ldrh	r2, [r7, #10]
 800456e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	08004693 	.word	0x08004693
 800458c:	cccccccd 	.word	0xcccccccd
 8004590:	080047a9 	.word	0x080047a9
 8004594:	40003800 	.word	0x40003800
 8004598:	40003400 	.word	0x40003400

0800459c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	881a      	ldrh	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	1c9a      	adds	r2, r3, #2
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10e      	bne.n	800462c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800461c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff ffb8 	bl	800459c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	b292      	uxth	r2, r2
 8004648:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	1c9a      	adds	r2, r3, #2
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10e      	bne.n	800468a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800467a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff ff93 	bl	80045b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b086      	sub	sp, #24
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d13a      	bne.n	8004724 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d109      	bne.n	80046cc <I2S_IRQHandler+0x3a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d102      	bne.n	80046cc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff ffb4 	bl	8004634 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b40      	cmp	r3, #64	; 0x40
 80046d4:	d126      	bne.n	8004724 <I2S_IRQHandler+0x92>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d11f      	bne.n	8004724 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	f043 0202 	orr.w	r2, r3, #2
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ff50 	bl	80045c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b03      	cmp	r3, #3
 800472e:	d136      	bne.n	800479e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b02      	cmp	r3, #2
 8004738:	d109      	bne.n	800474e <I2S_IRQHandler+0xbc>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004744:	2b80      	cmp	r3, #128	; 0x80
 8004746:	d102      	bne.n	800474e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff45 	bl	80045d8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b08      	cmp	r3, #8
 8004756:	d122      	bne.n	800479e <I2S_IRQHandler+0x10c>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b20      	cmp	r3, #32
 8004764:	d11b      	bne.n	800479e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004774:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004790:	f043 0204 	orr.w	r2, r3, #4
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff13 	bl	80045c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a92      	ldr	r2, [pc, #584]	; (8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d101      	bne.n	80047c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80047c2:	4b92      	ldr	r3, [pc, #584]	; (8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047c4:	e001      	b.n	80047ca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80047c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a8b      	ldr	r2, [pc, #556]	; (8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d101      	bne.n	80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80047e0:	4b8a      	ldr	r3, [pc, #552]	; (8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047e2:	e001      	b.n	80047e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80047e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f4:	d004      	beq.n	8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f040 8099 	bne.w	8004932 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b02      	cmp	r3, #2
 8004808:	d107      	bne.n	800481a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f925 	bl	8004a64 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d107      	bne.n	8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f9c8 	bl	8004bc4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d13a      	bne.n	80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d035      	beq.n	80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a6e      	ldr	r2, [pc, #440]	; (8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d101      	bne.n	8004856 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004852:	4b6e      	ldr	r3, [pc, #440]	; (8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004854:	e001      	b.n	800485a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4969      	ldr	r1, [pc, #420]	; (8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004862:	428b      	cmp	r3, r1
 8004864:	d101      	bne.n	800486a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004866:	4b69      	ldr	r3, [pc, #420]	; (8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004868:	e001      	b.n	800486e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800486a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800486e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004872:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004882:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f043 0202 	orr.w	r2, r3, #2
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff fe88 	bl	80045c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	f040 80c3 	bne.w	8004a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 80bd 	beq.w	8004a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a49      	ldr	r2, [pc, #292]	; (8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d101      	bne.n	80048ea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80048e6:	4b49      	ldr	r3, [pc, #292]	; (8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048e8:	e001      	b.n	80048ee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80048ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4944      	ldr	r1, [pc, #272]	; (8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048f6:	428b      	cmp	r3, r1
 80048f8:	d101      	bne.n	80048fe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80048fa:	4b44      	ldr	r3, [pc, #272]	; (8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048fc:	e001      	b.n	8004902 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80048fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004902:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004906:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004908:	2300      	movs	r3, #0
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	f043 0204 	orr.w	r2, r3, #4
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff fe4a 	bl	80045c4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004930:	e089      	b.n	8004a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d107      	bne.n	800494c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8be 	bl	8004ac8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d107      	bne.n	8004966 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f8fd 	bl	8004b60 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b40      	cmp	r3, #64	; 0x40
 800496e:	d12f      	bne.n	80049d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02a      	beq.n	80049d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004988:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1e      	ldr	r2, [pc, #120]	; (8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d101      	bne.n	8004998 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004994:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004996:	e001      	b.n	800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4919      	ldr	r1, [pc, #100]	; (8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049a4:	428b      	cmp	r3, r1
 80049a6:	d101      	bne.n	80049ac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80049a8:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049aa:	e001      	b.n	80049b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80049ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	f043 0202 	orr.w	r2, r3, #2
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff fdfa 	bl	80045c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d136      	bne.n	8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d031      	beq.n	8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a07      	ldr	r2, [pc, #28]	; (8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80049ee:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049f0:	e001      	b.n	80049f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80049f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4902      	ldr	r1, [pc, #8]	; (8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049fe:	428b      	cmp	r3, r1
 8004a00:	d106      	bne.n	8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004a02:	4b02      	ldr	r3, [pc, #8]	; (8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a04:	e006      	b.n	8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004a06:	bf00      	nop
 8004a08:	40003800 	.word	0x40003800
 8004a0c:	40003400 	.word	0x40003400
 8004a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a18:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	f043 0204 	orr.w	r2, r3, #4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff fdc0 	bl	80045c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a44:	e000      	b.n	8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a46:	bf00      	nop
}
 8004a48:	bf00      	nop
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	1c99      	adds	r1, r3, #2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6251      	str	r1, [r2, #36]	; 0x24
 8004a76:	881a      	ldrh	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d113      	bne.n	8004abe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004aa4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d106      	bne.n	8004abe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff ffc9 	bl	8004a50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	1c99      	adds	r1, r3, #2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6251      	str	r1, [r2, #36]	; 0x24
 8004ada:	8819      	ldrh	r1, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <I2SEx_TxISR_I2SExt+0x90>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d101      	bne.n	8004aea <I2SEx_TxISR_I2SExt+0x22>
 8004ae6:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <I2SEx_TxISR_I2SExt+0x94>)
 8004ae8:	e001      	b.n	8004aee <I2SEx_TxISR_I2SExt+0x26>
 8004aea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aee:	460a      	mov	r2, r1
 8004af0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d121      	bne.n	8004b4e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <I2SEx_TxISR_I2SExt+0x90>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d101      	bne.n	8004b18 <I2SEx_TxISR_I2SExt+0x50>
 8004b14:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <I2SEx_TxISR_I2SExt+0x94>)
 8004b16:	e001      	b.n	8004b1c <I2SEx_TxISR_I2SExt+0x54>
 8004b18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	490d      	ldr	r1, [pc, #52]	; (8004b58 <I2SEx_TxISR_I2SExt+0x90>)
 8004b24:	428b      	cmp	r3, r1
 8004b26:	d101      	bne.n	8004b2c <I2SEx_TxISR_I2SExt+0x64>
 8004b28:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <I2SEx_TxISR_I2SExt+0x94>)
 8004b2a:	e001      	b.n	8004b30 <I2SEx_TxISR_I2SExt+0x68>
 8004b2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d106      	bne.n	8004b4e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff81 	bl	8004a50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40003800 	.word	0x40003800
 8004b5c:	40003400 	.word	0x40003400

08004b60 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68d8      	ldr	r0, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	1c99      	adds	r1, r3, #2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004b78:	b282      	uxth	r2, r0
 8004b7a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d113      	bne.n	8004bbc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ba2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff ff4a 	bl	8004a50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <I2SEx_RxISR_I2SExt+0x90>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d101      	bne.n	8004bda <I2SEx_RxISR_I2SExt+0x16>
 8004bd6:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <I2SEx_RxISR_I2SExt+0x94>)
 8004bd8:	e001      	b.n	8004bde <I2SEx_RxISR_I2SExt+0x1a>
 8004bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bde:	68d8      	ldr	r0, [r3, #12]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	1c99      	adds	r1, r3, #2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004bea:	b282      	uxth	r2, r0
 8004bec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d121      	bne.n	8004c4a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a12      	ldr	r2, [pc, #72]	; (8004c54 <I2SEx_RxISR_I2SExt+0x90>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d101      	bne.n	8004c14 <I2SEx_RxISR_I2SExt+0x50>
 8004c10:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <I2SEx_RxISR_I2SExt+0x94>)
 8004c12:	e001      	b.n	8004c18 <I2SEx_RxISR_I2SExt+0x54>
 8004c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	490d      	ldr	r1, [pc, #52]	; (8004c54 <I2SEx_RxISR_I2SExt+0x90>)
 8004c20:	428b      	cmp	r3, r1
 8004c22:	d101      	bne.n	8004c28 <I2SEx_RxISR_I2SExt+0x64>
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <I2SEx_RxISR_I2SExt+0x94>)
 8004c26:	e001      	b.n	8004c2c <I2SEx_RxISR_I2SExt+0x68>
 8004c28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c30:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d106      	bne.n	8004c4a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff03 	bl	8004a50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40003800 	.word	0x40003800
 8004c58:	40003400 	.word	0x40003400

08004c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e267      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d075      	beq.n	8004d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c7a:	4b88      	ldr	r3, [pc, #544]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d00c      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c86:	4b85      	ldr	r3, [pc, #532]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d112      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c92:	4b82      	ldr	r3, [pc, #520]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca0:	4b7e      	ldr	r3, [pc, #504]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d05b      	beq.n	8004d64 <HAL_RCC_OscConfig+0x108>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d157      	bne.n	8004d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e242      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc0:	d106      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x74>
 8004cc2:	4b76      	ldr	r3, [pc, #472]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a75      	ldr	r2, [pc, #468]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e01d      	b.n	8004d0c <HAL_RCC_OscConfig+0xb0>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x98>
 8004cda:	4b70      	ldr	r3, [pc, #448]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6f      	ldr	r2, [pc, #444]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4b6d      	ldr	r3, [pc, #436]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a6c      	ldr	r2, [pc, #432]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCC_OscConfig+0xb0>
 8004cf4:	4b69      	ldr	r3, [pc, #420]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a68      	ldr	r2, [pc, #416]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4b66      	ldr	r3, [pc, #408]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a65      	ldr	r2, [pc, #404]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d013      	beq.n	8004d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d14:	f7fc fb6c 	bl	80013f0 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d1c:	f7fc fb68 	bl	80013f0 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	; 0x64
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e207      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2e:	4b5b      	ldr	r3, [pc, #364]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0xc0>
 8004d3a:	e014      	b.n	8004d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fc fb58 	bl	80013f0 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fc fb54 	bl	80013f0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	; 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e1f3      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d56:	4b51      	ldr	r3, [pc, #324]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0xe8>
 8004d62:	e000      	b.n	8004d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d063      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d72:	4b4a      	ldr	r3, [pc, #296]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00b      	beq.n	8004d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d7e:	4b47      	ldr	r3, [pc, #284]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d11c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8a:	4b44      	ldr	r3, [pc, #272]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d116      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d96:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_RCC_OscConfig+0x152>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d001      	beq.n	8004dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e1c7      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dae:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4937      	ldr	r1, [pc, #220]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	e03a      	b.n	8004e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d020      	beq.n	8004e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dcc:	4b34      	ldr	r3, [pc, #208]	; (8004ea0 <HAL_RCC_OscConfig+0x244>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd2:	f7fc fb0d 	bl	80013f0 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dda:	f7fc fb09 	bl	80013f0 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e1a8      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dec:	4b2b      	ldr	r3, [pc, #172]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df8:	4b28      	ldr	r3, [pc, #160]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4925      	ldr	r1, [pc, #148]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	600b      	str	r3, [r1, #0]
 8004e0c:	e015      	b.n	8004e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e0e:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <HAL_RCC_OscConfig+0x244>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fc faec 	bl	80013f0 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e1c:	f7fc fae8 	bl	80013f0 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e187      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e2e:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d036      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d016      	beq.n	8004e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <HAL_RCC_OscConfig+0x248>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fc facc 	bl	80013f0 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5c:	f7fc fac8 	bl	80013f0 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e167      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x200>
 8004e7a:	e01b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCC_OscConfig+0x248>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e82:	f7fc fab5 	bl	80013f0 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e88:	e00e      	b.n	8004ea8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8a:	f7fc fab1 	bl	80013f0 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d907      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e150      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	42470000 	.word	0x42470000
 8004ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	4b88      	ldr	r3, [pc, #544]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1ea      	bne.n	8004e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8097 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec6:	4b81      	ldr	r3, [pc, #516]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	4b7d      	ldr	r3, [pc, #500]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	4a7c      	ldr	r2, [pc, #496]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee2:	4b7a      	ldr	r3, [pc, #488]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef2:	4b77      	ldr	r3, [pc, #476]	; (80050d0 <HAL_RCC_OscConfig+0x474>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d118      	bne.n	8004f30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efe:	4b74      	ldr	r3, [pc, #464]	; (80050d0 <HAL_RCC_OscConfig+0x474>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a73      	ldr	r2, [pc, #460]	; (80050d0 <HAL_RCC_OscConfig+0x474>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0a:	f7fc fa71 	bl	80013f0 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f12:	f7fc fa6d 	bl	80013f0 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e10c      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f24:	4b6a      	ldr	r3, [pc, #424]	; (80050d0 <HAL_RCC_OscConfig+0x474>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x2ea>
 8004f38:	4b64      	ldr	r3, [pc, #400]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a63      	ldr	r2, [pc, #396]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
 8004f44:	e01c      	b.n	8004f80 <HAL_RCC_OscConfig+0x324>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b05      	cmp	r3, #5
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x30c>
 8004f4e:	4b5f      	ldr	r3, [pc, #380]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a5e      	ldr	r2, [pc, #376]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f54:	f043 0304 	orr.w	r3, r3, #4
 8004f58:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5a:	4b5c      	ldr	r3, [pc, #368]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a5b      	ldr	r2, [pc, #364]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
 8004f66:	e00b      	b.n	8004f80 <HAL_RCC_OscConfig+0x324>
 8004f68:	4b58      	ldr	r3, [pc, #352]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	4a57      	ldr	r2, [pc, #348]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	; 0x70
 8004f74:	4b55      	ldr	r3, [pc, #340]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	4a54      	ldr	r2, [pc, #336]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f7a:	f023 0304 	bic.w	r3, r3, #4
 8004f7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d015      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fc fa32 	bl	80013f0 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fc fa2e 	bl	80013f0 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0cb      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa6:	4b49      	ldr	r3, [pc, #292]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0ee      	beq.n	8004f90 <HAL_RCC_OscConfig+0x334>
 8004fb2:	e014      	b.n	8004fde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb4:	f7fc fa1c 	bl	80013f0 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fbc:	f7fc fa18 	bl	80013f0 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e0b5      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd2:	4b3e      	ldr	r3, [pc, #248]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ee      	bne.n	8004fbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe4:	4b39      	ldr	r3, [pc, #228]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	4a38      	ldr	r2, [pc, #224]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80a1 	beq.w	800513c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ffa:	4b34      	ldr	r3, [pc, #208]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	2b08      	cmp	r3, #8
 8005004:	d05c      	beq.n	80050c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d141      	bne.n	8005092 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500e:	4b31      	ldr	r3, [pc, #196]	; (80050d4 <HAL_RCC_OscConfig+0x478>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005014:	f7fc f9ec 	bl	80013f0 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501c:	f7fc f9e8 	bl	80013f0 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e087      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502e:	4b27      	ldr	r3, [pc, #156]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	019b      	lsls	r3, r3, #6
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	3b01      	subs	r3, #1
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	061b      	lsls	r3, r3, #24
 800505e:	491b      	ldr	r1, [pc, #108]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8005060:	4313      	orrs	r3, r2
 8005062:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005064:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <HAL_RCC_OscConfig+0x478>)
 8005066:	2201      	movs	r2, #1
 8005068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506a:	f7fc f9c1 	bl	80013f0 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005072:	f7fc f9bd 	bl	80013f0 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e05c      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005084:	4b11      	ldr	r3, [pc, #68]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f0      	beq.n	8005072 <HAL_RCC_OscConfig+0x416>
 8005090:	e054      	b.n	800513c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005092:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <HAL_RCC_OscConfig+0x478>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fc f9aa 	bl	80013f0 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a0:	f7fc f9a6 	bl	80013f0 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e045      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x444>
 80050be:	e03d      	b.n	800513c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e038      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40007000 	.word	0x40007000
 80050d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <HAL_RCC_OscConfig+0x4ec>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d028      	beq.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d121      	bne.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d11a      	bne.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800510e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005110:	4293      	cmp	r3, r2
 8005112:	d111      	bne.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	3b01      	subs	r3, #1
 8005122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005124:	429a      	cmp	r2, r3
 8005126:	d107      	bne.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40023800 	.word	0x40023800

0800514c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0cc      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005160:	4b68      	ldr	r3, [pc, #416]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d90c      	bls.n	8005188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516e:	4b65      	ldr	r3, [pc, #404]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b63      	ldr	r3, [pc, #396]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0b8      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d020      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051a0:	4b59      	ldr	r3, [pc, #356]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	4a58      	ldr	r2, [pc, #352]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051b8:	4b53      	ldr	r3, [pc, #332]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4a52      	ldr	r2, [pc, #328]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c4:	4b50      	ldr	r3, [pc, #320]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	494d      	ldr	r1, [pc, #308]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d044      	beq.n	800526c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ea:	4b47      	ldr	r3, [pc, #284]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d119      	bne.n	800522a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e07f      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d003      	beq.n	800520a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005206:	2b03      	cmp	r3, #3
 8005208:	d107      	bne.n	800521a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520a:	4b3f      	ldr	r3, [pc, #252]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d109      	bne.n	800522a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e06f      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521a:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e067      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800522a:	4b37      	ldr	r3, [pc, #220]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f023 0203 	bic.w	r2, r3, #3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	4934      	ldr	r1, [pc, #208]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	4313      	orrs	r3, r2
 800523a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800523c:	f7fc f8d8 	bl	80013f0 <HAL_GetTick>
 8005240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005242:	e00a      	b.n	800525a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005244:	f7fc f8d4 	bl	80013f0 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005252:	4293      	cmp	r3, r2
 8005254:	d901      	bls.n	800525a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e04f      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525a:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 020c 	and.w	r2, r3, #12
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	429a      	cmp	r2, r3
 800526a:	d1eb      	bne.n	8005244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800526c:	4b25      	ldr	r3, [pc, #148]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d20c      	bcs.n	8005294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b22      	ldr	r3, [pc, #136]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b20      	ldr	r3, [pc, #128]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e032      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a0:	4b19      	ldr	r3, [pc, #100]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4916      	ldr	r1, [pc, #88]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	490e      	ldr	r1, [pc, #56]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052d2:	f000 f821 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80052d6:	4602      	mov	r2, r0
 80052d8:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	490a      	ldr	r1, [pc, #40]	; (800530c <HAL_RCC_ClockConfig+0x1c0>)
 80052e4:	5ccb      	ldrb	r3, [r1, r3]
 80052e6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ea:	4a09      	ldr	r2, [pc, #36]	; (8005310 <HAL_RCC_ClockConfig+0x1c4>)
 80052ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ee:	4b09      	ldr	r3, [pc, #36]	; (8005314 <HAL_RCC_ClockConfig+0x1c8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fc f838 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40023c00 	.word	0x40023c00
 8005308:	40023800 	.word	0x40023800
 800530c:	08009d90 	.word	0x08009d90
 8005310:	20000000 	.word	0x20000000
 8005314:	20000004 	.word	0x20000004

08005318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800531c:	b094      	sub	sp, #80	; 0x50
 800531e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	647b      	str	r3, [r7, #68]	; 0x44
 8005324:	2300      	movs	r3, #0
 8005326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005328:	2300      	movs	r3, #0
 800532a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005330:	4b79      	ldr	r3, [pc, #484]	; (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 030c 	and.w	r3, r3, #12
 8005338:	2b08      	cmp	r3, #8
 800533a:	d00d      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0x40>
 800533c:	2b08      	cmp	r3, #8
 800533e:	f200 80e1 	bhi.w	8005504 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_RCC_GetSysClockFreq+0x34>
 8005346:	2b04      	cmp	r3, #4
 8005348:	d003      	beq.n	8005352 <HAL_RCC_GetSysClockFreq+0x3a>
 800534a:	e0db      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800534c:	4b73      	ldr	r3, [pc, #460]	; (800551c <HAL_RCC_GetSysClockFreq+0x204>)
 800534e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005350:	e0db      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005352:	4b73      	ldr	r3, [pc, #460]	; (8005520 <HAL_RCC_GetSysClockFreq+0x208>)
 8005354:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005356:	e0d8      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005358:	4b6f      	ldr	r3, [pc, #444]	; (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005360:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005362:	4b6d      	ldr	r3, [pc, #436]	; (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d063      	beq.n	8005436 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800536e:	4b6a      	ldr	r3, [pc, #424]	; (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	099b      	lsrs	r3, r3, #6
 8005374:	2200      	movs	r2, #0
 8005376:	63bb      	str	r3, [r7, #56]	; 0x38
 8005378:	63fa      	str	r2, [r7, #60]	; 0x3c
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005380:	633b      	str	r3, [r7, #48]	; 0x30
 8005382:	2300      	movs	r3, #0
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
 8005386:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800538a:	4622      	mov	r2, r4
 800538c:	462b      	mov	r3, r5
 800538e:	f04f 0000 	mov.w	r0, #0
 8005392:	f04f 0100 	mov.w	r1, #0
 8005396:	0159      	lsls	r1, r3, #5
 8005398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800539c:	0150      	lsls	r0, r2, #5
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4621      	mov	r1, r4
 80053a4:	1a51      	subs	r1, r2, r1
 80053a6:	6139      	str	r1, [r7, #16]
 80053a8:	4629      	mov	r1, r5
 80053aa:	eb63 0301 	sbc.w	r3, r3, r1
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053bc:	4659      	mov	r1, fp
 80053be:	018b      	lsls	r3, r1, #6
 80053c0:	4651      	mov	r1, sl
 80053c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053c6:	4651      	mov	r1, sl
 80053c8:	018a      	lsls	r2, r1, #6
 80053ca:	4651      	mov	r1, sl
 80053cc:	ebb2 0801 	subs.w	r8, r2, r1
 80053d0:	4659      	mov	r1, fp
 80053d2:	eb63 0901 	sbc.w	r9, r3, r1
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ea:	4690      	mov	r8, r2
 80053ec:	4699      	mov	r9, r3
 80053ee:	4623      	mov	r3, r4
 80053f0:	eb18 0303 	adds.w	r3, r8, r3
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	462b      	mov	r3, r5
 80053f8:	eb49 0303 	adc.w	r3, r9, r3
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800540a:	4629      	mov	r1, r5
 800540c:	024b      	lsls	r3, r1, #9
 800540e:	4621      	mov	r1, r4
 8005410:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005414:	4621      	mov	r1, r4
 8005416:	024a      	lsls	r2, r1, #9
 8005418:	4610      	mov	r0, r2
 800541a:	4619      	mov	r1, r3
 800541c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541e:	2200      	movs	r2, #0
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
 8005422:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005424:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005428:	f7fa fed6 	bl	80001d8 <__aeabi_uldivmod>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4613      	mov	r3, r2
 8005432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005434:	e058      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005436:	4b38      	ldr	r3, [pc, #224]	; (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	099b      	lsrs	r3, r3, #6
 800543c:	2200      	movs	r2, #0
 800543e:	4618      	mov	r0, r3
 8005440:	4611      	mov	r1, r2
 8005442:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005446:	623b      	str	r3, [r7, #32]
 8005448:	2300      	movs	r3, #0
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
 800544c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	f04f 0000 	mov.w	r0, #0
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	0159      	lsls	r1, r3, #5
 800545e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005462:	0150      	lsls	r0, r2, #5
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4641      	mov	r1, r8
 800546a:	ebb2 0a01 	subs.w	sl, r2, r1
 800546e:	4649      	mov	r1, r9
 8005470:	eb63 0b01 	sbc.w	fp, r3, r1
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005480:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005484:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005488:	ebb2 040a 	subs.w	r4, r2, sl
 800548c:	eb63 050b 	sbc.w	r5, r3, fp
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	00eb      	lsls	r3, r5, #3
 800549a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800549e:	00e2      	lsls	r2, r4, #3
 80054a0:	4614      	mov	r4, r2
 80054a2:	461d      	mov	r5, r3
 80054a4:	4643      	mov	r3, r8
 80054a6:	18e3      	adds	r3, r4, r3
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	464b      	mov	r3, r9
 80054ac:	eb45 0303 	adc.w	r3, r5, r3
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054be:	4629      	mov	r1, r5
 80054c0:	028b      	lsls	r3, r1, #10
 80054c2:	4621      	mov	r1, r4
 80054c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054c8:	4621      	mov	r1, r4
 80054ca:	028a      	lsls	r2, r1, #10
 80054cc:	4610      	mov	r0, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d2:	2200      	movs	r2, #0
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	61fa      	str	r2, [r7, #28]
 80054d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054dc:	f7fa fe7c 	bl	80001d8 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4613      	mov	r3, r2
 80054e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	3301      	adds	r3, #1
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005502:	e002      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_RCC_GetSysClockFreq+0x204>)
 8005506:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800550a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800550c:	4618      	mov	r0, r3
 800550e:	3750      	adds	r7, #80	; 0x50
 8005510:	46bd      	mov	sp, r7
 8005512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800
 800551c:	00f42400 	.word	0x00f42400
 8005520:	007a1200 	.word	0x007a1200

08005524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <HAL_RCC_GetHCLKFreq+0x14>)
 800552a:	681b      	ldr	r3, [r3, #0]
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000000 	.word	0x20000000

0800553c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005540:	f7ff fff0 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	0a9b      	lsrs	r3, r3, #10
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4903      	ldr	r1, [pc, #12]	; (8005560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40023800 	.word	0x40023800
 8005560:	08009da0 	.word	0x08009da0

08005564 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005588:	2b00      	cmp	r3, #0
 800558a:	d038      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800558c:	4b68      	ldr	r3, [pc, #416]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005592:	f7fb ff2d 	bl	80013f0 <HAL_GetTick>
 8005596:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005598:	e008      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800559a:	f7fb ff29 	bl	80013f0 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e0bd      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055ac:	4b61      	ldr	r3, [pc, #388]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f0      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	019b      	lsls	r3, r3, #6
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	071b      	lsls	r3, r3, #28
 80055ca:	495a      	ldr	r1, [pc, #360]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055d2:	4b57      	ldr	r3, [pc, #348]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055d8:	f7fb ff0a 	bl	80013f0 <HAL_GetTick>
 80055dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055e0:	f7fb ff06 	bl	80013f0 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e09a      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055f2:	4b50      	ldr	r3, [pc, #320]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8083 	beq.w	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	4b48      	ldr	r3, [pc, #288]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	4a47      	ldr	r2, [pc, #284]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561a:	6413      	str	r3, [r2, #64]	; 0x40
 800561c:	4b45      	ldr	r3, [pc, #276]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005628:	4b43      	ldr	r3, [pc, #268]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a42      	ldr	r2, [pc, #264]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800562e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005632:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005634:	f7fb fedc 	bl	80013f0 <HAL_GetTick>
 8005638:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800563c:	f7fb fed8 	bl	80013f0 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e06c      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800564e:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800565a:	4b36      	ldr	r3, [pc, #216]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005662:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d02f      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x166>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	429a      	cmp	r2, r3
 8005676:	d028      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005678:	4b2e      	ldr	r3, [pc, #184]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005680:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005682:	4b2e      	ldr	r3, [pc, #184]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005684:	2201      	movs	r2, #1
 8005686:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005688:	4b2c      	ldr	r3, [pc, #176]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800568e:	4a29      	ldr	r2, [pc, #164]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005694:	4b27      	ldr	r3, [pc, #156]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b01      	cmp	r3, #1
 800569e:	d114      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056a0:	f7fb fea6 	bl	80013f0 <HAL_GetTick>
 80056a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a6:	e00a      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a8:	f7fb fea2 	bl	80013f0 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e034      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056be:	4b1d      	ldr	r3, [pc, #116]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0ee      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056d6:	d10d      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80056d8:	4b16      	ldr	r3, [pc, #88]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80056e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ec:	4911      	ldr	r1, [pc, #68]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	608b      	str	r3, [r1, #8]
 80056f2:	e005      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80056f4:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	4a0e      	ldr	r2, [pc, #56]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80056fe:	6093      	str	r3, [r2, #8]
 8005700:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800570c:	4909      	ldr	r1, [pc, #36]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800570e:	4313      	orrs	r3, r2
 8005710:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	7d1a      	ldrb	r2, [r3, #20]
 8005722:	4b07      	ldr	r3, [pc, #28]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005724:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	42470068 	.word	0x42470068
 8005734:	40023800 	.word	0x40023800
 8005738:	40007000 	.word	0x40007000
 800573c:	42470e40 	.word	0x42470e40
 8005740:	424711e0 	.word	0x424711e0

08005744 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d140      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005762:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d131      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005778:	4b1f      	ldr	r3, [pc, #124]	; (80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800577a:	617b      	str	r3, [r7, #20]
          break;
 800577c:	e031      	b.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800577e:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800578a:	d109      	bne.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800578c:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800578e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005796:	4a19      	ldr	r2, [pc, #100]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005798:	fbb2 f3f3 	udiv	r3, r2, r3
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	e008      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057aa:	4a15      	ldr	r2, [pc, #84]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80057b2:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057b8:	099b      	lsrs	r3, r3, #6
 80057ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	fb02 f303 	mul.w	r3, r2, r3
 80057c4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80057c6:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057cc:	0f1b      	lsrs	r3, r3, #28
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d8:	617b      	str	r3, [r7, #20]
          break;
 80057da:	e002      	b.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
          break;
 80057e0:	bf00      	nop
        }
      }
      break;
 80057e2:	bf00      	nop
    }
  }
  return frequency;
 80057e4:	697b      	ldr	r3, [r7, #20]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40023800 	.word	0x40023800
 80057f8:	00bb8000 	.word	0x00bb8000
 80057fc:	007a1200 	.word	0x007a1200
 8005800:	00f42400 	.word	0x00f42400

08005804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e07b      	b.n	800590e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b00      	cmp	r3, #0
 800581c:	d108      	bne.n	8005830 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005826:	d009      	beq.n	800583c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	61da      	str	r2, [r3, #28]
 800582e:	e005      	b.n	800583c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fb fba2 	bl	8000fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005872:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c0:	ea42 0103 	orr.w	r1, r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	0c1b      	lsrs	r3, r3, #16
 80058da:	f003 0104 	and.w	r1, r3, #4
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	f003 0210 	and.w	r2, r3, #16
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b082      	sub	sp, #8
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e041      	b.n	80059ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7fb fb97 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3304      	adds	r3, #4
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f000 fab7 	bl	8005ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e041      	b.n	8005a4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fb fb28 	bl	8001030 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f000 fa68 	bl	8005ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d109      	bne.n	8005a78 <HAL_TIM_PWM_Start+0x24>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	e022      	b.n	8005abe <HAL_TIM_PWM_Start+0x6a>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d109      	bne.n	8005a92 <HAL_TIM_PWM_Start+0x3e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	bf14      	ite	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	2300      	moveq	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	e015      	b.n	8005abe <HAL_TIM_PWM_Start+0x6a>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d109      	bne.n	8005aac <HAL_TIM_PWM_Start+0x58>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	bf14      	ite	ne
 8005aa4:	2301      	movne	r3, #1
 8005aa6:	2300      	moveq	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	e008      	b.n	8005abe <HAL_TIM_PWM_Start+0x6a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	bf14      	ite	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	2300      	moveq	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e068      	b.n	8005b98 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0x82>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad4:	e013      	b.n	8005afe <HAL_TIM_PWM_Start+0xaa>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_PWM_Start+0x92>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae4:	e00b      	b.n	8005afe <HAL_TIM_PWM_Start+0xaa>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_PWM_Start+0xa2>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af4:	e003      	b.n	8005afe <HAL_TIM_PWM_Start+0xaa>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2201      	movs	r2, #1
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fc84 	bl	8006414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a23      	ldr	r2, [pc, #140]	; (8005ba0 <HAL_TIM_PWM_Start+0x14c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d107      	bne.n	8005b26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ba0 <HAL_TIM_PWM_Start+0x14c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d018      	beq.n	8005b62 <HAL_TIM_PWM_Start+0x10e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b38:	d013      	beq.n	8005b62 <HAL_TIM_PWM_Start+0x10e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a19      	ldr	r2, [pc, #100]	; (8005ba4 <HAL_TIM_PWM_Start+0x150>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00e      	beq.n	8005b62 <HAL_TIM_PWM_Start+0x10e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a17      	ldr	r2, [pc, #92]	; (8005ba8 <HAL_TIM_PWM_Start+0x154>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d009      	beq.n	8005b62 <HAL_TIM_PWM_Start+0x10e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a16      	ldr	r2, [pc, #88]	; (8005bac <HAL_TIM_PWM_Start+0x158>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d004      	beq.n	8005b62 <HAL_TIM_PWM_Start+0x10e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a14      	ldr	r2, [pc, #80]	; (8005bb0 <HAL_TIM_PWM_Start+0x15c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d111      	bne.n	8005b86 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b06      	cmp	r3, #6
 8005b72:	d010      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b84:	e007      	b.n	8005b96 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0201 	orr.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40010000 	.word	0x40010000
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40000800 	.word	0x40000800
 8005bac:	40000c00 	.word	0x40000c00
 8005bb0:	40014000 	.word	0x40014000

08005bb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e0ae      	b.n	8005d30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b0c      	cmp	r3, #12
 8005bde:	f200 809f 	bhi.w	8005d20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c1d 	.word	0x08005c1d
 8005bec:	08005d21 	.word	0x08005d21
 8005bf0:	08005d21 	.word	0x08005d21
 8005bf4:	08005d21 	.word	0x08005d21
 8005bf8:	08005c5d 	.word	0x08005c5d
 8005bfc:	08005d21 	.word	0x08005d21
 8005c00:	08005d21 	.word	0x08005d21
 8005c04:	08005d21 	.word	0x08005d21
 8005c08:	08005c9f 	.word	0x08005c9f
 8005c0c:	08005d21 	.word	0x08005d21
 8005c10:	08005d21 	.word	0x08005d21
 8005c14:	08005d21 	.word	0x08005d21
 8005c18:	08005cdf 	.word	0x08005cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 f9d0 	bl	8005fc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0208 	orr.w	r2, r2, #8
 8005c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0204 	bic.w	r2, r2, #4
 8005c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6999      	ldr	r1, [r3, #24]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	619a      	str	r2, [r3, #24]
      break;
 8005c5a:	e064      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fa16 	bl	8006094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6999      	ldr	r1, [r3, #24]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	021a      	lsls	r2, r3, #8
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	619a      	str	r2, [r3, #24]
      break;
 8005c9c:	e043      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fa61 	bl	800616c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0208 	orr.w	r2, r2, #8
 8005cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0204 	bic.w	r2, r2, #4
 8005cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69d9      	ldr	r1, [r3, #28]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	61da      	str	r2, [r3, #28]
      break;
 8005cdc:	e023      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 faab 	bl	8006240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69d9      	ldr	r1, [r3, #28]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	021a      	lsls	r2, r3, #8
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	61da      	str	r2, [r3, #28]
      break;
 8005d1e:	e002      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
      break;
 8005d24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_TIM_ConfigClockSource+0x1c>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e0b4      	b.n	8005ebe <HAL_TIM_ConfigClockSource+0x186>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d8c:	d03e      	beq.n	8005e0c <HAL_TIM_ConfigClockSource+0xd4>
 8005d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d92:	f200 8087 	bhi.w	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9a:	f000 8086 	beq.w	8005eaa <HAL_TIM_ConfigClockSource+0x172>
 8005d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da2:	d87f      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b70      	cmp	r3, #112	; 0x70
 8005da6:	d01a      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0xa6>
 8005da8:	2b70      	cmp	r3, #112	; 0x70
 8005daa:	d87b      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b60      	cmp	r3, #96	; 0x60
 8005dae:	d050      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x11a>
 8005db0:	2b60      	cmp	r3, #96	; 0x60
 8005db2:	d877      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005db4:	2b50      	cmp	r3, #80	; 0x50
 8005db6:	d03c      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0xfa>
 8005db8:	2b50      	cmp	r3, #80	; 0x50
 8005dba:	d873      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	d058      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x13a>
 8005dc0:	2b40      	cmp	r3, #64	; 0x40
 8005dc2:	d86f      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc4:	2b30      	cmp	r3, #48	; 0x30
 8005dc6:	d064      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc8:	2b30      	cmp	r3, #48	; 0x30
 8005dca:	d86b      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d060      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x15a>
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d867      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d05c      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x15a>
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d05a      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ddc:	e062      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6899      	ldr	r1, [r3, #8]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f000 faf1 	bl	80063d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	609a      	str	r2, [r3, #8]
      break;
 8005e0a:	e04f      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	6899      	ldr	r1, [r3, #8]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f000 fada 	bl	80063d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e2e:	609a      	str	r2, [r3, #8]
      break;
 8005e30:	e03c      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6859      	ldr	r1, [r3, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f000 fa4e 	bl	80062e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2150      	movs	r1, #80	; 0x50
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 faa7 	bl	800639e <TIM_ITRx_SetConfig>
      break;
 8005e50:	e02c      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6859      	ldr	r1, [r3, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f000 fa6d 	bl	800633e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2160      	movs	r1, #96	; 0x60
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fa97 	bl	800639e <TIM_ITRx_SetConfig>
      break;
 8005e70:	e01c      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	6859      	ldr	r1, [r3, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f000 fa2e 	bl	80062e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2140      	movs	r1, #64	; 0x40
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fa87 	bl	800639e <TIM_ITRx_SetConfig>
      break;
 8005e90:	e00c      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f000 fa7e 	bl	800639e <TIM_ITRx_SetConfig>
      break;
 8005ea2:	e003      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea8:	e000      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a34      	ldr	r2, [pc, #208]	; (8005fac <TIM_Base_SetConfig+0xe4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00f      	beq.n	8005f00 <TIM_Base_SetConfig+0x38>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee6:	d00b      	beq.n	8005f00 <TIM_Base_SetConfig+0x38>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a31      	ldr	r2, [pc, #196]	; (8005fb0 <TIM_Base_SetConfig+0xe8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d007      	beq.n	8005f00 <TIM_Base_SetConfig+0x38>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a30      	ldr	r2, [pc, #192]	; (8005fb4 <TIM_Base_SetConfig+0xec>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_Base_SetConfig+0x38>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a2f      	ldr	r2, [pc, #188]	; (8005fb8 <TIM_Base_SetConfig+0xf0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d108      	bne.n	8005f12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a25      	ldr	r2, [pc, #148]	; (8005fac <TIM_Base_SetConfig+0xe4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d01b      	beq.n	8005f52 <TIM_Base_SetConfig+0x8a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f20:	d017      	beq.n	8005f52 <TIM_Base_SetConfig+0x8a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a22      	ldr	r2, [pc, #136]	; (8005fb0 <TIM_Base_SetConfig+0xe8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d013      	beq.n	8005f52 <TIM_Base_SetConfig+0x8a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a21      	ldr	r2, [pc, #132]	; (8005fb4 <TIM_Base_SetConfig+0xec>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00f      	beq.n	8005f52 <TIM_Base_SetConfig+0x8a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a20      	ldr	r2, [pc, #128]	; (8005fb8 <TIM_Base_SetConfig+0xf0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00b      	beq.n	8005f52 <TIM_Base_SetConfig+0x8a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a1f      	ldr	r2, [pc, #124]	; (8005fbc <TIM_Base_SetConfig+0xf4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d007      	beq.n	8005f52 <TIM_Base_SetConfig+0x8a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1e      	ldr	r2, [pc, #120]	; (8005fc0 <TIM_Base_SetConfig+0xf8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d003      	beq.n	8005f52 <TIM_Base_SetConfig+0x8a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <TIM_Base_SetConfig+0xfc>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d108      	bne.n	8005f64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a08      	ldr	r2, [pc, #32]	; (8005fac <TIM_Base_SetConfig+0xe4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d103      	bne.n	8005f98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	615a      	str	r2, [r3, #20]
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40000400 	.word	0x40000400
 8005fb4:	40000800 	.word	0x40000800
 8005fb8:	40000c00 	.word	0x40000c00
 8005fbc:	40014000 	.word	0x40014000
 8005fc0:	40014400 	.word	0x40014400
 8005fc4:	40014800 	.word	0x40014800

08005fc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	f023 0201 	bic.w	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f023 0302 	bic.w	r3, r3, #2
 8006010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a1c      	ldr	r2, [pc, #112]	; (8006090 <TIM_OC1_SetConfig+0xc8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d10c      	bne.n	800603e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 0308 	bic.w	r3, r3, #8
 800602a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f023 0304 	bic.w	r3, r3, #4
 800603c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a13      	ldr	r2, [pc, #76]	; (8006090 <TIM_OC1_SetConfig+0xc8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d111      	bne.n	800606a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800604c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	621a      	str	r2, [r3, #32]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	40010000 	.word	0x40010000

08006094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f023 0210 	bic.w	r2, r3, #16
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f023 0320 	bic.w	r3, r3, #32
 80060de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a1e      	ldr	r2, [pc, #120]	; (8006168 <TIM_OC2_SetConfig+0xd4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d10d      	bne.n	8006110 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800610e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a15      	ldr	r2, [pc, #84]	; (8006168 <TIM_OC2_SetConfig+0xd4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d113      	bne.n	8006140 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800611e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	621a      	str	r2, [r3, #32]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40010000 	.word	0x40010000

0800616c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0303 	bic.w	r3, r3, #3
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1d      	ldr	r2, [pc, #116]	; (800623c <TIM_OC3_SetConfig+0xd0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d10d      	bne.n	80061e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	4313      	orrs	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a14      	ldr	r2, [pc, #80]	; (800623c <TIM_OC3_SetConfig+0xd0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d113      	bne.n	8006216 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	621a      	str	r2, [r3, #32]
}
 8006230:	bf00      	nop
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	40010000 	.word	0x40010000

08006240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800628a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	031b      	lsls	r3, r3, #12
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a10      	ldr	r2, [pc, #64]	; (80062dc <TIM_OC4_SetConfig+0x9c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d109      	bne.n	80062b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	019b      	lsls	r3, r3, #6
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	621a      	str	r2, [r3, #32]
}
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	40010000 	.word	0x40010000

080062e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f023 0201 	bic.w	r2, r3, #1
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800630a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f023 030a 	bic.w	r3, r3, #10
 800631c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800633e:	b480      	push	{r7}
 8006340:	b087      	sub	sp, #28
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f023 0210 	bic.w	r2, r3, #16
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	031b      	lsls	r3, r3, #12
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800637a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f043 0307 	orr.w	r3, r3, #7
 80063c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	609a      	str	r2, [r3, #8]
}
 80063c8:	bf00      	nop
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	021a      	lsls	r2, r3, #8
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	431a      	orrs	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	609a      	str	r2, [r3, #8]
}
 8006408:	bf00      	nop
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f003 031f 	and.w	r3, r3, #31
 8006426:	2201      	movs	r2, #1
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a1a      	ldr	r2, [r3, #32]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	43db      	mvns	r3, r3
 8006436:	401a      	ands	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a1a      	ldr	r2, [r3, #32]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f003 031f 	and.w	r3, r3, #31
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	fa01 f303 	lsl.w	r3, r1, r3
 800644c:	431a      	orrs	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006474:	2302      	movs	r3, #2
 8006476:	e050      	b.n	800651a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1c      	ldr	r2, [pc, #112]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d018      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c4:	d013      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a18      	ldr	r2, [pc, #96]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00e      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a16      	ldr	r2, [pc, #88]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d009      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a15      	ldr	r2, [pc, #84]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d004      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a13      	ldr	r2, [pc, #76]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d10c      	bne.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40010000 	.word	0x40010000
 800652c:	40000400 	.word	0x40000400
 8006530:	40000800 	.word	0x40000800
 8006534:	40000c00 	.word	0x40000c00
 8006538:	40014000 	.word	0x40014000

0800653c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800653c:	b084      	sub	sp, #16
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	f107 001c 	add.w	r0, r7, #28
 800654a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	2b01      	cmp	r3, #1
 8006552:	d122      	bne.n	800659a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800657c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d105      	bne.n	800658e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9c0 	bl	8006914 <USB_CoreReset>
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]
 8006598:	e01a      	b.n	80065d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f9b4 	bl	8006914 <USB_CoreReset>
 80065ac:	4603      	mov	r3, r0
 80065ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	639a      	str	r2, [r3, #56]	; 0x38
 80065c2:	e005      	b.n	80065d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10b      	bne.n	80065ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f043 0206 	orr.w	r2, r3, #6
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f043 0220 	orr.w	r2, r3, #32
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065fa:	b004      	add	sp, #16
 80065fc:	4770      	bx	lr

080065fe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f043 0201 	orr.w	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f023 0201 	bic.w	r2, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	460b      	mov	r3, r1
 800664c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d115      	bne.n	8006690 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006670:	2001      	movs	r0, #1
 8006672:	f7fa fec9 	bl	8001408 <HAL_Delay>
      ms++;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f93a 	bl	80068f6 <USB_GetMode>
 8006682:	4603      	mov	r3, r0
 8006684:	2b01      	cmp	r3, #1
 8006686:	d01e      	beq.n	80066c6 <USB_SetCurrentMode+0x84>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b31      	cmp	r3, #49	; 0x31
 800668c:	d9f0      	bls.n	8006670 <USB_SetCurrentMode+0x2e>
 800668e:	e01a      	b.n	80066c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d115      	bne.n	80066c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066a2:	2001      	movs	r0, #1
 80066a4:	f7fa feb0 	bl	8001408 <HAL_Delay>
      ms++;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3301      	adds	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f921 	bl	80068f6 <USB_GetMode>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <USB_SetCurrentMode+0x84>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b31      	cmp	r3, #49	; 0x31
 80066be:	d9f0      	bls.n	80066a2 <USB_SetCurrentMode+0x60>
 80066c0:	e001      	b.n	80066c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e005      	b.n	80066d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b32      	cmp	r3, #50	; 0x32
 80066ca:	d101      	bne.n	80066d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3301      	adds	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4a13      	ldr	r2, [pc, #76]	; (8006740 <USB_FlushTxFifo+0x64>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d901      	bls.n	80066fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e01b      	b.n	8006734 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	daf2      	bge.n	80066ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	019b      	lsls	r3, r3, #6
 800670c:	f043 0220 	orr.w	r2, r3, #32
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3301      	adds	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4a08      	ldr	r2, [pc, #32]	; (8006740 <USB_FlushTxFifo+0x64>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d901      	bls.n	8006726 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e006      	b.n	8006734 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b20      	cmp	r3, #32
 8006730:	d0f0      	beq.n	8006714 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	00030d40 	.word	0x00030d40

08006744 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3301      	adds	r3, #1
 8006754:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4a11      	ldr	r2, [pc, #68]	; (80067a0 <USB_FlushRxFifo+0x5c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d901      	bls.n	8006762 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e018      	b.n	8006794 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	daf2      	bge.n	8006750 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2210      	movs	r2, #16
 8006772:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3301      	adds	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4a08      	ldr	r2, [pc, #32]	; (80067a0 <USB_FlushRxFifo+0x5c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d901      	bls.n	8006786 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e006      	b.n	8006794 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	2b10      	cmp	r3, #16
 8006790:	d0f0      	beq.n	8006774 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	00030d40 	.word	0x00030d40

080067a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b089      	sub	sp, #36	; 0x24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4611      	mov	r1, r2
 80067b0:	461a      	mov	r2, r3
 80067b2:	460b      	mov	r3, r1
 80067b4:	71fb      	strb	r3, [r7, #7]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80067c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d123      	bne.n	8006812 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067ca:	88bb      	ldrh	r3, [r7, #4]
 80067cc:	3303      	adds	r3, #3
 80067ce:	089b      	lsrs	r3, r3, #2
 80067d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067d2:	2300      	movs	r3, #0
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	e018      	b.n	800680a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	031a      	lsls	r2, r3, #12
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e4:	461a      	mov	r2, r3
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	3301      	adds	r3, #1
 80067f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	3301      	adds	r3, #1
 80067f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	3301      	adds	r3, #1
 80067fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	3301      	adds	r3, #1
 8006802:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	3301      	adds	r3, #1
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	429a      	cmp	r2, r3
 8006810:	d3e2      	bcc.n	80067d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3724      	adds	r7, #36	; 0x24
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006820:	b480      	push	{r7}
 8006822:	b08b      	sub	sp, #44	; 0x2c
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	089b      	lsrs	r3, r3, #2
 800683a:	b29b      	uxth	r3, r3
 800683c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	f003 0303 	and.w	r3, r3, #3
 8006844:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006846:	2300      	movs	r3, #0
 8006848:	623b      	str	r3, [r7, #32]
 800684a:	e014      	b.n	8006876 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	601a      	str	r2, [r3, #0]
    pDest++;
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	3301      	adds	r3, #1
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	3301      	adds	r3, #1
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	3301      	adds	r3, #1
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	3301      	adds	r3, #1
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	3301      	adds	r3, #1
 8006874:	623b      	str	r3, [r7, #32]
 8006876:	6a3a      	ldr	r2, [r7, #32]
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	429a      	cmp	r2, r3
 800687c:	d3e6      	bcc.n	800684c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800687e:	8bfb      	ldrh	r3, [r7, #30]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01e      	beq.n	80068c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688e:	461a      	mov	r2, r3
 8006890:	f107 0310 	add.w	r3, r7, #16
 8006894:	6812      	ldr	r2, [r2, #0]
 8006896:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	fa22 f303 	lsr.w	r3, r2, r3
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	701a      	strb	r2, [r3, #0]
      i++;
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	3301      	adds	r3, #1
 80068ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	3301      	adds	r3, #1
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80068b6:	8bfb      	ldrh	r3, [r7, #30]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80068bc:	8bfb      	ldrh	r3, [r7, #30]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1ea      	bne.n	8006898 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	372c      	adds	r7, #44	; 0x2c
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4013      	ands	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068e8:	68fb      	ldr	r3, [r7, #12]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f003 0301 	and.w	r3, r3, #1
}
 8006906:	4618      	mov	r0, r3
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
	...

08006914 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4a13      	ldr	r2, [pc, #76]	; (8006978 <USB_CoreReset+0x64>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d901      	bls.n	8006932 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e01b      	b.n	800696a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	daf2      	bge.n	8006920 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f043 0201 	orr.w	r2, r3, #1
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4a09      	ldr	r2, [pc, #36]	; (8006978 <USB_CoreReset+0x64>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d901      	bls.n	800695c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e006      	b.n	800696a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b01      	cmp	r3, #1
 8006966:	d0f0      	beq.n	800694a <USB_CoreReset+0x36>

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	00030d40 	.word	0x00030d40

0800697c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800697c:	b084      	sub	sp, #16
 800697e:	b580      	push	{r7, lr}
 8006980:	b086      	sub	sp, #24
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800698a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800699c:	461a      	mov	r2, r3
 800699e:	2300      	movs	r3, #0
 80069a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d018      	beq.n	8006a04 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d10a      	bne.n	80069ee <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069e6:	f043 0304 	orr.w	r3, r3, #4
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	e014      	b.n	8006a18 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069fc:	f023 0304 	bic.w	r3, r3, #4
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	e009      	b.n	8006a18 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a12:	f023 0304 	bic.w	r3, r3, #4
 8006a16:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a18:	2110      	movs	r1, #16
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff fe5e 	bl	80066dc <USB_FlushTxFifo>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff fe8a 	bl	8006744 <USB_FlushRxFifo>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	e015      	b.n	8006a6c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a52:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a60:	461a      	mov	r2, r3
 8006a62:	2300      	movs	r3, #0
 8006a64:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	613b      	str	r3, [r7, #16]
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d3e5      	bcc.n	8006a40 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a80:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <USB_HostInit+0x16c>)
 8006a9a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a13      	ldr	r2, [pc, #76]	; (8006aec <USB_HostInit+0x170>)
 8006aa0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006aa4:	e009      	b.n	8006aba <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2280      	movs	r2, #128	; 0x80
 8006aaa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a10      	ldr	r2, [pc, #64]	; (8006af0 <USB_HostInit+0x174>)
 8006ab0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a0f      	ldr	r2, [pc, #60]	; (8006af4 <USB_HostInit+0x178>)
 8006ab6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d105      	bne.n	8006acc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f043 0210 	orr.w	r2, r3, #16
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699a      	ldr	r2, [r3, #24]
 8006ad0:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <USB_HostInit+0x17c>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ae4:	b004      	add	sp, #16
 8006ae6:	4770      	bx	lr
 8006ae8:	01000200 	.word	0x01000200
 8006aec:	00e00300 	.word	0x00e00300
 8006af0:	00600080 	.word	0x00600080
 8006af4:	004000e0 	.word	0x004000e0
 8006af8:	a3200008 	.word	0xa3200008

08006afc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b1a:	f023 0303 	bic.w	r3, r3, #3
 8006b1e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	68f9      	ldr	r1, [r7, #12]
 8006b30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b34:	4313      	orrs	r3, r2
 8006b36:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d107      	bne.n	8006b4e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b44:	461a      	mov	r2, r3
 8006b46:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b4a:	6053      	str	r3, [r2, #4]
 8006b4c:	e009      	b.n	8006b62 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d106      	bne.n	8006b62 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006b60:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b90:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ba0:	2064      	movs	r0, #100	; 0x64
 8006ba2:	f7fa fc31 	bl	8001408 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bb2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006bb4:	200a      	movs	r0, #10
 8006bb6:	f7fa fc27 	bl	8001408 <HAL_Delay>

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006be8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d109      	bne.n	8006c08 <USB_DriveVbus+0x44>
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d106      	bne.n	8006c08 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c06:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c12:	d109      	bne.n	8006c28 <USB_DriveVbus+0x64>
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c26:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	0c5b      	lsrs	r3, r3, #17
 8006c54:	f003 0303 	and.w	r3, r3, #3
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	b29b      	uxth	r3, r3
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
	...

08006c88 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	4608      	mov	r0, r1
 8006c92:	4611      	mov	r1, r2
 8006c94:	461a      	mov	r2, r3
 8006c96:	4603      	mov	r3, r0
 8006c98:	70fb      	strb	r3, [r7, #3]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	70bb      	strb	r3, [r7, #2]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cbc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006cbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d87e      	bhi.n	8006dc4 <USB_HC_Init+0x13c>
 8006cc6:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <USB_HC_Init+0x44>)
 8006cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ccc:	08006cdd 	.word	0x08006cdd
 8006cd0:	08006d87 	.word	0x08006d87
 8006cd4:	08006cdd 	.word	0x08006cdd
 8006cd8:	08006d49 	.word	0x08006d49
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f240 439d 	movw	r3, #1181	; 0x49d
 8006cee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006cf0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	da10      	bge.n	8006d1a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	78fa      	ldrb	r2, [r7, #3]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d16:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006d18:	e057      	b.n	8006dca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d051      	beq.n	8006dca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	78fa      	ldrb	r2, [r7, #3]
 8006d36:	0151      	lsls	r1, r2, #5
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	440a      	add	r2, r1
 8006d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d44:	60d3      	str	r3, [r2, #12]
      break;
 8006d46:	e040      	b.n	8006dca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d48:	78fb      	ldrb	r3, [r7, #3]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d54:	461a      	mov	r2, r3
 8006d56:	f240 639d 	movw	r3, #1693	; 0x69d
 8006d5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	da34      	bge.n	8006dce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d82:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006d84:	e023      	b.n	8006dce <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d92:	461a      	mov	r2, r3
 8006d94:	f240 2325 	movw	r3, #549	; 0x225
 8006d98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da17      	bge.n	8006dd2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dbc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006dc0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006dc2:	e006      	b.n	8006dd2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	77fb      	strb	r3, [r7, #31]
      break;
 8006dc8:	e004      	b.n	8006dd4 <USB_HC_Init+0x14c>
      break;
 8006dca:	bf00      	nop
 8006dcc:	e002      	b.n	8006dd4 <USB_HC_Init+0x14c>
      break;
 8006dce:	bf00      	nop
 8006dd0:	e000      	b.n	8006dd4 <USB_HC_Init+0x14c>
      break;
 8006dd2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dee:	f043 0302 	orr.w	r3, r3, #2
 8006df2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dfa:	699a      	ldr	r2, [r3, #24]
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	2101      	movs	r1, #1
 8006e04:	fa01 f303 	lsl.w	r3, r1, r3
 8006e08:	6939      	ldr	r1, [r7, #16]
 8006e0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006e1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	da03      	bge.n	8006e2e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2a:	61bb      	str	r3, [r7, #24]
 8006e2c:	e001      	b.n	8006e32 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff feff 	bl	8006c36 <USB_GetHostSpeed>
 8006e38:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006e3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d106      	bne.n	8006e50 <USB_HC_Init+0x1c8>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d003      	beq.n	8006e50 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	e001      	b.n	8006e54 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e54:	787b      	ldrb	r3, [r7, #1]
 8006e56:	059b      	lsls	r3, r3, #22
 8006e58:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e5c:	78bb      	ldrb	r3, [r7, #2]
 8006e5e:	02db      	lsls	r3, r3, #11
 8006e60:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e64:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e6a:	049b      	lsls	r3, r3, #18
 8006e6c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e72:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e78:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	0159      	lsls	r1, r3, #5
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	440b      	add	r3, r1
 8006e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e90:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006e92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d003      	beq.n	8006ea2 <USB_HC_Init+0x21a>
 8006e9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d10f      	bne.n	8006ec2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006ea2:	78fb      	ldrb	r3, [r7, #3]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	78fa      	ldrb	r2, [r7, #3]
 8006eb2:	0151      	lsls	r1, r2, #5
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	440a      	add	r2, r1
 8006eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ebc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ec0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006ec2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3720      	adds	r7, #32
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08c      	sub	sp, #48	; 0x30
 8006ed0:	af02      	add	r7, sp, #8
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ee8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d02d      	beq.n	8006f52 <USB_HC_StartXfer+0x86>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	791b      	ldrb	r3, [r3, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d129      	bne.n	8006f52 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d117      	bne.n	8006f34 <USB_HC_StartXfer+0x68>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	79db      	ldrb	r3, [r3, #7]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <USB_HC_StartXfer+0x48>
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	79db      	ldrb	r3, [r3, #7]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d10f      	bne.n	8006f34 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	6a3a      	ldr	r2, [r7, #32]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f32:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006f34:	79fb      	ldrb	r3, [r7, #7]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10b      	bne.n	8006f52 <USB_HC_StartXfer+0x86>
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	795b      	ldrb	r3, [r3, #5]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d107      	bne.n	8006f52 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	785b      	ldrb	r3, [r3, #1]
 8006f46:	4619      	mov	r1, r3
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 fa0f 	bl	800736c <USB_DoPing>
      return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e0f8      	b.n	8007144 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d018      	beq.n	8006f8c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	8912      	ldrh	r2, [r2, #8]
 8006f62:	4413      	add	r3, r2
 8006f64:	3b01      	subs	r3, #1
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	8912      	ldrh	r2, [r2, #8]
 8006f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f6e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006f70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f72:	8b7b      	ldrh	r3, [r7, #26]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d90b      	bls.n	8006f90 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006f78:	8b7b      	ldrh	r3, [r7, #26]
 8006f7a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	8912      	ldrh	r2, [r2, #8]
 8006f82:	fb03 f202 	mul.w	r2, r3, r2
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	611a      	str	r2, [r3, #16]
 8006f8a:	e001      	b.n	8006f90 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	78db      	ldrb	r3, [r3, #3]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d007      	beq.n	8006fa8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	8912      	ldrh	r2, [r2, #8]
 8006f9e:	fb03 f202 	mul.w	r2, r3, r2
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	611a      	str	r2, [r3, #16]
 8006fa6:	e003      	b.n	8006fb0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	695a      	ldr	r2, [r3, #20]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006fba:	04d9      	lsls	r1, r3, #19
 8006fbc:	4b63      	ldr	r3, [pc, #396]	; (800714c <USB_HC_StartXfer+0x280>)
 8006fbe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fc0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	7a9b      	ldrb	r3, [r3, #10]
 8006fc6:	075b      	lsls	r3, r3, #29
 8006fc8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fcc:	69f9      	ldr	r1, [r7, #28]
 8006fce:	0148      	lsls	r0, r1, #5
 8006fd0:	6a39      	ldr	r1, [r7, #32]
 8006fd2:	4401      	add	r1, r0
 8006fd4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fd8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fda:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d009      	beq.n	8006ff6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	68d9      	ldr	r1, [r3, #12]
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff2:	460a      	mov	r2, r1
 8006ff4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	bf0c      	ite	eq
 8007006:	2301      	moveq	r3, #1
 8007008:	2300      	movne	r3, #0
 800700a:	b2db      	uxtb	r3, r3
 800700c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	4413      	add	r3, r2
 8007016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	6a3a      	ldr	r2, [r7, #32]
 8007022:	440a      	add	r2, r1
 8007024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007028:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800702c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	4413      	add	r3, r2
 8007036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	7e7b      	ldrb	r3, [r7, #25]
 800703e:	075b      	lsls	r3, r3, #29
 8007040:	69f9      	ldr	r1, [r7, #28]
 8007042:	0148      	lsls	r0, r1, #5
 8007044:	6a39      	ldr	r1, [r7, #32]
 8007046:	4401      	add	r1, r0
 8007048:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800704c:	4313      	orrs	r3, r2
 800704e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	4413      	add	r3, r2
 8007058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007066:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	78db      	ldrb	r3, [r3, #3]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d004      	beq.n	800707a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	e003      	b.n	8007082 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007080:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007088:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	4413      	add	r3, r2
 8007092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007096:	461a      	mov	r2, r3
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e04e      	b.n	8007144 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	78db      	ldrb	r3, [r3, #3]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d149      	bne.n	8007142 <USB_HC_StartXfer+0x276>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d045      	beq.n	8007142 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	79db      	ldrb	r3, [r3, #7]
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d830      	bhi.n	8007120 <USB_HC_StartXfer+0x254>
 80070be:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <USB_HC_StartXfer+0x1f8>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	080070f9 	.word	0x080070f9
 80070cc:	080070d5 	.word	0x080070d5
 80070d0:	080070f9 	.word	0x080070f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	3303      	adds	r3, #3
 80070da:	089b      	lsrs	r3, r3, #2
 80070dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80070de:	8afa      	ldrh	r2, [r7, #22]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d91c      	bls.n	8007124 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f043 0220 	orr.w	r2, r3, #32
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80070f6:	e015      	b.n	8007124 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	3303      	adds	r3, #3
 80070fe:	089b      	lsrs	r3, r3, #2
 8007100:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007102:	8afa      	ldrh	r2, [r7, #22]
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	b29b      	uxth	r3, r3
 800710e:	429a      	cmp	r2, r3
 8007110:	d90a      	bls.n	8007128 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	619a      	str	r2, [r3, #24]
        }
        break;
 800711e:	e003      	b.n	8007128 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007120:	bf00      	nop
 8007122:	e002      	b.n	800712a <USB_HC_StartXfer+0x25e>
        break;
 8007124:	bf00      	nop
 8007126:	e000      	b.n	800712a <USB_HC_StartXfer+0x25e>
        break;
 8007128:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	68d9      	ldr	r1, [r3, #12]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	785a      	ldrb	r2, [r3, #1]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	b29b      	uxth	r3, r3
 8007138:	2000      	movs	r0, #0
 800713a:	9000      	str	r0, [sp, #0]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff fb31 	bl	80067a4 <USB_WritePacket>
  }

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3728      	adds	r7, #40	; 0x28
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	1ff80000 	.word	0x1ff80000

08007150 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	b29b      	uxth	r3, r3
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007172:	b480      	push	{r7}
 8007174:	b089      	sub	sp, #36	; 0x24
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	460b      	mov	r3, r1
 800717c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007182:	78fb      	ldrb	r3, [r7, #3]
 8007184:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	4413      	add	r3, r2
 8007192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	0c9b      	lsrs	r3, r3, #18
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	0fdb      	lsrs	r3, r3, #31
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b20      	cmp	r3, #32
 80071c0:	d104      	bne.n	80071cc <USB_HC_Halt+0x5a>
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	e0c8      	b.n	800735e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <USB_HC_Halt+0x66>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d163      	bne.n	80072a0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 0320 	and.w	r3, r3, #32
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 80ab 	bne.w	800735c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d133      	bne.n	800727a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	4413      	add	r3, r2
 800721a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	440a      	add	r2, r1
 8007228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800722c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007230:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	0151      	lsls	r1, r2, #5
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	440a      	add	r2, r1
 8007248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800724c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007250:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800725e:	d81d      	bhi.n	800729c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	4413      	add	r3, r2
 8007268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007276:	d0ec      	beq.n	8007252 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007278:	e070      	b.n	800735c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	440a      	add	r2, r1
 8007290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007298:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800729a:	e05f      	b.n	800735c <USB_HC_Halt+0x1ea>
            break;
 800729c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800729e:	e05d      	b.n	800735c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	0151      	lsls	r1, r2, #5
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	440a      	add	r2, r1
 80072b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d133      	bne.n	8007338 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	0151      	lsls	r1, r2, #5
 80072e2:	69fa      	ldr	r2, [r7, #28]
 80072e4:	440a      	add	r2, r1
 80072e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	440a      	add	r2, r1
 8007306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800730a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800730e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800731c:	d81d      	bhi.n	800735a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007334:	d0ec      	beq.n	8007310 <USB_HC_Halt+0x19e>
 8007336:	e011      	b.n	800735c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	4413      	add	r3, r2
 8007340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	0151      	lsls	r1, r2, #5
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	440a      	add	r2, r1
 800734e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007352:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	e000      	b.n	800735c <USB_HC_Halt+0x1ea>
          break;
 800735a:	bf00      	nop
    }
  }

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3724      	adds	r7, #36	; 0x24
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
	...

0800736c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800737c:	78fb      	ldrb	r3, [r7, #3]
 800737e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007380:	2301      	movs	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	04da      	lsls	r2, r3, #19
 8007388:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <USB_DoPing+0x74>)
 800738a:	4013      	ands	r3, r2
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	440a      	add	r2, r1
 8007394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800739c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ca:	461a      	mov	r2, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	1ff80000 	.word	0x1ff80000

080073e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff f911 	bl	8006620 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073fe:	2110      	movs	r1, #16
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff f96b 	bl	80066dc <USB_FlushTxFifo>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7ff f997 	bl	8006744 <USB_FlushRxFifo>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007420:	2300      	movs	r3, #0
 8007422:	61bb      	str	r3, [r7, #24]
 8007424:	e01f      	b.n	8007466 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	4413      	add	r3, r2
 800742e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800743c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007444:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800744c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	4413      	add	r3, r2
 8007456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745a:	461a      	mov	r2, r3
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	3301      	adds	r3, #1
 8007464:	61bb      	str	r3, [r7, #24]
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b0f      	cmp	r3, #15
 800746a:	d9dc      	bls.n	8007426 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800746c:	2300      	movs	r3, #0
 800746e:	61bb      	str	r3, [r7, #24]
 8007470:	e034      	b.n	80074dc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	4413      	add	r3, r2
 800747a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007488:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007490:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007498:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a6:	461a      	mov	r2, r3
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b8:	d80c      	bhi.n	80074d4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d0:	d0ec      	beq.n	80074ac <USB_StopHost+0xc8>
 80074d2:	e000      	b.n	80074d6 <USB_StopHost+0xf2>
        break;
 80074d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	3301      	adds	r3, #1
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	2b0f      	cmp	r3, #15
 80074e0:	d9c7      	bls.n	8007472 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074e8:	461a      	mov	r2, r3
 80074ea:	f04f 33ff 	mov.w	r3, #4294967295
 80074ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f04f 32ff 	mov.w	r2, #4294967295
 80074f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff f880 	bl	80065fe <USB_EnableGlobalInt>

  return ret;
 80074fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3720      	adds	r7, #32
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007508:	b590      	push	{r4, r7, lr}
 800750a:	b089      	sub	sp, #36	; 0x24
 800750c:	af04      	add	r7, sp, #16
 800750e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007510:	2301      	movs	r3, #1
 8007512:	2202      	movs	r2, #2
 8007514:	2102      	movs	r1, #2
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fc66 	bl	8007de8 <USBH_FindInterface>
 800751c:	4603      	mov	r3, r0
 800751e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	2bff      	cmp	r3, #255	; 0xff
 8007524:	d002      	beq.n	800752c <USBH_CDC_InterfaceInit+0x24>
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d901      	bls.n	8007530 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800752c:	2302      	movs	r3, #2
 800752e:	e13d      	b.n	80077ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fc3b 	bl	8007db0 <USBH_SelectInterface>
 800753a:	4603      	mov	r3, r0
 800753c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007544:	2302      	movs	r3, #2
 8007546:	e131      	b.n	80077ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800754e:	2050      	movs	r0, #80	; 0x50
 8007550:	f002 fafa 	bl	8009b48 <malloc>
 8007554:	4603      	mov	r3, r0
 8007556:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007568:	2302      	movs	r3, #2
 800756a:	e11f      	b.n	80077ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800756c:	2250      	movs	r2, #80	; 0x50
 800756e:	2100      	movs	r1, #0
 8007570:	68b8      	ldr	r0, [r7, #8]
 8007572:	f002 faf9 	bl	8009b68 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	211a      	movs	r1, #26
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	4413      	add	r3, r2
 8007582:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	b25b      	sxtb	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	da15      	bge.n	80075ba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	211a      	movs	r1, #26
 8007594:	fb01 f303 	mul.w	r3, r1, r3
 8007598:	4413      	add	r3, r2
 800759a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800759e:	781a      	ldrb	r2, [r3, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	211a      	movs	r1, #26
 80075aa:	fb01 f303 	mul.w	r3, r1, r3
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075b4:	881a      	ldrh	r2, [r3, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 ff2c 	bl	800941e <USBH_AllocPipe>
 80075c6:	4603      	mov	r3, r0
 80075c8:	461a      	mov	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	7819      	ldrb	r1, [r3, #0]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	7858      	ldrb	r0, [r3, #1]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	8952      	ldrh	r2, [r2, #10]
 80075e6:	9202      	str	r2, [sp, #8]
 80075e8:	2203      	movs	r2, #3
 80075ea:	9201      	str	r2, [sp, #4]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	4623      	mov	r3, r4
 80075f0:	4602      	mov	r2, r0
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f001 fee4 	bl	80093c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2200      	movs	r2, #0
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f002 f9f3 	bl	80099ec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007606:	2300      	movs	r3, #0
 8007608:	2200      	movs	r2, #0
 800760a:	210a      	movs	r1, #10
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fbeb 	bl	8007de8 <USBH_FindInterface>
 8007612:	4603      	mov	r3, r0
 8007614:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	2bff      	cmp	r3, #255	; 0xff
 800761a:	d002      	beq.n	8007622 <USBH_CDC_InterfaceInit+0x11a>
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d901      	bls.n	8007626 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007622:	2302      	movs	r3, #2
 8007624:	e0c2      	b.n	80077ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007626:	7bfb      	ldrb	r3, [r7, #15]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	211a      	movs	r1, #26
 800762c:	fb01 f303 	mul.w	r3, r1, r3
 8007630:	4413      	add	r3, r2
 8007632:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	b25b      	sxtb	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	da16      	bge.n	800766c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	211a      	movs	r1, #26
 8007644:	fb01 f303 	mul.w	r3, r1, r3
 8007648:	4413      	add	r3, r2
 800764a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800764e:	781a      	ldrb	r2, [r3, #0]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	211a      	movs	r1, #26
 800765a:	fb01 f303 	mul.w	r3, r1, r3
 800765e:	4413      	add	r3, r2
 8007660:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007664:	881a      	ldrh	r2, [r3, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	835a      	strh	r2, [r3, #26]
 800766a:	e015      	b.n	8007698 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	211a      	movs	r1, #26
 8007672:	fb01 f303 	mul.w	r3, r1, r3
 8007676:	4413      	add	r3, r2
 8007678:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800767c:	781a      	ldrb	r2, [r3, #0]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	211a      	movs	r1, #26
 8007688:	fb01 f303 	mul.w	r3, r1, r3
 800768c:	4413      	add	r3, r2
 800768e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007692:	881a      	ldrh	r2, [r3, #0]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	211a      	movs	r1, #26
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	4413      	add	r3, r2
 80076a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	b25b      	sxtb	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	da16      	bge.n	80076de <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	211a      	movs	r1, #26
 80076b6:	fb01 f303 	mul.w	r3, r1, r3
 80076ba:	4413      	add	r3, r2
 80076bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076c0:	781a      	ldrb	r2, [r3, #0]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	211a      	movs	r1, #26
 80076cc:	fb01 f303 	mul.w	r3, r1, r3
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076d6:	881a      	ldrh	r2, [r3, #0]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	835a      	strh	r2, [r3, #26]
 80076dc:	e015      	b.n	800770a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	211a      	movs	r1, #26
 80076e4:	fb01 f303 	mul.w	r3, r1, r3
 80076e8:	4413      	add	r3, r2
 80076ea:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076ee:	781a      	ldrb	r2, [r3, #0]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	211a      	movs	r1, #26
 80076fa:	fb01 f303 	mul.w	r3, r1, r3
 80076fe:	4413      	add	r3, r2
 8007700:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007704:	881a      	ldrh	r2, [r3, #0]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	7b9b      	ldrb	r3, [r3, #14]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fe84 	bl	800941e <USBH_AllocPipe>
 8007716:	4603      	mov	r3, r0
 8007718:	461a      	mov	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	7bdb      	ldrb	r3, [r3, #15]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 fe7a 	bl	800941e <USBH_AllocPipe>
 800772a:	4603      	mov	r3, r0
 800772c:	461a      	mov	r2, r3
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	7b59      	ldrb	r1, [r3, #13]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	7b98      	ldrb	r0, [r3, #14]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	8b12      	ldrh	r2, [r2, #24]
 800774a:	9202      	str	r2, [sp, #8]
 800774c:	2202      	movs	r2, #2
 800774e:	9201      	str	r2, [sp, #4]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	4623      	mov	r3, r4
 8007754:	4602      	mov	r2, r0
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fe32 	bl	80093c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	7b19      	ldrb	r1, [r3, #12]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	7bd8      	ldrb	r0, [r3, #15]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	8b52      	ldrh	r2, [r2, #26]
 8007774:	9202      	str	r2, [sp, #8]
 8007776:	2202      	movs	r2, #2
 8007778:	9201      	str	r2, [sp, #4]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	4623      	mov	r3, r4
 800777e:	4602      	mov	r2, r0
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fe1d 	bl	80093c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	7b5b      	ldrb	r3, [r3, #13]
 8007792:	2200      	movs	r2, #0
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f002 f928 	bl	80099ec <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	7b1b      	ldrb	r3, [r3, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f002 f921 	bl	80099ec <USBH_LL_SetToggle>

  return USBH_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd90      	pop	{r4, r7, pc}

080077b4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00e      	beq.n	80077ec <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 fe12 	bl	80093fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 fe3d 	bl	8009460 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	7b1b      	ldrb	r3, [r3, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00e      	beq.n	8007812 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	7b1b      	ldrb	r3, [r3, #12]
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 fdff 	bl	80093fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	7b1b      	ldrb	r3, [r3, #12]
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 fe2a 	bl	8009460 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	7b5b      	ldrb	r3, [r3, #13]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00e      	beq.n	8007838 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	7b5b      	ldrb	r3, [r3, #13]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f001 fdec 	bl	80093fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	7b5b      	ldrb	r3, [r3, #13]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 fe17 	bl	8009460 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800783e:	69db      	ldr	r3, [r3, #28]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	4618      	mov	r0, r3
 800784e:	f002 f983 	bl	8009b58 <free>
    phost->pActiveClass->pData = 0U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007858:	2200      	movs	r2, #0
 800785a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3340      	adds	r3, #64	; 0x40
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f8b1 	bl	80079e6 <GetLineCoding>
 8007884:	4603      	mov	r3, r0
 8007886:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d105      	bne.n	800789a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007894:	2102      	movs	r1, #2
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800789a:	7afb      	ldrb	r3, [r7, #11]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80078ac:	2301      	movs	r3, #1
 80078ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d877      	bhi.n	80079b8 <USBH_CDC_Process+0x114>
 80078c8:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <USBH_CDC_Process+0x2c>)
 80078ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ce:	bf00      	nop
 80078d0:	080078e5 	.word	0x080078e5
 80078d4:	080078eb 	.word	0x080078eb
 80078d8:	0800791b 	.word	0x0800791b
 80078dc:	0800798f 	.word	0x0800798f
 80078e0:	0800799d 	.word	0x0800799d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73fb      	strb	r3, [r7, #15]
      break;
 80078e8:	e06d      	b.n	80079c6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f897 	bl	8007a24 <SetLineCoding>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d104      	bne.n	800790a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007908:	e058      	b.n	80079bc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d055      	beq.n	80079bc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2204      	movs	r2, #4
 8007914:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007918:	e050      	b.n	80079bc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	3340      	adds	r3, #64	; 0x40
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f860 	bl	80079e6 <GetLineCoding>
 8007926:	4603      	mov	r3, r0
 8007928:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d126      	bne.n	800797e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007942:	791b      	ldrb	r3, [r3, #4]
 8007944:	429a      	cmp	r2, r3
 8007946:	d13b      	bne.n	80079c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007952:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007954:	429a      	cmp	r2, r3
 8007956:	d133      	bne.n	80079c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007962:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007964:	429a      	cmp	r2, r3
 8007966:	d12b      	bne.n	80079c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007970:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007972:	429a      	cmp	r2, r3
 8007974:	d124      	bne.n	80079c0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f958 	bl	8007c2c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800797c:	e020      	b.n	80079c0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d01d      	beq.n	80079c0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2204      	movs	r2, #4
 8007988:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800798c:	e018      	b.n	80079c0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f867 	bl	8007a62 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f8da 	bl	8007b4e <CDC_ProcessReception>
      break;
 800799a:	e014      	b.n	80079c6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800799c:	2100      	movs	r1, #0
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 ffef 	bl	8008982 <USBH_ClrFeature>
 80079a4:	4603      	mov	r3, r0
 80079a6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80079b6:	e005      	b.n	80079c4 <USBH_CDC_Process+0x120>

    default:
      break;
 80079b8:	bf00      	nop
 80079ba:	e004      	b.n	80079c6 <USBH_CDC_Process+0x122>
      break;
 80079bc:	bf00      	nop
 80079be:	e002      	b.n	80079c6 <USBH_CDC_Process+0x122>
      break;
 80079c0:	bf00      	nop
 80079c2:	e000      	b.n	80079c6 <USBH_CDC_Process+0x122>
      break;
 80079c4:	bf00      	nop

  }

  return status;
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	22a1      	movs	r2, #161	; 0xa1
 80079f4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2221      	movs	r2, #33	; 0x21
 80079fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2207      	movs	r2, #7
 8007a0c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2207      	movs	r2, #7
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 fa81 	bl	8008f1c <USBH_CtlReq>
 8007a1a:	4603      	mov	r3, r0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2221      	movs	r2, #33	; 0x21
 8007a32:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2220      	movs	r2, #32
 8007a38:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2207      	movs	r2, #7
 8007a4a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2207      	movs	r2, #7
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 fa62 	bl	8008f1c <USBH_CtlReq>
 8007a58:	4603      	mov	r3, r0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b086      	sub	sp, #24
 8007a66:	af02      	add	r7, sp, #8
 8007a68:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a74:	2300      	movs	r3, #0
 8007a76:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d002      	beq.n	8007a88 <CDC_ProcessTransmission+0x26>
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d023      	beq.n	8007ace <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007a86:	e05e      	b.n	8007b46 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	8b12      	ldrh	r2, [r2, #24]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d90b      	bls.n	8007aac <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	69d9      	ldr	r1, [r3, #28]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8b1a      	ldrh	r2, [r3, #24]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	7b5b      	ldrb	r3, [r3, #13]
 8007aa0:	2001      	movs	r0, #1
 8007aa2:	9000      	str	r0, [sp, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 fc48 	bl	800933a <USBH_BulkSendData>
 8007aaa:	e00b      	b.n	8007ac4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	7b5b      	ldrb	r3, [r3, #13]
 8007aba:	2001      	movs	r0, #1
 8007abc:	9000      	str	r0, [sp, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 fc3b 	bl	800933a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007acc:	e03b      	b.n	8007b46 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	7b5b      	ldrb	r3, [r3, #13]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 ff5f 	bl	8009998 <USBH_LL_GetURBState>
 8007ada:	4603      	mov	r3, r0
 8007adc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007ade:	7afb      	ldrb	r3, [r7, #11]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d128      	bne.n	8007b36 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	8b12      	ldrh	r2, [r2, #24]
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d90e      	bls.n	8007b0e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	8b12      	ldrh	r2, [r2, #24]
 8007af8:	1a9a      	subs	r2, r3, r2
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	8b12      	ldrh	r2, [r2, #24]
 8007b06:	441a      	add	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	61da      	str	r2, [r3, #28]
 8007b0c:	e002      	b.n	8007b14 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d004      	beq.n	8007b26 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b24:	e00e      	b.n	8007b44 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f868 	bl	8007c04 <USBH_CDC_TransmitCallback>
      break;
 8007b34:	e006      	b.n	8007b44 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007b36:	7afb      	ldrb	r3, [r7, #11]
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d103      	bne.n	8007b44 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b44:	bf00      	nop
  }
}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b086      	sub	sp, #24
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b60:	2300      	movs	r3, #0
 8007b62:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d002      	beq.n	8007b74 <CDC_ProcessReception+0x26>
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d00e      	beq.n	8007b90 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007b72:	e043      	b.n	8007bfc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	6a19      	ldr	r1, [r3, #32]
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	8b5a      	ldrh	r2, [r3, #26]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	7b1b      	ldrb	r3, [r3, #12]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 fbff 	bl	8009384 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2204      	movs	r2, #4
 8007b8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b8e:	e035      	b.n	8007bfc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	7b1b      	ldrb	r3, [r3, #12]
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f001 fefe 	bl	8009998 <USBH_LL_GetURBState>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007ba0:	7cfb      	ldrb	r3, [r7, #19]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d129      	bne.n	8007bfa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	7b1b      	ldrb	r3, [r3, #12]
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f001 fe61 	bl	8009874 <USBH_LL_GetLastXferSize>
 8007bb2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d016      	beq.n	8007bec <CDC_ProcessReception+0x9e>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	8b5b      	ldrh	r3, [r3, #26]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d910      	bls.n	8007bec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	1ad2      	subs	r2, r2, r3
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	6a1a      	ldr	r2, [r3, #32]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	441a      	add	r2, r3
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2203      	movs	r2, #3
 8007be6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007bea:	e006      	b.n	8007bfa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f80f 	bl	8007c18 <USBH_CDC_ReceiveCallback>
      break;
 8007bfa:	bf00      	nop
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007c54:	2302      	movs	r3, #2
 8007c56:	e029      	b.n	8007cac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	79fa      	ldrb	r2, [r7, #7]
 8007c5c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 f81f 	bl	8007cb4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f001 fd31 	bl	800970c <USBH_LL_Init>

  return USBH_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	e009      	b.n	8007cda <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	33e0      	adds	r3, #224	; 0xe0
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b0f      	cmp	r3, #15
 8007cde:	d9f2      	bls.n	8007cc6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	e009      	b.n	8007cfa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d00:	d3f1      	bcc.n	8007ce6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2240      	movs	r2, #64	; 0x40
 8007d26:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d016      	beq.n	8007d9e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10e      	bne.n	8007d98 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d80:	1c59      	adds	r1, r3, #1
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	33de      	adds	r3, #222	; 0xde
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]
 8007d96:	e004      	b.n	8007da2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007d98:	2302      	movs	r3, #2
 8007d9a:	73fb      	strb	r3, [r7, #15]
 8007d9c:	e001      	b.n	8007da2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007d9e:	2302      	movs	r3, #2
 8007da0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007dc6:	78fa      	ldrb	r2, [r7, #3]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d204      	bcs.n	8007dd6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	78fa      	ldrb	r2, [r7, #3]
 8007dd0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007dd4:	e001      	b.n	8007dda <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	4608      	mov	r0, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	461a      	mov	r2, r3
 8007df6:	4603      	mov	r3, r0
 8007df8:	70fb      	strb	r3, [r7, #3]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70bb      	strb	r3, [r7, #2]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e10:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e12:	e025      	b.n	8007e60 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	221a      	movs	r2, #26
 8007e18:	fb02 f303 	mul.w	r3, r2, r3
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	4413      	add	r3, r2
 8007e22:	3302      	adds	r3, #2
 8007e24:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	795b      	ldrb	r3, [r3, #5]
 8007e2a:	78fa      	ldrb	r2, [r7, #3]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d002      	beq.n	8007e36 <USBH_FindInterface+0x4e>
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	2bff      	cmp	r3, #255	; 0xff
 8007e34:	d111      	bne.n	8007e5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e3a:	78ba      	ldrb	r2, [r7, #2]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d002      	beq.n	8007e46 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e40:	78bb      	ldrb	r3, [r7, #2]
 8007e42:	2bff      	cmp	r3, #255	; 0xff
 8007e44:	d109      	bne.n	8007e5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e4a:	787a      	ldrb	r2, [r7, #1]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d002      	beq.n	8007e56 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e50:	787b      	ldrb	r3, [r7, #1]
 8007e52:	2bff      	cmp	r3, #255	; 0xff
 8007e54:	d101      	bne.n	8007e5a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	e006      	b.n	8007e68 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d9d6      	bls.n	8007e14 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007e66:	23ff      	movs	r3, #255	; 0xff
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fc81 	bl	8009784 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007e82:	2101      	movs	r1, #1
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 fd9a 	bl	80099be <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af04      	add	r7, sp, #16
 8007e9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d102      	bne.n	8007eb6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2203      	movs	r2, #3
 8007eb4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b0b      	cmp	r3, #11
 8007ebe:	f200 81be 	bhi.w	800823e <USBH_Process+0x3aa>
 8007ec2:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <USBH_Process+0x34>)
 8007ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec8:	08007ef9 	.word	0x08007ef9
 8007ecc:	08007f2b 	.word	0x08007f2b
 8007ed0:	08007f93 	.word	0x08007f93
 8007ed4:	080081d9 	.word	0x080081d9
 8007ed8:	0800823f 	.word	0x0800823f
 8007edc:	08008037 	.word	0x08008037
 8007ee0:	0800817f 	.word	0x0800817f
 8007ee4:	0800806d 	.word	0x0800806d
 8007ee8:	0800808d 	.word	0x0800808d
 8007eec:	080080ad 	.word	0x080080ad
 8007ef0:	080080f1 	.word	0x080080f1
 8007ef4:	080081c1 	.word	0x080081c1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 819e 	beq.w	8008242 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007f0c:	20c8      	movs	r0, #200	; 0xc8
 8007f0e:	f001 fd9d 	bl	8009a4c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 fc93 	bl	800983e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f28:	e18b      	b.n	8008242 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d107      	bne.n	8007f44 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f42:	e18d      	b.n	8008260 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f4e:	d914      	bls.n	8007f7a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f56:	3301      	adds	r3, #1
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d903      	bls.n	8007f72 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	220d      	movs	r2, #13
 8007f6e:	701a      	strb	r2, [r3, #0]
      break;
 8007f70:	e176      	b.n	8008260 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	701a      	strb	r2, [r3, #0]
      break;
 8007f78:	e172      	b.n	8008260 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f80:	f103 020a 	add.w	r2, r3, #10
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007f8a:	200a      	movs	r0, #10
 8007f8c:	f001 fd5e 	bl	8009a4c <USBH_Delay>
      break;
 8007f90:	e166      	b.n	8008260 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fa2:	2104      	movs	r1, #4
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007fa8:	2064      	movs	r0, #100	; 0x64
 8007faa:	f001 fd4f 	bl	8009a4c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fc1e 	bl	80097f0 <USBH_LL_GetSpeed>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2205      	movs	r2, #5
 8007fc2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f001 fa29 	bl	800941e <USBH_AllocPipe>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	461a      	mov	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007fd4:	2180      	movs	r1, #128	; 0x80
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f001 fa21 	bl	800941e <USBH_AllocPipe>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	461a      	mov	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	7919      	ldrb	r1, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ff8:	b292      	uxth	r2, r2
 8007ffa:	9202      	str	r2, [sp, #8]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	9201      	str	r2, [sp, #4]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	4603      	mov	r3, r0
 8008004:	2280      	movs	r2, #128	; 0x80
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 f9da 	bl	80093c0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7959      	ldrb	r1, [r3, #5]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008020:	b292      	uxth	r2, r2
 8008022:	9202      	str	r2, [sp, #8]
 8008024:	2200      	movs	r2, #0
 8008026:	9201      	str	r2, [sp, #4]
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	4603      	mov	r3, r0
 800802c:	2200      	movs	r2, #0
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 f9c6 	bl	80093c0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008034:	e114      	b.n	8008260 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f918 	bl	800826c <USBH_HandleEnum>
 800803c:	4603      	mov	r3, r0
 800803e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b00      	cmp	r3, #0
 8008046:	f040 80fe 	bne.w	8008246 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008058:	2b01      	cmp	r3, #1
 800805a:	d103      	bne.n	8008064 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2208      	movs	r2, #8
 8008060:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008062:	e0f0      	b.n	8008246 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2207      	movs	r2, #7
 8008068:	701a      	strb	r2, [r3, #0]
      break;
 800806a:	e0ec      	b.n	8008246 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 80e9 	beq.w	800824a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800807e:	2101      	movs	r1, #1
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2208      	movs	r2, #8
 8008088:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800808a:	e0de      	b.n	800824a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008092:	b29b      	uxth	r3, r3
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fc2c 	bl	80088f4 <USBH_SetCfg>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f040 80d5 	bne.w	800824e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2209      	movs	r2, #9
 80080a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080aa:	e0d0      	b.n	800824e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d016      	beq.n	80080e8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80080ba:	2101      	movs	r1, #1
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fc3c 	bl	800893a <USBH_SetFeature>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d103      	bne.n	80080d6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	220a      	movs	r2, #10
 80080d2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080d4:	e0bd      	b.n	8008252 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b03      	cmp	r3, #3
 80080dc:	f040 80b9 	bne.w	8008252 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	220a      	movs	r2, #10
 80080e4:	701a      	strb	r2, [r3, #0]
      break;
 80080e6:	e0b4      	b.n	8008252 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	220a      	movs	r2, #10
 80080ec:	701a      	strb	r2, [r3, #0]
      break;
 80080ee:	e0b0      	b.n	8008252 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 80ad 	beq.w	8008256 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
 8008108:	e016      	b.n	8008138 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800810a:	7bfa      	ldrb	r2, [r7, #15]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	32de      	adds	r2, #222	; 0xde
 8008110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008114:	791a      	ldrb	r2, [r3, #4]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800811c:	429a      	cmp	r2, r3
 800811e:	d108      	bne.n	8008132 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008120:	7bfa      	ldrb	r2, [r7, #15]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	32de      	adds	r2, #222	; 0xde
 8008126:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008130:	e005      	b.n	800813e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	3301      	adds	r3, #1
 8008136:	73fb      	strb	r3, [r7, #15]
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0e5      	beq.n	800810a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d016      	beq.n	8008176 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	4798      	blx	r3
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d109      	bne.n	800816e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2206      	movs	r2, #6
 800815e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008166:	2103      	movs	r1, #3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800816c:	e073      	b.n	8008256 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	220d      	movs	r2, #13
 8008172:	701a      	strb	r2, [r3, #0]
      break;
 8008174:	e06f      	b.n	8008256 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	220d      	movs	r2, #13
 800817a:	701a      	strb	r2, [r3, #0]
      break;
 800817c:	e06b      	b.n	8008256 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d017      	beq.n	80081b8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	4798      	blx	r3
 8008194:	4603      	mov	r3, r0
 8008196:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d103      	bne.n	80081a8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	220b      	movs	r2, #11
 80081a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081a6:	e058      	b.n	800825a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d154      	bne.n	800825a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	220d      	movs	r2, #13
 80081b4:	701a      	strb	r2, [r3, #0]
      break;
 80081b6:	e050      	b.n	800825a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	220d      	movs	r2, #13
 80081bc:	701a      	strb	r2, [r3, #0]
      break;
 80081be:	e04c      	b.n	800825a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d049      	beq.n	800825e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	4798      	blx	r3
      }
      break;
 80081d6:	e042      	b.n	800825e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff fd67 	bl	8007cb4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d009      	beq.n	8008204 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d005      	beq.n	800821a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008214:	2105      	movs	r1, #5
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b01      	cmp	r3, #1
 8008224:	d107      	bne.n	8008236 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fe20 	bl	8007e74 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008234:	e014      	b.n	8008260 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f001 faa4 	bl	8009784 <USBH_LL_Start>
      break;
 800823c:	e010      	b.n	8008260 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800823e:	bf00      	nop
 8008240:	e00e      	b.n	8008260 <USBH_Process+0x3cc>
      break;
 8008242:	bf00      	nop
 8008244:	e00c      	b.n	8008260 <USBH_Process+0x3cc>
      break;
 8008246:	bf00      	nop
 8008248:	e00a      	b.n	8008260 <USBH_Process+0x3cc>
    break;
 800824a:	bf00      	nop
 800824c:	e008      	b.n	8008260 <USBH_Process+0x3cc>
      break;
 800824e:	bf00      	nop
 8008250:	e006      	b.n	8008260 <USBH_Process+0x3cc>
      break;
 8008252:	bf00      	nop
 8008254:	e004      	b.n	8008260 <USBH_Process+0x3cc>
      break;
 8008256:	bf00      	nop
 8008258:	e002      	b.n	8008260 <USBH_Process+0x3cc>
      break;
 800825a:	bf00      	nop
 800825c:	e000      	b.n	8008260 <USBH_Process+0x3cc>
      break;
 800825e:	bf00      	nop
  }
  return USBH_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop

0800826c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af04      	add	r7, sp, #16
 8008272:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008274:	2301      	movs	r3, #1
 8008276:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008278:	2301      	movs	r3, #1
 800827a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	2b07      	cmp	r3, #7
 8008282:	f200 81c1 	bhi.w	8008608 <USBH_HandleEnum+0x39c>
 8008286:	a201      	add	r2, pc, #4	; (adr r2, 800828c <USBH_HandleEnum+0x20>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	080082ad 	.word	0x080082ad
 8008290:	0800836b 	.word	0x0800836b
 8008294:	080083d5 	.word	0x080083d5
 8008298:	08008463 	.word	0x08008463
 800829c:	080084cd 	.word	0x080084cd
 80082a0:	0800853d 	.word	0x0800853d
 80082a4:	08008583 	.word	0x08008583
 80082a8:	080085c9 	.word	0x080085c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80082ac:	2108      	movs	r1, #8
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fa50 	bl	8008754 <USBH_Get_DevDesc>
 80082b4:	4603      	mov	r3, r0
 80082b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d130      	bne.n	8008320 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	7919      	ldrb	r1, [r3, #4]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082e2:	b292      	uxth	r2, r2
 80082e4:	9202      	str	r2, [sp, #8]
 80082e6:	2200      	movs	r2, #0
 80082e8:	9201      	str	r2, [sp, #4]
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	4603      	mov	r3, r0
 80082ee:	2280      	movs	r2, #128	; 0x80
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 f865 	bl	80093c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	7959      	ldrb	r1, [r3, #5]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800830a:	b292      	uxth	r2, r2
 800830c:	9202      	str	r2, [sp, #8]
 800830e:	2200      	movs	r2, #0
 8008310:	9201      	str	r2, [sp, #4]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	4603      	mov	r3, r0
 8008316:	2200      	movs	r2, #0
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 f851 	bl	80093c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800831e:	e175      	b.n	800860c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b03      	cmp	r3, #3
 8008324:	f040 8172 	bne.w	800860c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800832e:	3301      	adds	r3, #1
 8008330:	b2da      	uxtb	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800833e:	2b03      	cmp	r3, #3
 8008340:	d903      	bls.n	800834a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	220d      	movs	r2, #13
 8008346:	701a      	strb	r2, [r3, #0]
      break;
 8008348:	e160      	b.n	800860c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	795b      	ldrb	r3, [r3, #5]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 f885 	bl	8009460 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	791b      	ldrb	r3, [r3, #4]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 f87f 	bl	8009460 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
      break;
 8008368:	e150      	b.n	800860c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800836a:	2112      	movs	r1, #18
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f9f1 	bl	8008754 <USBH_Get_DevDesc>
 8008372:	4603      	mov	r3, r0
 8008374:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d103      	bne.n	8008384 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008382:	e145      	b.n	8008610 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	2b03      	cmp	r3, #3
 8008388:	f040 8142 	bne.w	8008610 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008392:	3301      	adds	r3, #1
 8008394:	b2da      	uxtb	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d903      	bls.n	80083ae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	220d      	movs	r2, #13
 80083aa:	701a      	strb	r2, [r3, #0]
      break;
 80083ac:	e130      	b.n	8008610 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	795b      	ldrb	r3, [r3, #5]
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f001 f853 	bl	8009460 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	791b      	ldrb	r3, [r3, #4]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 f84d 	bl	8009460 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	701a      	strb	r2, [r3, #0]
      break;
 80083d2:	e11d      	b.n	8008610 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80083d4:	2101      	movs	r1, #1
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa68 	bl	80088ac <USBH_SetAddress>
 80083dc:	4603      	mov	r3, r0
 80083de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d132      	bne.n	800844c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80083e6:	2002      	movs	r0, #2
 80083e8:	f001 fb30 	bl	8009a4c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2203      	movs	r2, #3
 80083f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	7919      	ldrb	r1, [r3, #4]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800840e:	b292      	uxth	r2, r2
 8008410:	9202      	str	r2, [sp, #8]
 8008412:	2200      	movs	r2, #0
 8008414:	9201      	str	r2, [sp, #4]
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	4603      	mov	r3, r0
 800841a:	2280      	movs	r2, #128	; 0x80
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 ffcf 	bl	80093c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7959      	ldrb	r1, [r3, #5]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008436:	b292      	uxth	r2, r2
 8008438:	9202      	str	r2, [sp, #8]
 800843a:	2200      	movs	r2, #0
 800843c:	9201      	str	r2, [sp, #4]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	4603      	mov	r3, r0
 8008442:	2200      	movs	r2, #0
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 ffbb 	bl	80093c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800844a:	e0e3      	b.n	8008614 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	2b03      	cmp	r3, #3
 8008450:	f040 80e0 	bne.w	8008614 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	220d      	movs	r2, #13
 8008458:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	705a      	strb	r2, [r3, #1]
      break;
 8008460:	e0d8      	b.n	8008614 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008462:	2109      	movs	r1, #9
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f99d 	bl	80087a4 <USBH_Get_CfgDesc>
 800846a:	4603      	mov	r3, r0
 800846c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d103      	bne.n	800847c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2204      	movs	r2, #4
 8008478:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800847a:	e0cd      	b.n	8008618 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	2b03      	cmp	r3, #3
 8008480:	f040 80ca 	bne.w	8008618 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800848a:	3301      	adds	r3, #1
 800848c:	b2da      	uxtb	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800849a:	2b03      	cmp	r3, #3
 800849c:	d903      	bls.n	80084a6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	220d      	movs	r2, #13
 80084a2:	701a      	strb	r2, [r3, #0]
      break;
 80084a4:	e0b8      	b.n	8008618 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	795b      	ldrb	r3, [r3, #5]
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 ffd7 	bl	8009460 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	791b      	ldrb	r3, [r3, #4]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 ffd1 	bl	8009460 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	701a      	strb	r2, [r3, #0]
      break;
 80084ca:	e0a5      	b.n	8008618 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f965 	bl	80087a4 <USBH_Get_CfgDesc>
 80084da:	4603      	mov	r3, r0
 80084dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d103      	bne.n	80084ec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2205      	movs	r2, #5
 80084e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084ea:	e097      	b.n	800861c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	f040 8094 	bne.w	800861c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084fa:	3301      	adds	r3, #1
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800850a:	2b03      	cmp	r3, #3
 800850c:	d903      	bls.n	8008516 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	220d      	movs	r2, #13
 8008512:	701a      	strb	r2, [r3, #0]
      break;
 8008514:	e082      	b.n	800861c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	795b      	ldrb	r3, [r3, #5]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 ff9f 	bl	8009460 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	791b      	ldrb	r3, [r3, #4]
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 ff99 	bl	8009460 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	701a      	strb	r2, [r3, #0]
      break;
 800853a:	e06f      	b.n	800861c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008542:	2b00      	cmp	r3, #0
 8008544:	d019      	beq.n	800857a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008552:	23ff      	movs	r3, #255	; 0xff
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f949 	bl	80087ec <USBH_Get_StringDesc>
 800855a:	4603      	mov	r3, r0
 800855c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800855e:	7bbb      	ldrb	r3, [r7, #14]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d103      	bne.n	800856c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2206      	movs	r2, #6
 8008568:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800856a:	e059      	b.n	8008620 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	2b03      	cmp	r3, #3
 8008570:	d156      	bne.n	8008620 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2206      	movs	r2, #6
 8008576:	705a      	strb	r2, [r3, #1]
      break;
 8008578:	e052      	b.n	8008620 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2206      	movs	r2, #6
 800857e:	705a      	strb	r2, [r3, #1]
      break;
 8008580:	e04e      	b.n	8008620 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008588:	2b00      	cmp	r3, #0
 800858a:	d019      	beq.n	80085c0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008598:	23ff      	movs	r3, #255	; 0xff
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f926 	bl	80087ec <USBH_Get_StringDesc>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d103      	bne.n	80085b2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2207      	movs	r2, #7
 80085ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80085b0:	e038      	b.n	8008624 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d135      	bne.n	8008624 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2207      	movs	r2, #7
 80085bc:	705a      	strb	r2, [r3, #1]
      break;
 80085be:	e031      	b.n	8008624 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2207      	movs	r2, #7
 80085c4:	705a      	strb	r2, [r3, #1]
      break;
 80085c6:	e02d      	b.n	8008624 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d017      	beq.n	8008602 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085de:	23ff      	movs	r3, #255	; 0xff
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f903 	bl	80087ec <USBH_Get_StringDesc>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80085f4:	e018      	b.n	8008628 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d115      	bne.n	8008628 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008600:	e012      	b.n	8008628 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	73fb      	strb	r3, [r7, #15]
      break;
 8008606:	e00f      	b.n	8008628 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008608:	bf00      	nop
 800860a:	e00e      	b.n	800862a <USBH_HandleEnum+0x3be>
      break;
 800860c:	bf00      	nop
 800860e:	e00c      	b.n	800862a <USBH_HandleEnum+0x3be>
      break;
 8008610:	bf00      	nop
 8008612:	e00a      	b.n	800862a <USBH_HandleEnum+0x3be>
      break;
 8008614:	bf00      	nop
 8008616:	e008      	b.n	800862a <USBH_HandleEnum+0x3be>
      break;
 8008618:	bf00      	nop
 800861a:	e006      	b.n	800862a <USBH_HandleEnum+0x3be>
      break;
 800861c:	bf00      	nop
 800861e:	e004      	b.n	800862a <USBH_HandleEnum+0x3be>
      break;
 8008620:	bf00      	nop
 8008622:	e002      	b.n	800862a <USBH_HandleEnum+0x3be>
      break;
 8008624:	bf00      	nop
 8008626:	e000      	b.n	800862a <USBH_HandleEnum+0x3be>
      break;
 8008628:	bf00      	nop
  }
  return Status;
 800862a:	7bfb      	ldrb	r3, [r7, #15]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b082      	sub	sp, #8
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f804 	bl	8008676 <USBH_HandleSof>
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b082      	sub	sp, #8
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b0b      	cmp	r3, #11
 8008686:	d10a      	bne.n	800869e <USBH_HandleSof+0x28>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d005      	beq.n	800869e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	4798      	blx	r3
  }
}
 800869e:	bf00      	nop
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80086b6:	bf00      	nop
}
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80086d2:	bf00      	nop
}
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 f844 	bl	80097ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	791b      	ldrb	r3, [r3, #4]
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fe91 	bl	8009460 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	795b      	ldrb	r3, [r3, #5]
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fe8b 	bl	8009460 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af02      	add	r7, sp, #8
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008766:	78fb      	ldrb	r3, [r7, #3]
 8008768:	b29b      	uxth	r3, r3
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	4613      	mov	r3, r2
 800876e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008772:	2100      	movs	r1, #0
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f864 	bl	8008842 <USBH_GetDescriptor>
 800877a:	4603      	mov	r3, r0
 800877c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800877e:	7bfb      	ldrb	r3, [r7, #15]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f203 3026 	addw	r0, r3, #806	; 0x326
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	b292      	uxth	r2, r2
 8008794:	4619      	mov	r1, r3
 8008796:	f000 f918 	bl	80089ca <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800879a:	7bfb      	ldrb	r3, [r7, #15]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af02      	add	r7, sp, #8
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	331c      	adds	r3, #28
 80087b4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80087b6:	887b      	ldrh	r3, [r7, #2]
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087c0:	2100      	movs	r1, #0
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f83d 	bl	8008842 <USBH_GetDescriptor>
 80087c8:	4603      	mov	r3, r0
 80087ca:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d107      	bne.n	80087e2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80087d2:	887b      	ldrh	r3, [r7, #2]
 80087d4:	461a      	mov	r2, r3
 80087d6:	68b9      	ldr	r1, [r7, #8]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f987 	bl	8008aec <USBH_ParseCfgDesc>
 80087de:	4603      	mov	r3, r0
 80087e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	607a      	str	r2, [r7, #4]
 80087f6:	461a      	mov	r2, r3
 80087f8:	460b      	mov	r3, r1
 80087fa:	72fb      	strb	r3, [r7, #11]
 80087fc:	4613      	mov	r3, r2
 80087fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008800:	7afb      	ldrb	r3, [r7, #11]
 8008802:	b29b      	uxth	r3, r3
 8008804:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008808:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008810:	893b      	ldrh	r3, [r7, #8]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	460b      	mov	r3, r1
 8008816:	2100      	movs	r1, #0
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 f812 	bl	8008842 <USBH_GetDescriptor>
 800881e:	4603      	mov	r3, r0
 8008820:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d107      	bne.n	8008838 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800882e:	893a      	ldrh	r2, [r7, #8]
 8008830:	6879      	ldr	r1, [r7, #4]
 8008832:	4618      	mov	r0, r3
 8008834:	f000 fb24 	bl	8008e80 <USBH_ParseStringDesc>
  }

  return status;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	60f8      	str	r0, [r7, #12]
 800884a:	607b      	str	r3, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	72fb      	strb	r3, [r7, #11]
 8008850:	4613      	mov	r3, r2
 8008852:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	789b      	ldrb	r3, [r3, #2]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d11c      	bne.n	8008896 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008862:	b2da      	uxtb	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2206      	movs	r2, #6
 800886c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	893a      	ldrh	r2, [r7, #8]
 8008872:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008874:	893b      	ldrh	r3, [r7, #8]
 8008876:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800887a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800887e:	d104      	bne.n	800888a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f240 4209 	movw	r2, #1033	; 0x409
 8008886:	829a      	strh	r2, [r3, #20]
 8008888:	e002      	b.n	8008890 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	8b3a      	ldrh	r2, [r7, #24]
 8008894:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008896:	8b3b      	ldrh	r3, [r7, #24]
 8008898:	461a      	mov	r2, r3
 800889a:	6879      	ldr	r1, [r7, #4]
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 fb3d 	bl	8008f1c <USBH_CtlReq>
 80088a2:	4603      	mov	r3, r0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	789b      	ldrb	r3, [r3, #2]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d10f      	bne.n	80088e0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2205      	movs	r2, #5
 80088ca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80088e0:	2200      	movs	r2, #0
 80088e2:	2100      	movs	r1, #0
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fb19 	bl	8008f1c <USBH_CtlReq>
 80088ea:	4603      	mov	r3, r0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	789b      	ldrb	r3, [r3, #2]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d10e      	bne.n	8008926 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2209      	movs	r2, #9
 8008912:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	887a      	ldrh	r2, [r7, #2]
 8008918:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008926:	2200      	movs	r2, #0
 8008928:	2100      	movs	r1, #0
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 faf6 	bl	8008f1c <USBH_CtlReq>
 8008930:	4603      	mov	r3, r0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	460b      	mov	r3, r1
 8008944:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	789b      	ldrb	r3, [r3, #2]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d10f      	bne.n	800896e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2203      	movs	r2, #3
 8008958:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	b29a      	uxth	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800896e:	2200      	movs	r2, #0
 8008970:	2100      	movs	r1, #0
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fad2 	bl	8008f1c <USBH_CtlReq>
 8008978:	4603      	mov	r3, r0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	789b      	ldrb	r3, [r3, #2]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d10f      	bne.n	80089b6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80089b6:	2200      	movs	r2, #0
 80089b8:	2100      	movs	r1, #0
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 faae 	bl	8008f1c <USBH_CtlReq>
 80089c0:	4603      	mov	r3, r0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b085      	sub	sp, #20
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	4613      	mov	r3, r2
 80089d6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	781a      	ldrb	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	785a      	ldrb	r2, [r3, #1]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	3302      	adds	r3, #2
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	3303      	adds	r3, #3
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	4313      	orrs	r3, r2
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	791a      	ldrb	r2, [r3, #4]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	795a      	ldrb	r2, [r3, #5]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	799a      	ldrb	r2, [r3, #6]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	79da      	ldrb	r2, [r3, #7]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	79db      	ldrb	r3, [r3, #7]
 8008a28:	2b20      	cmp	r3, #32
 8008a2a:	dc11      	bgt.n	8008a50 <USBH_ParseDevDesc+0x86>
 8008a2c:	2b08      	cmp	r3, #8
 8008a2e:	db16      	blt.n	8008a5e <USBH_ParseDevDesc+0x94>
 8008a30:	3b08      	subs	r3, #8
 8008a32:	2201      	movs	r2, #1
 8008a34:	fa02 f303 	lsl.w	r3, r2, r3
 8008a38:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bf14      	ite	ne
 8008a44:	2301      	movne	r3, #1
 8008a46:	2300      	moveq	r3, #0
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d102      	bne.n	8008a54 <USBH_ParseDevDesc+0x8a>
 8008a4e:	e006      	b.n	8008a5e <USBH_ParseDevDesc+0x94>
 8008a50:	2b40      	cmp	r3, #64	; 0x40
 8008a52:	d104      	bne.n	8008a5e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	79da      	ldrb	r2, [r3, #7]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	71da      	strb	r2, [r3, #7]
      break;
 8008a5c:	e003      	b.n	8008a66 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2240      	movs	r2, #64	; 0x40
 8008a62:	71da      	strb	r2, [r3, #7]
      break;
 8008a64:	bf00      	nop
  }

  if (length > 8U)
 8008a66:	88fb      	ldrh	r3, [r7, #6]
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d939      	bls.n	8008ae0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	3309      	adds	r3, #9
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	021b      	lsls	r3, r3, #8
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	4313      	orrs	r3, r2
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	330a      	adds	r3, #10
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	330b      	adds	r3, #11
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	330c      	adds	r3, #12
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	330d      	adds	r3, #13
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	021b      	lsls	r3, r3, #8
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	7b9a      	ldrb	r2, [r3, #14]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	7bda      	ldrb	r2, [r3, #15]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	7c1a      	ldrb	r2, [r3, #16]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	7c5a      	ldrb	r2, [r3, #17]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	745a      	strb	r2, [r3, #17]
  }
}
 8008ae0:	bf00      	nop
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08c      	sub	sp, #48	; 0x30
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	4613      	mov	r3, r2
 8008af8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b00:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	781a      	ldrb	r2, [r3, #0]
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	785a      	ldrb	r2, [r3, #1]
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	3302      	adds	r3, #2
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	3303      	adds	r3, #3
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	021b      	lsls	r3, r3, #8
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	4313      	orrs	r3, r2
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b48:	bf28      	it	cs
 8008b4a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	791a      	ldrb	r2, [r3, #4]
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	795a      	ldrb	r2, [r3, #5]
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	799a      	ldrb	r2, [r3, #6]
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	79da      	ldrb	r2, [r3, #7]
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	7a1a      	ldrb	r2, [r3, #8]
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b09      	cmp	r3, #9
 8008b82:	d002      	beq.n	8008b8a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	2209      	movs	r2, #9
 8008b88:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008b8a:	88fb      	ldrh	r3, [r7, #6]
 8008b8c:	2b09      	cmp	r3, #9
 8008b8e:	f240 809d 	bls.w	8008ccc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b92:	2309      	movs	r3, #9
 8008b94:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008b96:	2300      	movs	r3, #0
 8008b98:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b9a:	e081      	b.n	8008ca0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b9c:	f107 0316 	add.w	r3, r7, #22
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ba4:	f000 f99f 	bl	8008ee6 <USBH_GetNextDesc>
 8008ba8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	785b      	ldrb	r3, [r3, #1]
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d176      	bne.n	8008ca0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	2b09      	cmp	r3, #9
 8008bb8:	d002      	beq.n	8008bc0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	2209      	movs	r2, #9
 8008bbe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc4:	221a      	movs	r2, #26
 8008bc6:	fb02 f303 	mul.w	r3, r2, r3
 8008bca:	3308      	adds	r3, #8
 8008bcc:	6a3a      	ldr	r2, [r7, #32]
 8008bce:	4413      	add	r3, r2
 8008bd0:	3302      	adds	r3, #2
 8008bd2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bd6:	69f8      	ldr	r0, [r7, #28]
 8008bd8:	f000 f87e 	bl	8008cd8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008be6:	e043      	b.n	8008c70 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008be8:	f107 0316 	add.w	r3, r7, #22
 8008bec:	4619      	mov	r1, r3
 8008bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf0:	f000 f979 	bl	8008ee6 <USBH_GetNextDesc>
 8008bf4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	785b      	ldrb	r3, [r3, #1]
 8008bfa:	2b05      	cmp	r3, #5
 8008bfc:	d138      	bne.n	8008c70 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	795b      	ldrb	r3, [r3, #5]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d10f      	bne.n	8008c26 <USBH_ParseCfgDesc+0x13a>
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	799b      	ldrb	r3, [r3, #6]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d10b      	bne.n	8008c26 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	79db      	ldrb	r3, [r3, #7]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10f      	bne.n	8008c36 <USBH_ParseCfgDesc+0x14a>
 8008c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b09      	cmp	r3, #9
 8008c1c:	d00b      	beq.n	8008c36 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	2209      	movs	r2, #9
 8008c22:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008c24:	e007      	b.n	8008c36 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b07      	cmp	r3, #7
 8008c2c:	d004      	beq.n	8008c38 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c30:	2207      	movs	r2, #7
 8008c32:	701a      	strb	r2, [r3, #0]
 8008c34:	e000      	b.n	8008c38 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008c36:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c3c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008c40:	3201      	adds	r2, #1
 8008c42:	00d2      	lsls	r2, r2, #3
 8008c44:	211a      	movs	r1, #26
 8008c46:	fb01 f303 	mul.w	r3, r1, r3
 8008c4a:	4413      	add	r3, r2
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	6a3a      	ldr	r2, [r7, #32]
 8008c50:	4413      	add	r3, r2
 8008c52:	3304      	adds	r3, #4
 8008c54:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c58:	69b9      	ldr	r1, [r7, #24]
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 f86b 	bl	8008d36 <USBH_ParseEPDesc>
 8008c60:	4603      	mov	r3, r0
 8008c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008c66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	791b      	ldrb	r3, [r3, #4]
 8008c74:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d204      	bcs.n	8008c86 <USBH_ParseCfgDesc+0x19a>
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	885a      	ldrh	r2, [r3, #2]
 8008c80:	8afb      	ldrh	r3, [r7, #22]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d8b0      	bhi.n	8008be8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	791b      	ldrb	r3, [r3, #4]
 8008c8a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d201      	bcs.n	8008c96 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e01c      	b.n	8008cd0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d805      	bhi.n	8008cb4 <USBH_ParseCfgDesc+0x1c8>
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	885a      	ldrh	r2, [r3, #2]
 8008cac:	8afb      	ldrh	r3, [r7, #22]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	f63f af74 	bhi.w	8008b9c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	791b      	ldrb	r3, [r3, #4]
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	bf28      	it	cs
 8008cbc:	2302      	movcs	r3, #2
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d201      	bcs.n	8008ccc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e001      	b.n	8008cd0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3730      	adds	r7, #48	; 0x30
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781a      	ldrb	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	785a      	ldrb	r2, [r3, #1]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	789a      	ldrb	r2, [r3, #2]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	78da      	ldrb	r2, [r3, #3]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	791a      	ldrb	r2, [r3, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	795a      	ldrb	r2, [r3, #5]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	799a      	ldrb	r2, [r3, #6]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	79da      	ldrb	r2, [r3, #7]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	7a1a      	ldrb	r2, [r3, #8]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	721a      	strb	r2, [r3, #8]
}
 8008d2a:	bf00      	nop
 8008d2c:	370c      	adds	r7, #12
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b087      	sub	sp, #28
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	60f8      	str	r0, [r7, #12]
 8008d3e:	60b9      	str	r1, [r7, #8]
 8008d40:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	781a      	ldrb	r2, [r3, #0]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	785a      	ldrb	r2, [r3, #1]
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	789a      	ldrb	r2, [r3, #2]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	78da      	ldrb	r2, [r3, #3]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3304      	adds	r3, #4
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	3305      	adds	r3, #5
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	021b      	lsls	r3, r3, #8
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	799a      	ldrb	r2, [r3, #6]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	889b      	ldrh	r3, [r3, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d102      	bne.n	8008d98 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008d92:	2303      	movs	r3, #3
 8008d94:	75fb      	strb	r3, [r7, #23]
 8008d96:	e033      	b.n	8008e00 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	889b      	ldrh	r3, [r3, #4]
 8008d9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008da0:	f023 0307 	bic.w	r3, r3, #7
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	889b      	ldrh	r3, [r3, #4]
 8008dae:	b21a      	sxth	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3304      	adds	r3, #4
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	b299      	uxth	r1, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3305      	adds	r3, #5
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	021b      	lsls	r3, r3, #8
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d110      	bne.n	8008df2 <USBH_ParseEPDesc+0xbc>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	b299      	uxth	r1, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3305      	adds	r3, #5
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	021b      	lsls	r3, r3, #8
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	430b      	orrs	r3, r1
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	b21b      	sxth	r3, r3
 8008dea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dee:	b21b      	sxth	r3, r3
 8008df0:	e001      	b.n	8008df6 <USBH_ParseEPDesc+0xc0>
 8008df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008df6:	4313      	orrs	r3, r2
 8008df8:	b21b      	sxth	r3, r3
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d116      	bne.n	8008e38 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	78db      	ldrb	r3, [r3, #3]
 8008e0e:	f003 0303 	and.w	r3, r3, #3
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d005      	beq.n	8008e22 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	78db      	ldrb	r3, [r3, #3]
 8008e1a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d127      	bne.n	8008e72 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	799b      	ldrb	r3, [r3, #6]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <USBH_ParseEPDesc+0xfc>
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	799b      	ldrb	r3, [r3, #6]
 8008e2e:	2b10      	cmp	r3, #16
 8008e30:	d91f      	bls.n	8008e72 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008e32:	2303      	movs	r3, #3
 8008e34:	75fb      	strb	r3, [r7, #23]
 8008e36:	e01c      	b.n	8008e72 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	78db      	ldrb	r3, [r3, #3]
 8008e3c:	f003 0303 	and.w	r3, r3, #3
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d10a      	bne.n	8008e5a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	799b      	ldrb	r3, [r3, #6]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <USBH_ParseEPDesc+0x11e>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	799b      	ldrb	r3, [r3, #6]
 8008e50:	2b10      	cmp	r3, #16
 8008e52:	d90e      	bls.n	8008e72 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008e54:	2303      	movs	r3, #3
 8008e56:	75fb      	strb	r3, [r7, #23]
 8008e58:	e00b      	b.n	8008e72 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	78db      	ldrb	r3, [r3, #3]
 8008e5e:	f003 0303 	and.w	r3, r3, #3
 8008e62:	2b03      	cmp	r3, #3
 8008e64:	d105      	bne.n	8008e72 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	799b      	ldrb	r3, [r3, #6]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	371c      	adds	r7, #28
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3301      	adds	r3, #1
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	d120      	bne.n	8008eda <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	1e9a      	subs	r2, r3, #2
 8008e9e:	88fb      	ldrh	r3, [r7, #6]
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	bf28      	it	cs
 8008ea4:	4613      	movcs	r3, r2
 8008ea6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3302      	adds	r3, #2
 8008eac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008eae:	2300      	movs	r3, #0
 8008eb0:	82fb      	strh	r3, [r7, #22]
 8008eb2:	e00b      	b.n	8008ecc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008eb4:	8afb      	ldrh	r3, [r7, #22]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	4413      	add	r3, r2
 8008eba:	781a      	ldrb	r2, [r3, #0]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008ec6:	8afb      	ldrh	r3, [r7, #22]
 8008ec8:	3302      	adds	r3, #2
 8008eca:	82fb      	strh	r3, [r7, #22]
 8008ecc:	8afa      	ldrh	r2, [r7, #22]
 8008ece:	8abb      	ldrh	r3, [r7, #20]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d3ef      	bcc.n	8008eb4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	701a      	strb	r2, [r3, #0]
  }
}
 8008eda:	bf00      	nop
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	881a      	ldrh	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	4413      	add	r3, r2
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	4613      	mov	r3, r2
 8008f28:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	789b      	ldrb	r3, [r3, #2]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d002      	beq.n	8008f3c <USBH_CtlReq+0x20>
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d00f      	beq.n	8008f5a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008f3a:	e027      	b.n	8008f8c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	88fa      	ldrh	r2, [r7, #6]
 8008f46:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2202      	movs	r2, #2
 8008f52:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008f54:	2301      	movs	r3, #1
 8008f56:	75fb      	strb	r3, [r7, #23]
      break;
 8008f58:	e018      	b.n	8008f8c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 f81c 	bl	8008f98 <USBH_HandleControl>
 8008f60:	4603      	mov	r3, r0
 8008f62:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <USBH_CtlReq+0x54>
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d106      	bne.n	8008f7e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2201      	movs	r2, #1
 8008f74:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	761a      	strb	r2, [r3, #24]
      break;
 8008f7c:	e005      	b.n	8008f8a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d102      	bne.n	8008f8a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2201      	movs	r2, #1
 8008f88:	709a      	strb	r2, [r3, #2]
      break;
 8008f8a:	bf00      	nop
  }
  return status;
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af02      	add	r7, sp, #8
 8008f9e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	7e1b      	ldrb	r3, [r3, #24]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	2b0a      	cmp	r3, #10
 8008fb0:	f200 8156 	bhi.w	8009260 <USBH_HandleControl+0x2c8>
 8008fb4:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <USBH_HandleControl+0x24>)
 8008fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fba:	bf00      	nop
 8008fbc:	08008fe9 	.word	0x08008fe9
 8008fc0:	08009003 	.word	0x08009003
 8008fc4:	0800906d 	.word	0x0800906d
 8008fc8:	08009093 	.word	0x08009093
 8008fcc:	080090cb 	.word	0x080090cb
 8008fd0:	080090f5 	.word	0x080090f5
 8008fd4:	08009147 	.word	0x08009147
 8008fd8:	08009169 	.word	0x08009169
 8008fdc:	080091a5 	.word	0x080091a5
 8008fe0:	080091cb 	.word	0x080091cb
 8008fe4:	08009209 	.word	0x08009209
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f103 0110 	add.w	r1, r3, #16
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	795b      	ldrb	r3, [r3, #5]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f943 	bl	8009280 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	761a      	strb	r2, [r3, #24]
      break;
 8009000:	e139      	b.n	8009276 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	795b      	ldrb	r3, [r3, #5]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fcc5 	bl	8009998 <USBH_LL_GetURBState>
 800900e:	4603      	mov	r3, r0
 8009010:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d11e      	bne.n	8009056 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	7c1b      	ldrb	r3, [r3, #16]
 800901c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009020:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	8adb      	ldrh	r3, [r3, #22]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800902a:	7b7b      	ldrb	r3, [r7, #13]
 800902c:	2b80      	cmp	r3, #128	; 0x80
 800902e:	d103      	bne.n	8009038 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2203      	movs	r2, #3
 8009034:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009036:	e115      	b.n	8009264 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2205      	movs	r2, #5
 800903c:	761a      	strb	r2, [r3, #24]
      break;
 800903e:	e111      	b.n	8009264 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009040:	7b7b      	ldrb	r3, [r7, #13]
 8009042:	2b80      	cmp	r3, #128	; 0x80
 8009044:	d103      	bne.n	800904e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2209      	movs	r2, #9
 800904a:	761a      	strb	r2, [r3, #24]
      break;
 800904c:	e10a      	b.n	8009264 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2207      	movs	r2, #7
 8009052:	761a      	strb	r2, [r3, #24]
      break;
 8009054:	e106      	b.n	8009264 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	2b04      	cmp	r3, #4
 800905a:	d003      	beq.n	8009064 <USBH_HandleControl+0xcc>
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	2b02      	cmp	r3, #2
 8009060:	f040 8100 	bne.w	8009264 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	220b      	movs	r2, #11
 8009068:	761a      	strb	r2, [r3, #24]
      break;
 800906a:	e0fb      	b.n	8009264 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009072:	b29a      	uxth	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6899      	ldr	r1, [r3, #8]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	899a      	ldrh	r2, [r3, #12]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	791b      	ldrb	r3, [r3, #4]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f93a 	bl	80092fe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2204      	movs	r2, #4
 800908e:	761a      	strb	r2, [r3, #24]
      break;
 8009090:	e0f1      	b.n	8009276 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	791b      	ldrb	r3, [r3, #4]
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fc7d 	bl	8009998 <USBH_LL_GetURBState>
 800909e:	4603      	mov	r3, r0
 80090a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d102      	bne.n	80090ae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2209      	movs	r2, #9
 80090ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b05      	cmp	r3, #5
 80090b2:	d102      	bne.n	80090ba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80090b4:	2303      	movs	r3, #3
 80090b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090b8:	e0d6      	b.n	8009268 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	2b04      	cmp	r3, #4
 80090be:	f040 80d3 	bne.w	8009268 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	220b      	movs	r2, #11
 80090c6:	761a      	strb	r2, [r3, #24]
      break;
 80090c8:	e0ce      	b.n	8009268 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6899      	ldr	r1, [r3, #8]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	899a      	ldrh	r2, [r3, #12]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	795b      	ldrb	r3, [r3, #5]
 80090d6:	2001      	movs	r0, #1
 80090d8:	9000      	str	r0, [sp, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f8ea 	bl	80092b4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2206      	movs	r2, #6
 80090f0:	761a      	strb	r2, [r3, #24]
      break;
 80090f2:	e0c0      	b.n	8009276 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	795b      	ldrb	r3, [r3, #5]
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fc4c 	bl	8009998 <USBH_LL_GetURBState>
 8009100:	4603      	mov	r3, r0
 8009102:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d103      	bne.n	8009112 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2207      	movs	r2, #7
 800910e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009110:	e0ac      	b.n	800926c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009112:	7bbb      	ldrb	r3, [r7, #14]
 8009114:	2b05      	cmp	r3, #5
 8009116:	d105      	bne.n	8009124 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	220c      	movs	r2, #12
 800911c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800911e:	2303      	movs	r3, #3
 8009120:	73fb      	strb	r3, [r7, #15]
      break;
 8009122:	e0a3      	b.n	800926c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	2b02      	cmp	r3, #2
 8009128:	d103      	bne.n	8009132 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2205      	movs	r2, #5
 800912e:	761a      	strb	r2, [r3, #24]
      break;
 8009130:	e09c      	b.n	800926c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	2b04      	cmp	r3, #4
 8009136:	f040 8099 	bne.w	800926c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	220b      	movs	r2, #11
 800913e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009140:	2302      	movs	r3, #2
 8009142:	73fb      	strb	r3, [r7, #15]
      break;
 8009144:	e092      	b.n	800926c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	791b      	ldrb	r3, [r3, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	2100      	movs	r1, #0
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f8d5 	bl	80092fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800915a:	b29a      	uxth	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2208      	movs	r2, #8
 8009164:	761a      	strb	r2, [r3, #24]

      break;
 8009166:	e086      	b.n	8009276 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	791b      	ldrb	r3, [r3, #4]
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fc12 	bl	8009998 <USBH_LL_GetURBState>
 8009174:	4603      	mov	r3, r0
 8009176:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d105      	bne.n	800918a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	220d      	movs	r2, #13
 8009182:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009188:	e072      	b.n	8009270 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800918a:	7bbb      	ldrb	r3, [r7, #14]
 800918c:	2b04      	cmp	r3, #4
 800918e:	d103      	bne.n	8009198 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	220b      	movs	r2, #11
 8009194:	761a      	strb	r2, [r3, #24]
      break;
 8009196:	e06b      	b.n	8009270 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2b05      	cmp	r3, #5
 800919c:	d168      	bne.n	8009270 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800919e:	2303      	movs	r3, #3
 80091a0:	73fb      	strb	r3, [r7, #15]
      break;
 80091a2:	e065      	b.n	8009270 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	795b      	ldrb	r3, [r3, #5]
 80091a8:	2201      	movs	r2, #1
 80091aa:	9200      	str	r2, [sp, #0]
 80091ac:	2200      	movs	r2, #0
 80091ae:	2100      	movs	r1, #0
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f87f 	bl	80092b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091bc:	b29a      	uxth	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	220a      	movs	r2, #10
 80091c6:	761a      	strb	r2, [r3, #24]
      break;
 80091c8:	e055      	b.n	8009276 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	795b      	ldrb	r3, [r3, #5]
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fbe1 	bl	8009998 <USBH_LL_GetURBState>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80091da:	7bbb      	ldrb	r3, [r7, #14]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d105      	bne.n	80091ec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	220d      	movs	r2, #13
 80091e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091ea:	e043      	b.n	8009274 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d103      	bne.n	80091fa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2209      	movs	r2, #9
 80091f6:	761a      	strb	r2, [r3, #24]
      break;
 80091f8:	e03c      	b.n	8009274 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80091fa:	7bbb      	ldrb	r3, [r7, #14]
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	d139      	bne.n	8009274 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	220b      	movs	r2, #11
 8009204:	761a      	strb	r2, [r3, #24]
      break;
 8009206:	e035      	b.n	8009274 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	7e5b      	ldrb	r3, [r3, #25]
 800920c:	3301      	adds	r3, #1
 800920e:	b2da      	uxtb	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	765a      	strb	r2, [r3, #25]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	7e5b      	ldrb	r3, [r3, #25]
 8009218:	2b02      	cmp	r3, #2
 800921a:	d806      	bhi.n	800922a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009228:	e025      	b.n	8009276 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009230:	2106      	movs	r1, #6
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	795b      	ldrb	r3, [r3, #5]
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f90c 	bl	8009460 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	791b      	ldrb	r3, [r3, #4]
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f906 	bl	8009460 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800925a:	2302      	movs	r3, #2
 800925c:	73fb      	strb	r3, [r7, #15]
      break;
 800925e:	e00a      	b.n	8009276 <USBH_HandleControl+0x2de>

    default:
      break;
 8009260:	bf00      	nop
 8009262:	e008      	b.n	8009276 <USBH_HandleControl+0x2de>
      break;
 8009264:	bf00      	nop
 8009266:	e006      	b.n	8009276 <USBH_HandleControl+0x2de>
      break;
 8009268:	bf00      	nop
 800926a:	e004      	b.n	8009276 <USBH_HandleControl+0x2de>
      break;
 800926c:	bf00      	nop
 800926e:	e002      	b.n	8009276 <USBH_HandleControl+0x2de>
      break;
 8009270:	bf00      	nop
 8009272:	e000      	b.n	8009276 <USBH_HandleControl+0x2de>
      break;
 8009274:	bf00      	nop
  }

  return status;
 8009276:	7bfb      	ldrb	r3, [r7, #15]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b088      	sub	sp, #32
 8009284:	af04      	add	r7, sp, #16
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	4613      	mov	r3, r2
 800928c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800928e:	79f9      	ldrb	r1, [r7, #7]
 8009290:	2300      	movs	r3, #0
 8009292:	9303      	str	r3, [sp, #12]
 8009294:	2308      	movs	r3, #8
 8009296:	9302      	str	r3, [sp, #8]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	9301      	str	r3, [sp, #4]
 800929c:	2300      	movs	r3, #0
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	2300      	movs	r3, #0
 80092a2:	2200      	movs	r2, #0
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 fb46 	bl	8009936 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af04      	add	r7, sp, #16
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4611      	mov	r1, r2
 80092c0:	461a      	mov	r2, r3
 80092c2:	460b      	mov	r3, r1
 80092c4:	80fb      	strh	r3, [r7, #6]
 80092c6:	4613      	mov	r3, r2
 80092c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092d8:	7979      	ldrb	r1, [r7, #5]
 80092da:	7e3b      	ldrb	r3, [r7, #24]
 80092dc:	9303      	str	r3, [sp, #12]
 80092de:	88fb      	ldrh	r3, [r7, #6]
 80092e0:	9302      	str	r3, [sp, #8]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	2301      	movs	r3, #1
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	2300      	movs	r3, #0
 80092ec:	2200      	movs	r2, #0
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f000 fb21 	bl	8009936 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b088      	sub	sp, #32
 8009302:	af04      	add	r7, sp, #16
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	4611      	mov	r1, r2
 800930a:	461a      	mov	r2, r3
 800930c:	460b      	mov	r3, r1
 800930e:	80fb      	strh	r3, [r7, #6]
 8009310:	4613      	mov	r3, r2
 8009312:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009314:	7979      	ldrb	r1, [r7, #5]
 8009316:	2300      	movs	r3, #0
 8009318:	9303      	str	r3, [sp, #12]
 800931a:	88fb      	ldrh	r3, [r7, #6]
 800931c:	9302      	str	r3, [sp, #8]
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	2301      	movs	r3, #1
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	2300      	movs	r3, #0
 8009328:	2201      	movs	r2, #1
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 fb03 	bl	8009936 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009330:	2300      	movs	r3, #0

}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b088      	sub	sp, #32
 800933e:	af04      	add	r7, sp, #16
 8009340:	60f8      	str	r0, [r7, #12]
 8009342:	60b9      	str	r1, [r7, #8]
 8009344:	4611      	mov	r1, r2
 8009346:	461a      	mov	r2, r3
 8009348:	460b      	mov	r3, r1
 800934a:	80fb      	strh	r3, [r7, #6]
 800934c:	4613      	mov	r3, r2
 800934e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800935e:	7979      	ldrb	r1, [r7, #5]
 8009360:	7e3b      	ldrb	r3, [r7, #24]
 8009362:	9303      	str	r3, [sp, #12]
 8009364:	88fb      	ldrh	r3, [r7, #6]
 8009366:	9302      	str	r3, [sp, #8]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	2301      	movs	r3, #1
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	2302      	movs	r3, #2
 8009372:	2200      	movs	r2, #0
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 fade 	bl	8009936 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af04      	add	r7, sp, #16
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4611      	mov	r1, r2
 8009390:	461a      	mov	r2, r3
 8009392:	460b      	mov	r3, r1
 8009394:	80fb      	strh	r3, [r7, #6]
 8009396:	4613      	mov	r3, r2
 8009398:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800939a:	7979      	ldrb	r1, [r7, #5]
 800939c:	2300      	movs	r3, #0
 800939e:	9303      	str	r3, [sp, #12]
 80093a0:	88fb      	ldrh	r3, [r7, #6]
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	2301      	movs	r3, #1
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	2302      	movs	r3, #2
 80093ae:	2201      	movs	r2, #1
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 fac0 	bl	8009936 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af04      	add	r7, sp, #16
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	4608      	mov	r0, r1
 80093ca:	4611      	mov	r1, r2
 80093cc:	461a      	mov	r2, r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	70fb      	strb	r3, [r7, #3]
 80093d2:	460b      	mov	r3, r1
 80093d4:	70bb      	strb	r3, [r7, #2]
 80093d6:	4613      	mov	r3, r2
 80093d8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80093da:	7878      	ldrb	r0, [r7, #1]
 80093dc:	78ba      	ldrb	r2, [r7, #2]
 80093de:	78f9      	ldrb	r1, [r7, #3]
 80093e0:	8b3b      	ldrh	r3, [r7, #24]
 80093e2:	9302      	str	r3, [sp, #8]
 80093e4:	7d3b      	ldrb	r3, [r7, #20]
 80093e6:	9301      	str	r3, [sp, #4]
 80093e8:	7c3b      	ldrb	r3, [r7, #16]
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	4603      	mov	r3, r0
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa53 	bl	800989a <USBH_LL_OpenPipe>

  return USBH_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	460b      	mov	r3, r1
 8009408:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fa72 	bl	80098f8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	460b      	mov	r3, r1
 8009428:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f836 	bl	800949c <USBH_GetFreePipe>
 8009430:	4603      	mov	r3, r0
 8009432:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009434:	89fb      	ldrh	r3, [r7, #14]
 8009436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800943a:	4293      	cmp	r3, r2
 800943c:	d00a      	beq.n	8009454 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800943e:	78fa      	ldrb	r2, [r7, #3]
 8009440:	89fb      	ldrh	r3, [r7, #14]
 8009442:	f003 030f 	and.w	r3, r3, #15
 8009446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	33e0      	adds	r3, #224	; 0xe0
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	440b      	add	r3, r1
 8009452:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009454:	89fb      	ldrh	r3, [r7, #14]
 8009456:	b2db      	uxtb	r3, r3
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	2b0f      	cmp	r3, #15
 8009470:	d80d      	bhi.n	800948e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009472:	78fb      	ldrb	r3, [r7, #3]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	33e0      	adds	r3, #224	; 0xe0
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009484:	6879      	ldr	r1, [r7, #4]
 8009486:	33e0      	adds	r3, #224	; 0xe0
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80094a8:	2300      	movs	r3, #0
 80094aa:	73fb      	strb	r3, [r7, #15]
 80094ac:	e00f      	b.n	80094ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	33e0      	adds	r3, #224	; 0xe0
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d102      	bne.n	80094c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	e007      	b.n	80094d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
 80094ca:	3301      	adds	r3, #1
 80094cc:	73fb      	strb	r3, [r7, #15]
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	2b0f      	cmp	r3, #15
 80094d2:	d9ec      	bls.n	80094ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80094d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80094e8:	2201      	movs	r2, #1
 80094ea:	490e      	ldr	r1, [pc, #56]	; (8009524 <MX_USB_HOST_Init+0x40>)
 80094ec:	480e      	ldr	r0, [pc, #56]	; (8009528 <MX_USB_HOST_Init+0x44>)
 80094ee:	f7fe fba7 	bl	8007c40 <USBH_Init>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80094f8:	f7f7 fb96 	bl	8000c28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80094fc:	490b      	ldr	r1, [pc, #44]	; (800952c <MX_USB_HOST_Init+0x48>)
 80094fe:	480a      	ldr	r0, [pc, #40]	; (8009528 <MX_USB_HOST_Init+0x44>)
 8009500:	f7fe fc2c 	bl	8007d5c <USBH_RegisterClass>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800950a:	f7f7 fb8d 	bl	8000c28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800950e:	4806      	ldr	r0, [pc, #24]	; (8009528 <MX_USB_HOST_Init+0x44>)
 8009510:	f7fe fcb0 	bl	8007e74 <USBH_Start>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800951a:	f7f7 fb85 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800951e:	bf00      	nop
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	08009545 	.word	0x08009545
 8009528:	2000032c 	.word	0x2000032c
 800952c:	2000000c 	.word	0x2000000c

08009530 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009534:	4802      	ldr	r0, [pc, #8]	; (8009540 <MX_USB_HOST_Process+0x10>)
 8009536:	f7fe fcad 	bl	8007e94 <USBH_Process>
}
 800953a:	bf00      	nop
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	2000032c 	.word	0x2000032c

08009544 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009550:	78fb      	ldrb	r3, [r7, #3]
 8009552:	3b01      	subs	r3, #1
 8009554:	2b04      	cmp	r3, #4
 8009556:	d819      	bhi.n	800958c <USBH_UserProcess+0x48>
 8009558:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <USBH_UserProcess+0x1c>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	0800958d 	.word	0x0800958d
 8009564:	0800957d 	.word	0x0800957d
 8009568:	0800958d 	.word	0x0800958d
 800956c:	08009585 	.word	0x08009585
 8009570:	08009575 	.word	0x08009575
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009574:	4b09      	ldr	r3, [pc, #36]	; (800959c <USBH_UserProcess+0x58>)
 8009576:	2203      	movs	r2, #3
 8009578:	701a      	strb	r2, [r3, #0]
  break;
 800957a:	e008      	b.n	800958e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800957c:	4b07      	ldr	r3, [pc, #28]	; (800959c <USBH_UserProcess+0x58>)
 800957e:	2202      	movs	r2, #2
 8009580:	701a      	strb	r2, [r3, #0]
  break;
 8009582:	e004      	b.n	800958e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009584:	4b05      	ldr	r3, [pc, #20]	; (800959c <USBH_UserProcess+0x58>)
 8009586:	2201      	movs	r2, #1
 8009588:	701a      	strb	r2, [r3, #0]
  break;
 800958a:	e000      	b.n	800958e <USBH_UserProcess+0x4a>

  default:
  break;
 800958c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800958e:	bf00      	nop
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	20000704 	.word	0x20000704

080095a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08a      	sub	sp, #40	; 0x28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095a8:	f107 0314 	add.w	r3, r7, #20
 80095ac:	2200      	movs	r2, #0
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	605a      	str	r2, [r3, #4]
 80095b2:	609a      	str	r2, [r3, #8]
 80095b4:	60da      	str	r2, [r3, #12]
 80095b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095c0:	d147      	bne.n	8009652 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095c2:	2300      	movs	r3, #0
 80095c4:	613b      	str	r3, [r7, #16]
 80095c6:	4b25      	ldr	r3, [pc, #148]	; (800965c <HAL_HCD_MspInit+0xbc>)
 80095c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ca:	4a24      	ldr	r2, [pc, #144]	; (800965c <HAL_HCD_MspInit+0xbc>)
 80095cc:	f043 0301 	orr.w	r3, r3, #1
 80095d0:	6313      	str	r3, [r2, #48]	; 0x30
 80095d2:	4b22      	ldr	r3, [pc, #136]	; (800965c <HAL_HCD_MspInit+0xbc>)
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	613b      	str	r3, [r7, #16]
 80095dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80095de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095e4:	2300      	movs	r3, #0
 80095e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095e8:	2300      	movs	r3, #0
 80095ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80095ec:	f107 0314 	add.w	r3, r7, #20
 80095f0:	4619      	mov	r1, r3
 80095f2:	481b      	ldr	r0, [pc, #108]	; (8009660 <HAL_HCD_MspInit+0xc0>)
 80095f4:	f7f8 ffa6 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80095f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80095fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095fe:	2302      	movs	r3, #2
 8009600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009602:	2300      	movs	r3, #0
 8009604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009606:	2303      	movs	r3, #3
 8009608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800960a:	230a      	movs	r3, #10
 800960c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800960e:	f107 0314 	add.w	r3, r7, #20
 8009612:	4619      	mov	r1, r3
 8009614:	4812      	ldr	r0, [pc, #72]	; (8009660 <HAL_HCD_MspInit+0xc0>)
 8009616:	f7f8 ff95 	bl	8002544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800961a:	4b10      	ldr	r3, [pc, #64]	; (800965c <HAL_HCD_MspInit+0xbc>)
 800961c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800961e:	4a0f      	ldr	r2, [pc, #60]	; (800965c <HAL_HCD_MspInit+0xbc>)
 8009620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009624:	6353      	str	r3, [r2, #52]	; 0x34
 8009626:	2300      	movs	r3, #0
 8009628:	60fb      	str	r3, [r7, #12]
 800962a:	4b0c      	ldr	r3, [pc, #48]	; (800965c <HAL_HCD_MspInit+0xbc>)
 800962c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800962e:	4a0b      	ldr	r2, [pc, #44]	; (800965c <HAL_HCD_MspInit+0xbc>)
 8009630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009634:	6453      	str	r3, [r2, #68]	; 0x44
 8009636:	4b09      	ldr	r3, [pc, #36]	; (800965c <HAL_HCD_MspInit+0xbc>)
 8009638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009642:	2200      	movs	r2, #0
 8009644:	2100      	movs	r1, #0
 8009646:	2043      	movs	r0, #67	; 0x43
 8009648:	f7f8 fbd5 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800964c:	2043      	movs	r0, #67	; 0x43
 800964e:	f7f8 fbee 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009652:	bf00      	nop
 8009654:	3728      	adds	r7, #40	; 0x28
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	40023800 	.word	0x40023800
 8009660:	40020000 	.word	0x40020000

08009664 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe ffed 	bl	8008652 <USBH_LL_IncTimer>
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff f825 	bl	80086de <USBH_LL_Connect>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff f82e 	bl	800870c <USBH_LL_Disconnect>
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	460b      	mov	r3, r1
 80096c2:	70fb      	strb	r3, [r7, #3]
 80096c4:	4613      	mov	r3, r2
 80096c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe ffdf 	bl	80086a6 <USBH_LL_PortEnabled>
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fe ffdf 	bl	80086c2 <USBH_LL_PortDisabled>
}
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800971a:	2b01      	cmp	r3, #1
 800971c:	d12a      	bne.n	8009774 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800971e:	4a18      	ldr	r2, [pc, #96]	; (8009780 <USBH_LL_Init+0x74>)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a15      	ldr	r2, [pc, #84]	; (8009780 <USBH_LL_Init+0x74>)
 800972a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800972e:	4b14      	ldr	r3, [pc, #80]	; (8009780 <USBH_LL_Init+0x74>)
 8009730:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009734:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009736:	4b12      	ldr	r3, [pc, #72]	; (8009780 <USBH_LL_Init+0x74>)
 8009738:	2208      	movs	r2, #8
 800973a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800973c:	4b10      	ldr	r3, [pc, #64]	; (8009780 <USBH_LL_Init+0x74>)
 800973e:	2201      	movs	r2, #1
 8009740:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009742:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <USBH_LL_Init+0x74>)
 8009744:	2200      	movs	r2, #0
 8009746:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009748:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <USBH_LL_Init+0x74>)
 800974a:	2202      	movs	r2, #2
 800974c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800974e:	4b0c      	ldr	r3, [pc, #48]	; (8009780 <USBH_LL_Init+0x74>)
 8009750:	2200      	movs	r2, #0
 8009752:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009754:	480a      	ldr	r0, [pc, #40]	; (8009780 <USBH_LL_Init+0x74>)
 8009756:	f7f9 f892 	bl	800287e <HAL_HCD_Init>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009760:	f7f7 fa62 	bl	8000c28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009764:	4806      	ldr	r0, [pc, #24]	; (8009780 <USBH_LL_Init+0x74>)
 8009766:	f7f9 fc76 	bl	8003056 <HAL_HCD_GetCurrentFrame>
 800976a:	4603      	mov	r3, r0
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fe ff60 	bl	8008634 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20000708 	.word	0x20000708

08009784 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800979a:	4618      	mov	r0, r3
 800979c:	f7f9 fbe5 	bl	8002f6a <HAL_HCD_Start>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f95c 	bl	8009a64 <USBH_Get_USB_Status>
 80097ac:	4603      	mov	r3, r0
 80097ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7f9 fbed 	bl	8002fb0 <HAL_HCD_Stop>
 80097d6:	4603      	mov	r3, r0
 80097d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 f941 	bl	8009a64 <USBH_Get_USB_Status>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80097f8:	2301      	movs	r3, #1
 80097fa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009802:	4618      	mov	r0, r3
 8009804:	f7f9 fc35 	bl	8003072 <HAL_HCD_GetCurrentSpeed>
 8009808:	4603      	mov	r3, r0
 800980a:	2b02      	cmp	r3, #2
 800980c:	d00c      	beq.n	8009828 <USBH_LL_GetSpeed+0x38>
 800980e:	2b02      	cmp	r3, #2
 8009810:	d80d      	bhi.n	800982e <USBH_LL_GetSpeed+0x3e>
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <USBH_LL_GetSpeed+0x2c>
 8009816:	2b01      	cmp	r3, #1
 8009818:	d003      	beq.n	8009822 <USBH_LL_GetSpeed+0x32>
 800981a:	e008      	b.n	800982e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
    break;
 8009820:	e008      	b.n	8009834 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009822:	2301      	movs	r3, #1
 8009824:	73fb      	strb	r3, [r7, #15]
    break;
 8009826:	e005      	b.n	8009834 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009828:	2302      	movs	r3, #2
 800982a:	73fb      	strb	r3, [r7, #15]
    break;
 800982c:	e002      	b.n	8009834 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800982e:	2301      	movs	r3, #1
 8009830:	73fb      	strb	r3, [r7, #15]
    break;
 8009832:	bf00      	nop
  }
  return  speed;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009854:	4618      	mov	r0, r3
 8009856:	f7f9 fbc8 	bl	8002fea <HAL_HCD_ResetPort>
 800985a:	4603      	mov	r3, r0
 800985c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	4618      	mov	r0, r3
 8009862:	f000 f8ff 	bl	8009a64 <USBH_Get_USB_Status>
 8009866:	4603      	mov	r3, r0
 8009868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986a:	7bbb      	ldrb	r3, [r7, #14]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009886:	78fa      	ldrb	r2, [r7, #3]
 8009888:	4611      	mov	r1, r2
 800988a:	4618      	mov	r0, r3
 800988c:	f7f9 fbcf 	bl	800302e <HAL_HCD_HC_GetXferCount>
 8009890:	4603      	mov	r3, r0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800989a:	b590      	push	{r4, r7, lr}
 800989c:	b089      	sub	sp, #36	; 0x24
 800989e:	af04      	add	r7, sp, #16
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	4608      	mov	r0, r1
 80098a4:	4611      	mov	r1, r2
 80098a6:	461a      	mov	r2, r3
 80098a8:	4603      	mov	r3, r0
 80098aa:	70fb      	strb	r3, [r7, #3]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70bb      	strb	r3, [r7, #2]
 80098b0:	4613      	mov	r3, r2
 80098b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80098c2:	787c      	ldrb	r4, [r7, #1]
 80098c4:	78ba      	ldrb	r2, [r7, #2]
 80098c6:	78f9      	ldrb	r1, [r7, #3]
 80098c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80098ca:	9302      	str	r3, [sp, #8]
 80098cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	4623      	mov	r3, r4
 80098da:	f7f9 f832 	bl	8002942 <HAL_HCD_HC_Init>
 80098de:	4603      	mov	r3, r0
 80098e0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 f8bd 	bl	8009a64 <USBH_Get_USB_Status>
 80098ea:	4603      	mov	r3, r0
 80098ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd90      	pop	{r4, r7, pc}

080098f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f7f9 f8a2 	bl	8002a60 <HAL_HCD_HC_Halt>
 800991c:	4603      	mov	r3, r0
 800991e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009920:	7bfb      	ldrb	r3, [r7, #15]
 8009922:	4618      	mov	r0, r3
 8009924:	f000 f89e 	bl	8009a64 <USBH_Get_USB_Status>
 8009928:	4603      	mov	r3, r0
 800992a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800992c:	7bbb      	ldrb	r3, [r7, #14]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009936:	b590      	push	{r4, r7, lr}
 8009938:	b089      	sub	sp, #36	; 0x24
 800993a:	af04      	add	r7, sp, #16
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	4608      	mov	r0, r1
 8009940:	4611      	mov	r1, r2
 8009942:	461a      	mov	r2, r3
 8009944:	4603      	mov	r3, r0
 8009946:	70fb      	strb	r3, [r7, #3]
 8009948:	460b      	mov	r3, r1
 800994a:	70bb      	strb	r3, [r7, #2]
 800994c:	4613      	mov	r3, r2
 800994e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800995e:	787c      	ldrb	r4, [r7, #1]
 8009960:	78ba      	ldrb	r2, [r7, #2]
 8009962:	78f9      	ldrb	r1, [r7, #3]
 8009964:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009968:	9303      	str	r3, [sp, #12]
 800996a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800996c:	9302      	str	r3, [sp, #8]
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	9301      	str	r3, [sp, #4]
 8009972:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	4623      	mov	r3, r4
 800997a:	f7f9 f895 	bl	8002aa8 <HAL_HCD_HC_SubmitRequest>
 800997e:	4603      	mov	r3, r0
 8009980:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	4618      	mov	r0, r3
 8009986:	f000 f86d 	bl	8009a64 <USBH_Get_USB_Status>
 800998a:	4603      	mov	r3, r0
 800998c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800998e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	bd90      	pop	{r4, r7, pc}

08009998 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099aa:	78fa      	ldrb	r2, [r7, #3]
 80099ac:	4611      	mov	r1, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7f9 fb29 	bl	8003006 <HAL_HCD_HC_GetURBState>
 80099b4:	4603      	mov	r3, r0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b082      	sub	sp, #8
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	460b      	mov	r3, r1
 80099c8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d103      	bne.n	80099dc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80099d4:	78fb      	ldrb	r3, [r7, #3]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 f870 	bl	8009abc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80099dc:	20c8      	movs	r0, #200	; 0xc8
 80099de:	f7f7 fd13 	bl	8001408 <HAL_Delay>
  return USBH_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70fb      	strb	r3, [r7, #3]
 80099f8:	4613      	mov	r3, r2
 80099fa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a02:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	212c      	movs	r1, #44	; 0x2c
 8009a0a:	fb01 f303 	mul.w	r3, r1, r3
 8009a0e:	4413      	add	r3, r2
 8009a10:	333b      	adds	r3, #59	; 0x3b
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d009      	beq.n	8009a2c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009a18:	78fb      	ldrb	r3, [r7, #3]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	212c      	movs	r1, #44	; 0x2c
 8009a1e:	fb01 f303 	mul.w	r3, r1, r3
 8009a22:	4413      	add	r3, r2
 8009a24:	3354      	adds	r3, #84	; 0x54
 8009a26:	78ba      	ldrb	r2, [r7, #2]
 8009a28:	701a      	strb	r2, [r3, #0]
 8009a2a:	e008      	b.n	8009a3e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009a2c:	78fb      	ldrb	r3, [r7, #3]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	212c      	movs	r1, #44	; 0x2c
 8009a32:	fb01 f303 	mul.w	r3, r1, r3
 8009a36:	4413      	add	r3, r2
 8009a38:	3355      	adds	r3, #85	; 0x55
 8009a3a:	78ba      	ldrb	r2, [r7, #2]
 8009a3c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7f7 fcd7 	bl	8001408 <HAL_Delay>
}
 8009a5a:	bf00      	nop
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d817      	bhi.n	8009aa8 <USBH_Get_USB_Status+0x44>
 8009a78:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <USBH_Get_USB_Status+0x1c>)
 8009a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009a91 	.word	0x08009a91
 8009a84:	08009a97 	.word	0x08009a97
 8009a88:	08009a9d 	.word	0x08009a9d
 8009a8c:	08009aa3 	.word	0x08009aa3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	73fb      	strb	r3, [r7, #15]
    break;
 8009a94:	e00b      	b.n	8009aae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009a96:	2302      	movs	r3, #2
 8009a98:	73fb      	strb	r3, [r7, #15]
    break;
 8009a9a:	e008      	b.n	8009aae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa0:	e005      	b.n	8009aae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa6:	e002      	b.n	8009aae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8009aac:	bf00      	nop
  }
  return usb_status;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009ac6:	79fb      	ldrb	r3, [r7, #7]
 8009ac8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009aca:	79fb      	ldrb	r3, [r7, #7]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d102      	bne.n	8009ad6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	73fb      	strb	r3, [r7, #15]
 8009ad4:	e001      	b.n	8009ada <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	461a      	mov	r2, r3
 8009ade:	2101      	movs	r1, #1
 8009ae0:	4803      	ldr	r0, [pc, #12]	; (8009af0 <MX_DriverVbusFS+0x34>)
 8009ae2:	f7f8 feb3 	bl	800284c <HAL_GPIO_WritePin>
}
 8009ae6:	bf00      	nop
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	40020800 	.word	0x40020800

08009af4 <__errno>:
 8009af4:	4b01      	ldr	r3, [pc, #4]	; (8009afc <__errno+0x8>)
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	2000002c 	.word	0x2000002c

08009b00 <__libc_init_array>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	4d0d      	ldr	r5, [pc, #52]	; (8009b38 <__libc_init_array+0x38>)
 8009b04:	4c0d      	ldr	r4, [pc, #52]	; (8009b3c <__libc_init_array+0x3c>)
 8009b06:	1b64      	subs	r4, r4, r5
 8009b08:	10a4      	asrs	r4, r4, #2
 8009b0a:	2600      	movs	r6, #0
 8009b0c:	42a6      	cmp	r6, r4
 8009b0e:	d109      	bne.n	8009b24 <__libc_init_array+0x24>
 8009b10:	4d0b      	ldr	r5, [pc, #44]	; (8009b40 <__libc_init_array+0x40>)
 8009b12:	4c0c      	ldr	r4, [pc, #48]	; (8009b44 <__libc_init_array+0x44>)
 8009b14:	f000 f92e 	bl	8009d74 <_init>
 8009b18:	1b64      	subs	r4, r4, r5
 8009b1a:	10a4      	asrs	r4, r4, #2
 8009b1c:	2600      	movs	r6, #0
 8009b1e:	42a6      	cmp	r6, r4
 8009b20:	d105      	bne.n	8009b2e <__libc_init_array+0x2e>
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b28:	4798      	blx	r3
 8009b2a:	3601      	adds	r6, #1
 8009b2c:	e7ee      	b.n	8009b0c <__libc_init_array+0xc>
 8009b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b32:	4798      	blx	r3
 8009b34:	3601      	adds	r6, #1
 8009b36:	e7f2      	b.n	8009b1e <__libc_init_array+0x1e>
 8009b38:	08009db8 	.word	0x08009db8
 8009b3c:	08009db8 	.word	0x08009db8
 8009b40:	08009db8 	.word	0x08009db8
 8009b44:	08009dbc 	.word	0x08009dbc

08009b48 <malloc>:
 8009b48:	4b02      	ldr	r3, [pc, #8]	; (8009b54 <malloc+0xc>)
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	6818      	ldr	r0, [r3, #0]
 8009b4e:	f000 b87f 	b.w	8009c50 <_malloc_r>
 8009b52:	bf00      	nop
 8009b54:	2000002c 	.word	0x2000002c

08009b58 <free>:
 8009b58:	4b02      	ldr	r3, [pc, #8]	; (8009b64 <free+0xc>)
 8009b5a:	4601      	mov	r1, r0
 8009b5c:	6818      	ldr	r0, [r3, #0]
 8009b5e:	f000 b80b 	b.w	8009b78 <_free_r>
 8009b62:	bf00      	nop
 8009b64:	2000002c 	.word	0x2000002c

08009b68 <memset>:
 8009b68:	4402      	add	r2, r0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d100      	bne.n	8009b72 <memset+0xa>
 8009b70:	4770      	bx	lr
 8009b72:	f803 1b01 	strb.w	r1, [r3], #1
 8009b76:	e7f9      	b.n	8009b6c <memset+0x4>

08009b78 <_free_r>:
 8009b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b7a:	2900      	cmp	r1, #0
 8009b7c:	d044      	beq.n	8009c08 <_free_r+0x90>
 8009b7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b82:	9001      	str	r0, [sp, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f1a1 0404 	sub.w	r4, r1, #4
 8009b8a:	bfb8      	it	lt
 8009b8c:	18e4      	addlt	r4, r4, r3
 8009b8e:	f000 f8e3 	bl	8009d58 <__malloc_lock>
 8009b92:	4a1e      	ldr	r2, [pc, #120]	; (8009c0c <_free_r+0x94>)
 8009b94:	9801      	ldr	r0, [sp, #4]
 8009b96:	6813      	ldr	r3, [r2, #0]
 8009b98:	b933      	cbnz	r3, 8009ba8 <_free_r+0x30>
 8009b9a:	6063      	str	r3, [r4, #4]
 8009b9c:	6014      	str	r4, [r2, #0]
 8009b9e:	b003      	add	sp, #12
 8009ba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ba4:	f000 b8de 	b.w	8009d64 <__malloc_unlock>
 8009ba8:	42a3      	cmp	r3, r4
 8009baa:	d908      	bls.n	8009bbe <_free_r+0x46>
 8009bac:	6825      	ldr	r5, [r4, #0]
 8009bae:	1961      	adds	r1, r4, r5
 8009bb0:	428b      	cmp	r3, r1
 8009bb2:	bf01      	itttt	eq
 8009bb4:	6819      	ldreq	r1, [r3, #0]
 8009bb6:	685b      	ldreq	r3, [r3, #4]
 8009bb8:	1949      	addeq	r1, r1, r5
 8009bba:	6021      	streq	r1, [r4, #0]
 8009bbc:	e7ed      	b.n	8009b9a <_free_r+0x22>
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	b10b      	cbz	r3, 8009bc8 <_free_r+0x50>
 8009bc4:	42a3      	cmp	r3, r4
 8009bc6:	d9fa      	bls.n	8009bbe <_free_r+0x46>
 8009bc8:	6811      	ldr	r1, [r2, #0]
 8009bca:	1855      	adds	r5, r2, r1
 8009bcc:	42a5      	cmp	r5, r4
 8009bce:	d10b      	bne.n	8009be8 <_free_r+0x70>
 8009bd0:	6824      	ldr	r4, [r4, #0]
 8009bd2:	4421      	add	r1, r4
 8009bd4:	1854      	adds	r4, r2, r1
 8009bd6:	42a3      	cmp	r3, r4
 8009bd8:	6011      	str	r1, [r2, #0]
 8009bda:	d1e0      	bne.n	8009b9e <_free_r+0x26>
 8009bdc:	681c      	ldr	r4, [r3, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	6053      	str	r3, [r2, #4]
 8009be2:	4421      	add	r1, r4
 8009be4:	6011      	str	r1, [r2, #0]
 8009be6:	e7da      	b.n	8009b9e <_free_r+0x26>
 8009be8:	d902      	bls.n	8009bf0 <_free_r+0x78>
 8009bea:	230c      	movs	r3, #12
 8009bec:	6003      	str	r3, [r0, #0]
 8009bee:	e7d6      	b.n	8009b9e <_free_r+0x26>
 8009bf0:	6825      	ldr	r5, [r4, #0]
 8009bf2:	1961      	adds	r1, r4, r5
 8009bf4:	428b      	cmp	r3, r1
 8009bf6:	bf04      	itt	eq
 8009bf8:	6819      	ldreq	r1, [r3, #0]
 8009bfa:	685b      	ldreq	r3, [r3, #4]
 8009bfc:	6063      	str	r3, [r4, #4]
 8009bfe:	bf04      	itt	eq
 8009c00:	1949      	addeq	r1, r1, r5
 8009c02:	6021      	streq	r1, [r4, #0]
 8009c04:	6054      	str	r4, [r2, #4]
 8009c06:	e7ca      	b.n	8009b9e <_free_r+0x26>
 8009c08:	b003      	add	sp, #12
 8009c0a:	bd30      	pop	{r4, r5, pc}
 8009c0c:	20000a0c 	.word	0x20000a0c

08009c10 <sbrk_aligned>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	4e0e      	ldr	r6, [pc, #56]	; (8009c4c <sbrk_aligned+0x3c>)
 8009c14:	460c      	mov	r4, r1
 8009c16:	6831      	ldr	r1, [r6, #0]
 8009c18:	4605      	mov	r5, r0
 8009c1a:	b911      	cbnz	r1, 8009c22 <sbrk_aligned+0x12>
 8009c1c:	f000 f88c 	bl	8009d38 <_sbrk_r>
 8009c20:	6030      	str	r0, [r6, #0]
 8009c22:	4621      	mov	r1, r4
 8009c24:	4628      	mov	r0, r5
 8009c26:	f000 f887 	bl	8009d38 <_sbrk_r>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	d00a      	beq.n	8009c44 <sbrk_aligned+0x34>
 8009c2e:	1cc4      	adds	r4, r0, #3
 8009c30:	f024 0403 	bic.w	r4, r4, #3
 8009c34:	42a0      	cmp	r0, r4
 8009c36:	d007      	beq.n	8009c48 <sbrk_aligned+0x38>
 8009c38:	1a21      	subs	r1, r4, r0
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f000 f87c 	bl	8009d38 <_sbrk_r>
 8009c40:	3001      	adds	r0, #1
 8009c42:	d101      	bne.n	8009c48 <sbrk_aligned+0x38>
 8009c44:	f04f 34ff 	mov.w	r4, #4294967295
 8009c48:	4620      	mov	r0, r4
 8009c4a:	bd70      	pop	{r4, r5, r6, pc}
 8009c4c:	20000a10 	.word	0x20000a10

08009c50 <_malloc_r>:
 8009c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c54:	1ccd      	adds	r5, r1, #3
 8009c56:	f025 0503 	bic.w	r5, r5, #3
 8009c5a:	3508      	adds	r5, #8
 8009c5c:	2d0c      	cmp	r5, #12
 8009c5e:	bf38      	it	cc
 8009c60:	250c      	movcc	r5, #12
 8009c62:	2d00      	cmp	r5, #0
 8009c64:	4607      	mov	r7, r0
 8009c66:	db01      	blt.n	8009c6c <_malloc_r+0x1c>
 8009c68:	42a9      	cmp	r1, r5
 8009c6a:	d905      	bls.n	8009c78 <_malloc_r+0x28>
 8009c6c:	230c      	movs	r3, #12
 8009c6e:	603b      	str	r3, [r7, #0]
 8009c70:	2600      	movs	r6, #0
 8009c72:	4630      	mov	r0, r6
 8009c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c78:	4e2e      	ldr	r6, [pc, #184]	; (8009d34 <_malloc_r+0xe4>)
 8009c7a:	f000 f86d 	bl	8009d58 <__malloc_lock>
 8009c7e:	6833      	ldr	r3, [r6, #0]
 8009c80:	461c      	mov	r4, r3
 8009c82:	bb34      	cbnz	r4, 8009cd2 <_malloc_r+0x82>
 8009c84:	4629      	mov	r1, r5
 8009c86:	4638      	mov	r0, r7
 8009c88:	f7ff ffc2 	bl	8009c10 <sbrk_aligned>
 8009c8c:	1c43      	adds	r3, r0, #1
 8009c8e:	4604      	mov	r4, r0
 8009c90:	d14d      	bne.n	8009d2e <_malloc_r+0xde>
 8009c92:	6834      	ldr	r4, [r6, #0]
 8009c94:	4626      	mov	r6, r4
 8009c96:	2e00      	cmp	r6, #0
 8009c98:	d140      	bne.n	8009d1c <_malloc_r+0xcc>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	eb04 0803 	add.w	r8, r4, r3
 8009ca4:	f000 f848 	bl	8009d38 <_sbrk_r>
 8009ca8:	4580      	cmp	r8, r0
 8009caa:	d13a      	bne.n	8009d22 <_malloc_r+0xd2>
 8009cac:	6821      	ldr	r1, [r4, #0]
 8009cae:	3503      	adds	r5, #3
 8009cb0:	1a6d      	subs	r5, r5, r1
 8009cb2:	f025 0503 	bic.w	r5, r5, #3
 8009cb6:	3508      	adds	r5, #8
 8009cb8:	2d0c      	cmp	r5, #12
 8009cba:	bf38      	it	cc
 8009cbc:	250c      	movcc	r5, #12
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4638      	mov	r0, r7
 8009cc2:	f7ff ffa5 	bl	8009c10 <sbrk_aligned>
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	d02b      	beq.n	8009d22 <_malloc_r+0xd2>
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	442b      	add	r3, r5
 8009cce:	6023      	str	r3, [r4, #0]
 8009cd0:	e00e      	b.n	8009cf0 <_malloc_r+0xa0>
 8009cd2:	6822      	ldr	r2, [r4, #0]
 8009cd4:	1b52      	subs	r2, r2, r5
 8009cd6:	d41e      	bmi.n	8009d16 <_malloc_r+0xc6>
 8009cd8:	2a0b      	cmp	r2, #11
 8009cda:	d916      	bls.n	8009d0a <_malloc_r+0xba>
 8009cdc:	1961      	adds	r1, r4, r5
 8009cde:	42a3      	cmp	r3, r4
 8009ce0:	6025      	str	r5, [r4, #0]
 8009ce2:	bf18      	it	ne
 8009ce4:	6059      	strne	r1, [r3, #4]
 8009ce6:	6863      	ldr	r3, [r4, #4]
 8009ce8:	bf08      	it	eq
 8009cea:	6031      	streq	r1, [r6, #0]
 8009cec:	5162      	str	r2, [r4, r5]
 8009cee:	604b      	str	r3, [r1, #4]
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	f104 060b 	add.w	r6, r4, #11
 8009cf6:	f000 f835 	bl	8009d64 <__malloc_unlock>
 8009cfa:	f026 0607 	bic.w	r6, r6, #7
 8009cfe:	1d23      	adds	r3, r4, #4
 8009d00:	1af2      	subs	r2, r6, r3
 8009d02:	d0b6      	beq.n	8009c72 <_malloc_r+0x22>
 8009d04:	1b9b      	subs	r3, r3, r6
 8009d06:	50a3      	str	r3, [r4, r2]
 8009d08:	e7b3      	b.n	8009c72 <_malloc_r+0x22>
 8009d0a:	6862      	ldr	r2, [r4, #4]
 8009d0c:	42a3      	cmp	r3, r4
 8009d0e:	bf0c      	ite	eq
 8009d10:	6032      	streq	r2, [r6, #0]
 8009d12:	605a      	strne	r2, [r3, #4]
 8009d14:	e7ec      	b.n	8009cf0 <_malloc_r+0xa0>
 8009d16:	4623      	mov	r3, r4
 8009d18:	6864      	ldr	r4, [r4, #4]
 8009d1a:	e7b2      	b.n	8009c82 <_malloc_r+0x32>
 8009d1c:	4634      	mov	r4, r6
 8009d1e:	6876      	ldr	r6, [r6, #4]
 8009d20:	e7b9      	b.n	8009c96 <_malloc_r+0x46>
 8009d22:	230c      	movs	r3, #12
 8009d24:	603b      	str	r3, [r7, #0]
 8009d26:	4638      	mov	r0, r7
 8009d28:	f000 f81c 	bl	8009d64 <__malloc_unlock>
 8009d2c:	e7a1      	b.n	8009c72 <_malloc_r+0x22>
 8009d2e:	6025      	str	r5, [r4, #0]
 8009d30:	e7de      	b.n	8009cf0 <_malloc_r+0xa0>
 8009d32:	bf00      	nop
 8009d34:	20000a0c 	.word	0x20000a0c

08009d38 <_sbrk_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4d06      	ldr	r5, [pc, #24]	; (8009d54 <_sbrk_r+0x1c>)
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4604      	mov	r4, r0
 8009d40:	4608      	mov	r0, r1
 8009d42:	602b      	str	r3, [r5, #0]
 8009d44:	f7f7 fa7c 	bl	8001240 <_sbrk>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_sbrk_r+0x1a>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_sbrk_r+0x1a>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	20000a14 	.word	0x20000a14

08009d58 <__malloc_lock>:
 8009d58:	4801      	ldr	r0, [pc, #4]	; (8009d60 <__malloc_lock+0x8>)
 8009d5a:	f000 b809 	b.w	8009d70 <__retarget_lock_acquire_recursive>
 8009d5e:	bf00      	nop
 8009d60:	20000a18 	.word	0x20000a18

08009d64 <__malloc_unlock>:
 8009d64:	4801      	ldr	r0, [pc, #4]	; (8009d6c <__malloc_unlock+0x8>)
 8009d66:	f000 b804 	b.w	8009d72 <__retarget_lock_release_recursive>
 8009d6a:	bf00      	nop
 8009d6c:	20000a18 	.word	0x20000a18

08009d70 <__retarget_lock_acquire_recursive>:
 8009d70:	4770      	bx	lr

08009d72 <__retarget_lock_release_recursive>:
 8009d72:	4770      	bx	lr

08009d74 <_init>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	bf00      	nop
 8009d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7a:	bc08      	pop	{r3}
 8009d7c:	469e      	mov	lr, r3
 8009d7e:	4770      	bx	lr

08009d80 <_fini>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	bf00      	nop
 8009d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d86:	bc08      	pop	{r3}
 8009d88:	469e      	mov	lr, r3
 8009d8a:	4770      	bx	lr
