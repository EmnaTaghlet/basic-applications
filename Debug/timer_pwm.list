
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e28  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008fc0  08008fc0  00018fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fdc  08008fdc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008fdc  08008fdc  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe4  08008fe4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe8  08008fe8  00018fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e0  20000090  0800907c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000970  0800907c  00020970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac1e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ccb  00000000  00000000  0003acde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0003e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  00040058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b90  00000000  00000000  00041570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7b1  00000000  00000000  0005b100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096dc7  00000000  00000000  000778b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e678  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006264  00000000  00000000  0010e6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008fa8 	.word	0x08008fa8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08008fa8 	.word	0x08008fa8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 int32_t CH1_DC = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fddf 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f853 	bl	8000594 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004ee:	f000 f8b9 	bl	8000664 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 fa41 	bl	8000978 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f6:	f000 f8d5 	bl	80006a4 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004fa:	f000 f901 	bl	8000700 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004fe:	f000 f92d 	bl	800075c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000502:	f000 f95b 	bl	80007bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000506:	f008 f907 	bl	8008718 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800050a:	f000 f98d 	bl	8000828 <MX_TIM2_Init>
  MX_TIM4_Init();
 800050e:	f000 f9d9 	bl	80008c4 <MX_TIM4_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000512:	4816      	ldr	r0, [pc, #88]	; (800056c <main+0x90>)
 8000514:	f004 f9c2 	bl	800489c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000518:	2100      	movs	r1, #0
 800051a:	4815      	ldr	r0, [pc, #84]	; (8000570 <main+0x94>)
 800051c:	f004 fa70 	bl	8004a00 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < 1000; i+=3)
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e009      	b.n	800053a <main+0x5e>
	  {
	    htim4.Instance->CCR1 = i;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <main+0x94>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	635a      	str	r2, [r3, #52]	; 0x34
	    HAL_Delay(1);
 800052e:	2001      	movs	r0, #1
 8000530:	f000 fe2c 	bl	800118c <HAL_Delay>
	  for (int i = 0; i < 1000; i+=3)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3303      	adds	r3, #3
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000540:	dbf1      	blt.n	8000526 <main+0x4a>
	  }
	  for (int i = 1000; i > 0; i-=3)
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	e009      	b.n	800055e <main+0x82>
	  {
	    htim4.Instance->CCR1 = i;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <main+0x94>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
	    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f000 fe1a 	bl	800118c <HAL_Delay>
	  for (int i = 1000; i > 0; i-=3)
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	3b03      	subs	r3, #3
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	2b00      	cmp	r3, #0
 8000562:	dcf2      	bgt.n	800054a <main+0x6e>
	  }


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000564:	f008 f8fe 	bl	8008764 <MX_USB_HOST_Process>
	  for (int i = 0; i < 1000; i+=3)
 8000568:	e7da      	b.n	8000520 <main+0x44>
 800056a:	bf00      	nop
 800056c:	200001e8 	.word	0x200001e8
 8000570:	20000230 	.word	0x20000230

08000574 <HAL_TIM_PeriodElapsedCallback>:

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800057c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000582:	f001 f8d6 	bl	8001732 <HAL_GPIO_TogglePin>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40020c00 	.word	0x40020c00

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f008 fbfa 	bl	8008d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b27      	ldr	r3, [pc, #156]	; (800065c <SystemClock_Config+0xc8>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a26      	ldr	r2, [pc, #152]	; (800065c <SystemClock_Config+0xc8>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b24      	ldr	r3, [pc, #144]	; (800065c <SystemClock_Config+0xc8>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b21      	ldr	r3, [pc, #132]	; (8000660 <SystemClock_Config+0xcc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a20      	ldr	r2, [pc, #128]	; (8000660 <SystemClock_Config+0xcc>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <SystemClock_Config+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000608:	2348      	movs	r3, #72	; 0x48
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000610:	2303      	movs	r3, #3
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f003 fa93 	bl	8003b44 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000624:	f000 fa82 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f003 fcf5 	bl	8004034 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000650:	f000 fa6c 	bl	8000b2c <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	; 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800066a:	463b      	mov	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
 8000678:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800067a:	2301      	movs	r3, #1
 800067c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800067e:	23c8      	movs	r3, #200	; 0xc8
 8000680:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000682:	2305      	movs	r3, #5
 8000684:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000686:	2302      	movs	r3, #2
 8000688:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fedd 	bl	800444c <HAL_RCCEx_PeriphCLKConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000698:	f000 fa48 	bl	8000b2c <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MX_I2C1_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006b0:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_I2C1_Init+0x58>)
 80006b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006e2:	f002 fc4b 	bl	8002f7c <HAL_I2C_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 fa1e 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000ac 	.word	0x200000ac
 80006f8:	40005400 	.word	0x40005400
 80006fc:	000186a0 	.word	0x000186a0

08000700 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2S2_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <MX_I2S2_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_I2S2_Init+0x50>)
 800070c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000710:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_I2S2_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MX_I2S2_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_I2S2_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_I2S2_Init+0x50>)
 8000726:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <MX_I2S2_Init+0x58>)
 8000728:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_I2S2_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_I2S2_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_I2S2_Init+0x50>)
 8000738:	2201      	movs	r2, #1
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_I2S2_Init+0x50>)
 800073e:	f002 fd61 	bl	8003204 <HAL_I2S_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 f9f0 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000100 	.word	0x20000100
 8000754:	40003800 	.word	0x40003800
 8000758:	00017700 	.word	0x00017700

0800075c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <MX_I2S3_Init+0x58>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_I2S3_Init+0x54>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000784:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <MX_I2S3_Init+0x5c>)
 8000786:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_I2S3_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_I2S3_Init+0x54>)
 800079c:	f002 fd32 	bl	8003204 <HAL_I2S_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007a6:	f000 f9c1 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000148 	.word	0x20000148
 80007b4:	40003c00 	.word	0x40003c00
 80007b8:	00017700 	.word	0x00017700

080007bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_SPI1_Init+0x64>)
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <MX_SPI1_Init+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_SPI1_Init+0x64>)
 80007c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_SPI1_Init+0x64>)
 80007e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_SPI1_Init+0x64>)
 8000808:	220a      	movs	r2, #10
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_SPI1_Init+0x64>)
 800080e:	f003 ff6d 	bl	80046ec <HAL_SPI_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000818:	f000 f988 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000190 	.word	0x20000190
 8000824:	40013000 	.word	0x40013000

08000828 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	463b      	mov	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_TIM2_Init+0x98>)
 800084e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_TIM2_Init+0x98>)
 800085c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_TIM2_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000870:	f003 ffc5 	bl	80047fe <HAL_TIM_Base_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800087a:	f000 f957 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_TIM2_Init+0x98>)
 800088c:	f004 fb32 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000896:	f000 f949 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_TIM2_Init+0x98>)
 80008a8:	f004 fee0 	bl	800566c <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008b2:	f000 f93b 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200001e8 	.word	0x200001e8

080008c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
 80008e2:	615a      	str	r2, [r3, #20]
 80008e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_TIM4_Init+0xac>)
 80008e8:	4a22      	ldr	r2, [pc, #136]	; (8000974 <MX_TIM4_Init+0xb0>)
 80008ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_TIM4_Init+0xac>)
 80008ee:	222f      	movs	r2, #47	; 0x2f
 80008f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_TIM4_Init+0xac>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_TIM4_Init+0xac>)
 80008fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_TIM4_Init+0xac>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_TIM4_Init+0xac>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800090c:	4818      	ldr	r0, [pc, #96]	; (8000970 <MX_TIM4_Init+0xac>)
 800090e:	f004 f827 	bl	8004960 <HAL_TIM_PWM_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000918:	f000 f908 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000924:	f107 0320 	add.w	r3, r7, #32
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_TIM4_Init+0xac>)
 800092c:	f004 fe9e 	bl	800566c <HAL_TIMEx_MasterConfigSynchronization>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000936:	f000 f8f9 	bl	8000b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093a:	2360      	movs	r3, #96	; 0x60
 800093c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 900;
 800093e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000942:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	4619      	mov	r1, r3
 8000952:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM4_Init+0xac>)
 8000954:	f004 fa0c 	bl	8004d70 <HAL_TIM_PWM_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800095e:	f000 f8e5 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000962:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM4_Init+0xac>)
 8000964:	f000 fab6 	bl	8000ed4 <HAL_TIM_MspPostInit>

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000230 	.word	0x20000230
 8000974:	40000800 	.word	0x40000800

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	4b61      	ldr	r3, [pc, #388]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a60      	ldr	r2, [pc, #384]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b5e      	ldr	r3, [pc, #376]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0310 	and.w	r3, r3, #16
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	4b5a      	ldr	r3, [pc, #360]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a59      	ldr	r2, [pc, #356]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b57      	ldr	r3, [pc, #348]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b53      	ldr	r3, [pc, #332]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a52      	ldr	r2, [pc, #328]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b50      	ldr	r3, [pc, #320]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b4c      	ldr	r3, [pc, #304]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a4b      	ldr	r2, [pc, #300]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b49      	ldr	r3, [pc, #292]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b45      	ldr	r3, [pc, #276]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a44      	ldr	r2, [pc, #272]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b42      	ldr	r3, [pc, #264]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b3e      	ldr	r3, [pc, #248]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a3d      	ldr	r2, [pc, #244]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 8000a24:	f043 0308 	orr.w	r3, r3, #8
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b3b      	ldr	r3, [pc, #236]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0308 	and.w	r3, r3, #8
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2108      	movs	r1, #8
 8000a3a:	4838      	ldr	r0, [pc, #224]	; (8000b1c <MX_GPIO_Init+0x1a4>)
 8000a3c:	f000 fe60 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2101      	movs	r1, #1
 8000a44:	4836      	ldr	r0, [pc, #216]	; (8000b20 <MX_GPIO_Init+0x1a8>)
 8000a46:	f000 fe5b 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f24e 0110 	movw	r1, #57360	; 0xe010
 8000a50:	4834      	ldr	r0, [pc, #208]	; (8000b24 <MX_GPIO_Init+0x1ac>)
 8000a52:	f000 fe55 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a56:	2304      	movs	r3, #4
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	482c      	ldr	r0, [pc, #176]	; (8000b1c <MX_GPIO_Init+0x1a4>)
 8000a6a:	f000 fcc5 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a6e:	2308      	movs	r3, #8
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4825      	ldr	r0, [pc, #148]	; (8000b1c <MX_GPIO_Init+0x1a4>)
 8000a86:	f000 fcb7 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a8a:	2332      	movs	r3, #50	; 0x32
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481f      	ldr	r0, [pc, #124]	; (8000b1c <MX_GPIO_Init+0x1a4>)
 8000aa0:	f000 fcaa 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4819      	ldr	r0, [pc, #100]	; (8000b20 <MX_GPIO_Init+0x1a8>)
 8000abc:	f000 fc9c 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ac4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <MX_GPIO_Init+0x1b0>)
 8000ad6:	f000 fc8f 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8000ada:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <MX_GPIO_Init+0x1ac>)
 8000af4:	f000 fc80 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000af8:	2320      	movs	r3, #32
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <MX_GPIO_Init+0x1ac>)
 8000b0c:	f000 fc74 	bl	80013f8 <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3730      	adds	r7, #48	; 0x30
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	40020000 	.word	0x40020000

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b76:	2007      	movs	r0, #7
 8000b78:	f000 fbfc 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <HAL_I2C_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12c      	bne.n	8000c04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bc6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bcc:	2312      	movs	r3, #18
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	480c      	ldr	r0, [pc, #48]	; (8000c14 <HAL_I2C_MspInit+0x8c>)
 8000be4:	f000 fc08 	bl	80013f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400

08000c18 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a59      	ldr	r2, [pc, #356]	; (8000d9c <HAL_I2S_MspInit+0x184>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d15b      	bne.n	8000cf2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
 8000c3e:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a57      	ldr	r2, [pc, #348]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b55      	ldr	r3, [pc, #340]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	623b      	str	r3, [r7, #32]
 8000c54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	4b51      	ldr	r3, [pc, #324]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a50      	ldr	r2, [pc, #320]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b4e      	ldr	r3, [pc, #312]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	61fb      	str	r3, [r7, #28]
 8000c70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	4b4a      	ldr	r3, [pc, #296]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a49      	ldr	r2, [pc, #292]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b47      	ldr	r3, [pc, #284]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
 8000c8c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	483e      	ldr	r0, [pc, #248]	; (8000da4 <HAL_I2S_MspInit+0x18c>)
 8000caa:	f000 fba5 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cae:	2308      	movs	r3, #8
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4836      	ldr	r0, [pc, #216]	; (8000da4 <HAL_I2S_MspInit+0x18c>)
 8000cca:	f000 fb95 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000cce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce0:	2305      	movs	r3, #5
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	482f      	ldr	r0, [pc, #188]	; (8000da8 <HAL_I2S_MspInit+0x190>)
 8000cec:	f000 fb84 	bl	80013f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cf0:	e04f      	b.n	8000d92 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a2d      	ldr	r2, [pc, #180]	; (8000dac <HAL_I2S_MspInit+0x194>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d14a      	bne.n	8000d92 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_I2S_MspInit+0x188>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d50:	2310      	movs	r3, #16
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d60:	2306      	movs	r3, #6
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4811      	ldr	r0, [pc, #68]	; (8000db0 <HAL_I2S_MspInit+0x198>)
 8000d6c:	f000 fb44 	bl	80013f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d70:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d82:	2306      	movs	r3, #6
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_I2S_MspInit+0x18c>)
 8000d8e:	f000 fb33 	bl	80013f8 <HAL_GPIO_Init>
}
 8000d92:	bf00      	nop
 8000d94:	3738      	adds	r7, #56	; 0x38
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40003800 	.word	0x40003800
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020800 	.word	0x40020800
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40003c00 	.word	0x40003c00
 8000db0:	40020000 	.word	0x40020000

08000db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <HAL_SPI_MspInit+0x84>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d12b      	bne.n	8000e2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000de0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e0e:	23e0      	movs	r3, #224	; 0xe0
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_SPI_MspInit+0x8c>)
 8000e2a:	f000 fae5 	bl	80013f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40013000 	.word	0x40013000
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000

08000e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e54:	d115      	bne.n	8000e82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_TIM_Base_MspInit+0x48>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <HAL_TIM_Base_MspInit+0x48>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_TIM_Base_MspInit+0x48>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	201c      	movs	r0, #28
 8000e78:	f000 fa87 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e7c:	201c      	movs	r0, #28
 8000e7e:	f000 faa0 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800

08000e90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_TIM_PWM_MspInit+0x3c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10d      	bne.n	8000ebe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x40>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x40>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x40>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40000800 	.word	0x40000800
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <HAL_TIM_MspPostInit+0x68>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d11e      	bne.n	8000f34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_TIM_MspPostInit+0x6c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <HAL_TIM_MspPostInit+0x6c>)
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_TIM_MspPostInit+0x6c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <HAL_TIM_MspPostInit+0x70>)
 8000f30:	f000 fa62 	bl	80013f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40000800 	.word	0x40000800
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020c00 	.word	0x40020c00

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <NMI_Handler+0x4>

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f94:	f000 f8da 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <TIM2_IRQHandler+0x10>)
 8000fa2:	f003 fddd 	bl	8004b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001e8 	.word	0x200001e8

08000fb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <OTG_FS_IRQHandler+0x10>)
 8000fb6:	f000 fe41 	bl	8001c3c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000065c 	.word	0x2000065c

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f007 fe98 	bl	8008d28 <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20020000 	.word	0x20020000
 8001024:	00000400 	.word	0x00000400
 8001028:	20000278 	.word	0x20000278
 800102c:	20000970 	.word	0x20000970

08001030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800105a:	490e      	ldr	r1, [pc, #56]	; (8001094 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001070:	4c0b      	ldr	r4, [pc, #44]	; (80010a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800107e:	f7ff ffd7 	bl	8001030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f007 fe57 	bl	8008d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff fa29 	bl	80004dc <main>
  bx  lr    
 800108a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800108c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001098:	08008fec 	.word	0x08008fec
  ldr r2, =_sbss
 800109c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80010a0:	20000970 	.word	0x20000970

080010a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_Init+0x40>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_Init+0x40>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x40>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f94f 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fd2c 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023c00 	.word	0x40023c00

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f967 	bl	80013de <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 f92f 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	20000008 	.word	0x20000008
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008
 8001170:	2000027c 	.word	0x2000027c

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000027c 	.word	0x2000027c

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffde 	bl	8001174 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff29 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff3e 	bl	800121c <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff8e 	bl	80012c8 <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5d 	bl	8001274 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff31 	bl	8001238 <__NVIC_EnableIRQ>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffa2 	bl	8001330 <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	e159      	b.n	80016c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	429a      	cmp	r2, r3
 800142e:	f040 8148 	bne.w	80016c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d005      	beq.n	800144a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001446:	2b02      	cmp	r3, #2
 8001448:	d130      	bne.n	80014ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001480:	2201      	movs	r2, #1
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	091b      	lsrs	r3, r3, #4
 8001496:	f003 0201 	and.w	r2, r3, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d017      	beq.n	80014e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d123      	bne.n	800153c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	69b9      	ldr	r1, [r7, #24]
 8001538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0203 	and.w	r2, r3, #3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80a2 	beq.w	80016c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <HAL_GPIO_Init+0x2e8>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a56      	ldr	r2, [pc, #344]	; (80016e0 <HAL_GPIO_Init+0x2e8>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b54      	ldr	r3, [pc, #336]	; (80016e0 <HAL_GPIO_Init+0x2e8>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800159a:	4a52      	ldr	r2, [pc, #328]	; (80016e4 <HAL_GPIO_Init+0x2ec>)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d019      	beq.n	80015fa <HAL_GPIO_Init+0x202>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a48      	ldr	r2, [pc, #288]	; (80016ec <HAL_GPIO_Init+0x2f4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x1fe>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a47      	ldr	r2, [pc, #284]	; (80016f0 <HAL_GPIO_Init+0x2f8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00d      	beq.n	80015f2 <HAL_GPIO_Init+0x1fa>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a46      	ldr	r2, [pc, #280]	; (80016f4 <HAL_GPIO_Init+0x2fc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x1f6>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a45      	ldr	r2, [pc, #276]	; (80016f8 <HAL_GPIO_Init+0x300>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_GPIO_Init+0x1f2>
 80015e6:	2304      	movs	r3, #4
 80015e8:	e008      	b.n	80015fc <HAL_GPIO_Init+0x204>
 80015ea:	2307      	movs	r3, #7
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x204>
 80015ee:	2303      	movs	r3, #3
 80015f0:	e004      	b.n	80015fc <HAL_GPIO_Init+0x204>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x204>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x204>
 80015fa:	2300      	movs	r3, #0
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	f002 0203 	and.w	r2, r2, #3
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	4093      	lsls	r3, r2
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800160c:	4935      	ldr	r1, [pc, #212]	; (80016e4 <HAL_GPIO_Init+0x2ec>)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_GPIO_Init+0x304>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163e:	4a2f      	ldr	r2, [pc, #188]	; (80016fc <HAL_GPIO_Init+0x304>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_GPIO_Init+0x304>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001668:	4a24      	ldr	r2, [pc, #144]	; (80016fc <HAL_GPIO_Init+0x304>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_GPIO_Init+0x304>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <HAL_GPIO_Init+0x304>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_GPIO_Init+0x304>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016bc:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <HAL_GPIO_Init+0x304>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3301      	adds	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	f67f aea2 	bls.w	8001414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40013800 	.word	0x40013800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40013c00 	.word	0x40013c00

08001700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800171c:	e003      	b.n	8001726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	619a      	str	r2, [r3, #24]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001732:	b480      	push	{r7}
 8001734:	b085      	sub	sp, #20
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001744:	887a      	ldrh	r2, [r7, #2]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4013      	ands	r3, r2
 800174a:	041a      	lsls	r2, r3, #16
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	43d9      	mvns	r1, r3
 8001750:	887b      	ldrh	r3, [r7, #2]
 8001752:	400b      	ands	r3, r1
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	619a      	str	r2, [r3, #24]
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001766:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001768:	b08f      	sub	sp, #60	; 0x3c
 800176a:	af0a      	add	r7, sp, #40	; 0x28
 800176c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e054      	b.n	8001822 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f007 f81e 	bl	80087d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2203      	movs	r2, #3
 800179c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 f84c 	bl	8005854 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	687e      	ldr	r6, [r7, #4]
 80017c4:	466d      	mov	r5, sp
 80017c6:	f106 0410 	add.w	r4, r6, #16
 80017ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80017da:	1d33      	adds	r3, r6, #4
 80017dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017de:	6838      	ldr	r0, [r7, #0]
 80017e0:	f003 ffc6 	bl	8005770 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	4618      	mov	r0, r3
 80017ec:	f004 f843 	bl	8005876 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	687e      	ldr	r6, [r7, #4]
 80017f8:	466d      	mov	r5, sp
 80017fa:	f106 0410 	add.w	r4, r6, #16
 80017fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001806:	e894 0003 	ldmia.w	r4, {r0, r1}
 800180a:	e885 0003 	stmia.w	r5, {r0, r1}
 800180e:	1d33      	adds	r3, r6, #4
 8001810:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001812:	6838      	ldr	r0, [r7, #0]
 8001814:	f004 f9cc 	bl	8005bb0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800182a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800182a:	b590      	push	{r4, r7, lr}
 800182c:	b089      	sub	sp, #36	; 0x24
 800182e:	af04      	add	r7, sp, #16
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	4608      	mov	r0, r1
 8001834:	4611      	mov	r1, r2
 8001836:	461a      	mov	r2, r3
 8001838:	4603      	mov	r3, r0
 800183a:	70fb      	strb	r3, [r7, #3]
 800183c:	460b      	mov	r3, r1
 800183e:	70bb      	strb	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_HCD_HC_Init+0x28>
 800184e:	2302      	movs	r3, #2
 8001850:	e076      	b.n	8001940 <HAL_HCD_HC_Init+0x116>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	333d      	adds	r3, #61	; 0x3d
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	212c      	movs	r1, #44	; 0x2c
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	3338      	adds	r3, #56	; 0x38
 800187a:	787a      	ldrb	r2, [r7, #1]
 800187c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	3340      	adds	r3, #64	; 0x40
 800188c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800188e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	212c      	movs	r1, #44	; 0x2c
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	4413      	add	r3, r2
 800189c:	3339      	adds	r3, #57	; 0x39
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	212c      	movs	r1, #44	; 0x2c
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	333f      	adds	r3, #63	; 0x3f
 80018b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	78ba      	ldrb	r2, [r7, #2]
 80018ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018be:	b2d0      	uxtb	r0, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	333a      	adds	r3, #58	; 0x3a
 80018cc:	4602      	mov	r2, r0
 80018ce:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	da09      	bge.n	80018ec <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	333b      	adds	r3, #59	; 0x3b
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e008      	b.n	80018fe <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	333b      	adds	r3, #59	; 0x3b
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	212c      	movs	r1, #44	; 0x2c
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	4413      	add	r3, r2
 800190a:	333c      	adds	r3, #60	; 0x3c
 800190c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001910:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	787c      	ldrb	r4, [r7, #1]
 8001918:	78ba      	ldrb	r2, [r7, #2]
 800191a:	78f9      	ldrb	r1, [r7, #3]
 800191c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	f897 3020 	ldrb.w	r3, [r7, #32]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4623      	mov	r3, r4
 800192e:	f004 fac5 	bl	8005ebc <USB_HC_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bd90      	pop	{r4, r7, pc}

08001948 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_HCD_HC_Halt+0x1e>
 8001962:	2302      	movs	r3, #2
 8001964:	e00f      	b.n	8001986 <HAL_HCD_HC_Halt+0x3e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fd15 	bl	80063a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	461a      	mov	r2, r3
 800199e:	4603      	mov	r3, r0
 80019a0:	70fb      	strb	r3, [r7, #3]
 80019a2:	460b      	mov	r3, r1
 80019a4:	70bb      	strb	r3, [r7, #2]
 80019a6:	4613      	mov	r3, r2
 80019a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	333b      	adds	r3, #59	; 0x3b
 80019b8:	78ba      	ldrb	r2, [r7, #2]
 80019ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	333f      	adds	r3, #63	; 0x3f
 80019ca:	787a      	ldrb	r2, [r7, #1]
 80019cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019ce:	7c3b      	ldrb	r3, [r7, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d112      	bne.n	80019fa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	3342      	adds	r3, #66	; 0x42
 80019e2:	2203      	movs	r2, #3
 80019e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	333d      	adds	r3, #61	; 0x3d
 80019f4:	7f3a      	ldrb	r2, [r7, #28]
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e008      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	3342      	adds	r3, #66	; 0x42
 8001a08:	2202      	movs	r2, #2
 8001a0a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a0c:	787b      	ldrb	r3, [r7, #1]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	f200 80c6 	bhi.w	8001ba0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001a14:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1a:	bf00      	nop
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001b8d 	.word	0x08001b8d
 8001a24:	08001a91 	.word	0x08001a91
 8001a28:	08001b0f 	.word	0x08001b0f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a2c:	7c3b      	ldrb	r3, [r7, #16]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	f040 80b8 	bne.w	8001ba4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a34:	78bb      	ldrb	r3, [r7, #2]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 80b4 	bne.w	8001ba4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a3c:	8b3b      	ldrh	r3, [r7, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d108      	bne.n	8001a54 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	212c      	movs	r1, #44	; 0x2c
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3355      	adds	r3, #85	; 0x55
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	212c      	movs	r1, #44	; 0x2c
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	3355      	adds	r3, #85	; 0x55
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	212c      	movs	r1, #44	; 0x2c
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	3342      	adds	r3, #66	; 0x42
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a7a:	e093      	b.n	8001ba4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	212c      	movs	r1, #44	; 0x2c
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	3342      	adds	r3, #66	; 0x42
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	701a      	strb	r2, [r3, #0]
      break;
 8001a8e:	e089      	b.n	8001ba4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a90:	78bb      	ldrb	r3, [r7, #2]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d11d      	bne.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	212c      	movs	r1, #44	; 0x2c
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3355      	adds	r3, #85	; 0x55
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	212c      	movs	r1, #44	; 0x2c
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3342      	adds	r3, #66	; 0x42
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001abc:	e073      	b.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	3342      	adds	r3, #66	; 0x42
 8001acc:	2202      	movs	r2, #2
 8001ace:	701a      	strb	r2, [r3, #0]
      break;
 8001ad0:	e069      	b.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3354      	adds	r3, #84	; 0x54
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d109      	bne.n	8001afa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	212c      	movs	r1, #44	; 0x2c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	3342      	adds	r3, #66	; 0x42
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
      break;
 8001af8:	e055      	b.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	212c      	movs	r1, #44	; 0x2c
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	3342      	adds	r3, #66	; 0x42
 8001b08:	2202      	movs	r2, #2
 8001b0a:	701a      	strb	r2, [r3, #0]
      break;
 8001b0c:	e04b      	b.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b0e:	78bb      	ldrb	r3, [r7, #2]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d11d      	bne.n	8001b50 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	212c      	movs	r1, #44	; 0x2c
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3355      	adds	r3, #85	; 0x55
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3342      	adds	r3, #66	; 0x42
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b3a:	e034      	b.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3342      	adds	r3, #66	; 0x42
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
      break;
 8001b4e:	e02a      	b.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3354      	adds	r3, #84	; 0x54
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d109      	bne.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3342      	adds	r3, #66	; 0x42
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
      break;
 8001b76:	e016      	b.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3342      	adds	r3, #66	; 0x42
 8001b86:	2202      	movs	r2, #2
 8001b88:	701a      	strb	r2, [r3, #0]
      break;
 8001b8a:	e00c      	b.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	212c      	movs	r1, #44	; 0x2c
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	3342      	adds	r3, #66	; 0x42
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
      break;
 8001b9e:	e002      	b.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001ba0:	bf00      	nop
 8001ba2:	e000      	b.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ba4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3344      	adds	r3, #68	; 0x44
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	8b3a      	ldrh	r2, [r7, #24]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	202c      	movs	r0, #44	; 0x2c
 8001bc0:	fb00 f303 	mul.w	r3, r0, r3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	334c      	adds	r3, #76	; 0x4c
 8001bc8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	212c      	movs	r1, #44	; 0x2c
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3360      	adds	r3, #96	; 0x60
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	212c      	movs	r1, #44	; 0x2c
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	3350      	adds	r3, #80	; 0x50
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	212c      	movs	r1, #44	; 0x2c
 8001bf4:	fb01 f303 	mul.w	r3, r1, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3339      	adds	r3, #57	; 0x39
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	212c      	movs	r1, #44	; 0x2c
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3361      	adds	r3, #97	; 0x61
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	222c      	movs	r2, #44	; 0x2c
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	3338      	adds	r3, #56	; 0x38
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	18d1      	adds	r1, r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f004 fa68 	bl	8006100 <USB_HC_StartXfer>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop

08001c3c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 ff69 	bl	8005b2a <USB_GetMode>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	f040 80f6 	bne.w	8001e4c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 ff4d 	bl	8005b04 <USB_ReadInterrupts>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80ec 	beq.w	8001e4a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 ff44 	bl	8005b04 <USB_ReadInterrupts>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c86:	d104      	bne.n	8001c92 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 ff34 	bl	8005b04 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ca6:	d104      	bne.n	8001cb2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 ff24 	bl	8005b04 <USB_ReadInterrupts>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cc6:	d104      	bne.n	8001cd2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 ff14 	bl	8005b04 <USB_ReadInterrupts>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d103      	bne.n	8001cee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2202      	movs	r2, #2
 8001cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 ff06 	bl	8005b04 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d02:	d11c      	bne.n	8001d3e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d0c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10f      	bne.n	8001d3e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d1e:	2110      	movs	r1, #16
 8001d20:	6938      	ldr	r0, [r7, #16]
 8001d22:	f003 fdf5 	bl	8005910 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d26:	6938      	ldr	r0, [r7, #16]
 8001d28:	f003 fe26 	bl	8005978 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fffc 	bl	8005d30 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f006 fdc9 	bl	80088d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 fede 	bl	8005b04 <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d52:	d102      	bne.n	8001d5a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f001 f89e 	bl	8002e96 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fed0 	bl	8005b04 <USB_ReadInterrupts>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d106      	bne.n	8001d7c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f006 fd92 	bl	8008898 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2208      	movs	r2, #8
 8001d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 febf 	bl	8005b04 <USB_ReadInterrupts>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b10      	cmp	r3, #16
 8001d8e:	d101      	bne.n	8001d94 <HAL_HCD_IRQHandler+0x158>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <HAL_HCD_IRQHandler+0x15a>
 8001d94:	2300      	movs	r3, #0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d012      	beq.n	8001dc0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0210 	bic.w	r2, r2, #16
 8001da8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 ffa1 	bl	8002cf2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0210 	orr.w	r2, r2, #16
 8001dbe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fe9d 	bl	8005b04 <USB_ReadInterrupts>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dd4:	d13a      	bne.n	8001e4c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 fad2 	bl	8006384 <USB_HC_ReadInterrupt>
 8001de0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e025      	b.n	8001e34 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d018      	beq.n	8001e2e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e12:	d106      	bne.n	8001e22 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	4619      	mov	r1, r3
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8ab 	bl	8001f76 <HCD_HC_IN_IRQHandler>
 8001e20:	e005      	b.n	8001e2e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4619      	mov	r1, r3
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fbf9 	bl	8002620 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d3d4      	bcc.n	8001de8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e46:	615a      	str	r2, [r3, #20]
 8001e48:	e000      	b.n	8001e4c <HAL_HCD_IRQHandler+0x210>
      return;
 8001e4a:	bf00      	nop
    }
  }
}
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_HCD_Start+0x16>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e013      	b.n	8001e90 <HAL_HCD_Start+0x3e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 ffbe 	bl	8005df8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 fcd6 	bl	8005832 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_HCD_Stop+0x16>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e00d      	b.n	8001eca <HAL_HCD_Stop+0x32>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 fbac 	bl	8006618 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 ff60 	bl	8005da4 <USB_ResetPort>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3360      	adds	r3, #96	; 0x60
 8001f08:	781b      	ldrb	r3, [r3, #0]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3350      	adds	r3, #80	; 0x50
 8001f30:	681b      	ldr	r3, [r3, #0]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 ffa4 	bl	8005e98 <USB_GetCurrentFrame>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 ff7f 	bl	8005e6a <USB_GetHostSpeed>
 8001f6c:	4603      	mov	r3, r0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d11a      	bne.n	8001fdc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	212c      	movs	r1, #44	; 0x2c
 8001fbe:	fb01 f303 	mul.w	r3, r1, r3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3361      	adds	r3, #97	; 0x61
 8001fc6:	2206      	movs	r2, #6
 8001fc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f004 f9e6 	bl	80063a6 <USB_HC_Halt>
 8001fda:	e0af      	b.n	800213c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff2:	d11b      	bne.n	800202c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002006:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	3361      	adds	r3, #97	; 0x61
 8002016:	2207      	movs	r2, #7
 8002018:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f004 f9be 	bl	80063a6 <USB_HC_Halt>
 800202a:	e087      	b.n	800213c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b20      	cmp	r3, #32
 8002040:	d109      	bne.n	8002056 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204e:	461a      	mov	r2, r3
 8002050:	2320      	movs	r3, #32
 8002052:	6093      	str	r3, [r2, #8]
 8002054:	e072      	b.n	800213c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b08      	cmp	r3, #8
 800206a:	d11a      	bne.n	80020a2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	461a      	mov	r2, r3
 800207a:	2308      	movs	r3, #8
 800207c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	3361      	adds	r3, #97	; 0x61
 800208c:	2205      	movs	r2, #5
 800208e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f004 f983 	bl	80063a6 <USB_HC_Halt>
 80020a0:	e04c      	b.n	800213c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b8:	d11b      	bne.n	80020f2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c6:	461a      	mov	r2, r3
 80020c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3361      	adds	r3, #97	; 0x61
 80020dc:	2208      	movs	r2, #8
 80020de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 f95b 	bl	80063a6 <USB_HC_Halt>
 80020f0:	e024      	b.n	800213c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002104:	2b80      	cmp	r3, #128	; 0x80
 8002106:	d119      	bne.n	800213c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	461a      	mov	r2, r3
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3361      	adds	r3, #97	; 0x61
 8002128:	2206      	movs	r2, #6
 800212a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f004 f935 	bl	80063a6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002152:	d112      	bne.n	800217a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f004 f921 	bl	80063a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002170:	461a      	mov	r2, r3
 8002172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002176:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002178:	e24e      	b.n	8002618 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	f040 80df 	bne.w	8002350 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d019      	beq.n	80021ce <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3348      	adds	r3, #72	; 0x48
 80021a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	0159      	lsls	r1, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	440b      	add	r3, r1
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021bc:	1ad2      	subs	r2, r2, r3
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	202c      	movs	r0, #44	; 0x2c
 80021c4:	fb00 f303 	mul.w	r3, r0, r3
 80021c8:	440b      	add	r3, r1
 80021ca:	3350      	adds	r3, #80	; 0x50
 80021cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3361      	adds	r3, #97	; 0x61
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	335c      	adds	r3, #92	; 0x5c
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fe:	461a      	mov	r2, r3
 8002200:	2301      	movs	r3, #1
 8002202:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	333f      	adds	r3, #63	; 0x3f
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	333f      	adds	r3, #63	; 0x3f
 8002226:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002228:	2b02      	cmp	r3, #2
 800222a:	d111      	bne.n	8002250 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f004 f8b5 	bl	80063a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002248:	461a      	mov	r2, r3
 800224a:	2310      	movs	r3, #16
 800224c:	6093      	str	r3, [r2, #8]
 800224e:	e03a      	b.n	80022c6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	333f      	adds	r3, #63	; 0x3f
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d009      	beq.n	8002278 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	333f      	adds	r3, #63	; 0x3f
 8002272:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002274:	2b01      	cmp	r3, #1
 8002276:	d126      	bne.n	80022c6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	0151      	lsls	r1, r2, #5
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	440a      	add	r2, r1
 800228e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002296:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3360      	adds	r3, #96	; 0x60
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	b2d9      	uxtb	r1, r3
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	202c      	movs	r0, #44	; 0x2c
 80022b4:	fb00 f303 	mul.w	r3, r0, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3360      	adds	r3, #96	; 0x60
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f006 fb13 	bl	80088ec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d12b      	bne.n	8002326 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3348      	adds	r3, #72	; 0x48
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	202c      	movs	r0, #44	; 0x2c
 80022e4:	fb00 f202 	mul.w	r2, r0, r2
 80022e8:	440a      	add	r2, r1
 80022ea:	3240      	adds	r2, #64	; 0x40
 80022ec:	8812      	ldrh	r2, [r2, #0]
 80022ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 818e 	beq.w	8002618 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	212c      	movs	r1, #44	; 0x2c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	3354      	adds	r3, #84	; 0x54
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	f083 0301 	eor.w	r3, r3, #1
 8002310:	b2d8      	uxtb	r0, r3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	3354      	adds	r3, #84	; 0x54
 8002320:	4602      	mov	r2, r0
 8002322:	701a      	strb	r2, [r3, #0]
}
 8002324:	e178      	b.n	8002618 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	3354      	adds	r3, #84	; 0x54
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	f083 0301 	eor.w	r3, r3, #1
 800233a:	b2d8      	uxtb	r0, r3
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	3354      	adds	r3, #84	; 0x54
 800234a:	4602      	mov	r2, r0
 800234c:	701a      	strb	r2, [r3, #0]
}
 800234e:	e163      	b.n	8002618 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	f040 80f6 	bne.w	8002554 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3361      	adds	r3, #97	; 0x61
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d109      	bne.n	8002390 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3360      	adds	r3, #96	; 0x60
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e0c9      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3361      	adds	r3, #97	; 0x61
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d109      	bne.n	80023b8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3360      	adds	r3, #96	; 0x60
 80023b2:	2205      	movs	r2, #5
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	e0b5      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3361      	adds	r3, #97	; 0x61
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b06      	cmp	r3, #6
 80023ca:	d009      	beq.n	80023e0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3361      	adds	r3, #97	; 0x61
 80023da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d150      	bne.n	8002482 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	335c      	adds	r3, #92	; 0x5c
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	202c      	movs	r0, #44	; 0x2c
 80023f8:	fb00 f303 	mul.w	r3, r0, r3
 80023fc:	440b      	add	r3, r1
 80023fe:	335c      	adds	r3, #92	; 0x5c
 8002400:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	335c      	adds	r3, #92	; 0x5c
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d912      	bls.n	800243c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	335c      	adds	r3, #92	; 0x5c
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	212c      	movs	r1, #44	; 0x2c
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	3360      	adds	r3, #96	; 0x60
 8002436:	2204      	movs	r2, #4
 8002438:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800243a:	e073      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	3360      	adds	r3, #96	; 0x60
 800244a:	2202      	movs	r2, #2
 800244c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002464:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800246c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002480:	e050      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	3361      	adds	r3, #97	; 0x61
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d122      	bne.n	80024dc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3360      	adds	r3, #96	; 0x60
 80024a4:	2202      	movs	r2, #2
 80024a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	461a      	mov	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e023      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3361      	adds	r3, #97	; 0x61
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b07      	cmp	r3, #7
 80024ee:	d119      	bne.n	8002524 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	335c      	adds	r3, #92	; 0x5c
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	202c      	movs	r0, #44	; 0x2c
 8002508:	fb00 f303 	mul.w	r3, r0, r3
 800250c:	440b      	add	r3, r1
 800250e:	335c      	adds	r3, #92	; 0x5c
 8002510:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	3360      	adds	r3, #96	; 0x60
 8002520:	2204      	movs	r2, #4
 8002522:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	461a      	mov	r2, r3
 8002532:	2302      	movs	r3, #2
 8002534:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	b2d9      	uxtb	r1, r3
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	202c      	movs	r0, #44	; 0x2c
 8002540:	fb00 f303 	mul.w	r3, r0, r3
 8002544:	4413      	add	r3, r2
 8002546:	3360      	adds	r3, #96	; 0x60
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f006 f9cd 	bl	80088ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002552:	e061      	b.n	8002618 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b10      	cmp	r3, #16
 8002568:	d156      	bne.n	8002618 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	333f      	adds	r3, #63	; 0x3f
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d111      	bne.n	80025a2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	335c      	adds	r3, #92	; 0x5c
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f003 ff03 	bl	80063a6 <USB_HC_Halt>
 80025a0:	e031      	b.n	8002606 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	333f      	adds	r3, #63	; 0x3f
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	333f      	adds	r3, #63	; 0x3f
 80025c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d11d      	bne.n	8002606 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	335c      	adds	r3, #92	; 0x5c
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d110      	bne.n	8002606 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	3361      	adds	r3, #97	; 0x61
 80025f2:	2203      	movs	r2, #3
 80025f4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f003 fed0 	bl	80063a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	461a      	mov	r2, r3
 8002614:	2310      	movs	r3, #16
 8002616:	6093      	str	r3, [r2, #8]
}
 8002618:	bf00      	nop
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	4413      	add	r3, r2
 8002642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b04      	cmp	r3, #4
 800264e:	d11a      	bne.n	8002686 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	461a      	mov	r2, r3
 800265e:	2304      	movs	r3, #4
 8002660:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	3361      	adds	r3, #97	; 0x61
 8002670:	2206      	movs	r2, #6
 8002672:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f003 fe91 	bl	80063a6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002684:	e331      	b.n	8002cea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b20      	cmp	r3, #32
 800269a:	d12e      	bne.n	80026fa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	2320      	movs	r3, #32
 80026ac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	333d      	adds	r3, #61	; 0x3d
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	f040 8313 	bne.w	8002cea <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	333d      	adds	r3, #61	; 0x3d
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	3360      	adds	r3, #96	; 0x60
 80026e4:	2202      	movs	r2, #2
 80026e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f003 fe57 	bl	80063a6 <USB_HC_Halt>
}
 80026f8:	e2f7      	b.n	8002cea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002710:	d112      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4413      	add	r3, r2
 800271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271e:	461a      	mov	r2, r3
 8002720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002724:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f003 fe38 	bl	80063a6 <USB_HC_Halt>
}
 8002736:	e2d8      	b.n	8002cea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d140      	bne.n	80027d0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	212c      	movs	r1, #44	; 0x2c
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	4413      	add	r3, r2
 800275a:	335c      	adds	r3, #92	; 0x5c
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d111      	bne.n	800279a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	333d      	adds	r3, #61	; 0x3d
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	461a      	mov	r2, r3
 8002796:	2340      	movs	r3, #64	; 0x40
 8002798:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	461a      	mov	r2, r3
 80027a8:	2301      	movs	r3, #1
 80027aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	212c      	movs	r1, #44	; 0x2c
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	3361      	adds	r3, #97	; 0x61
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f003 fdec 	bl	80063a6 <USB_HC_Halt>
}
 80027ce:	e28c      	b.n	8002cea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d12c      	bne.n	8002840 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3361      	adds	r3, #97	; 0x61
 80027f4:	2204      	movs	r2, #4
 80027f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	333d      	adds	r3, #61	; 0x3d
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	335c      	adds	r3, #92	; 0x5c
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	4611      	mov	r1, r2
 8002826:	4618      	mov	r0, r3
 8002828:	f003 fdbd 	bl	80063a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	461a      	mov	r2, r3
 800283a:	2340      	movs	r3, #64	; 0x40
 800283c:	6093      	str	r3, [r2, #8]
}
 800283e:	e254      	b.n	8002cea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b08      	cmp	r3, #8
 8002854:	d11a      	bne.n	800288c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	2308      	movs	r3, #8
 8002866:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3361      	adds	r3, #97	; 0x61
 8002876:	2205      	movs	r2, #5
 8002878:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f003 fd8e 	bl	80063a6 <USB_HC_Halt>
}
 800288a:	e22e      	b.n	8002cea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d140      	bne.n	8002924 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	335c      	adds	r3, #92	; 0x5c
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3361      	adds	r3, #97	; 0x61
 80028c2:	2203      	movs	r2, #3
 80028c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	333d      	adds	r3, #61	; 0x3d
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d112      	bne.n	8002900 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	333c      	adds	r3, #60	; 0x3c
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d108      	bne.n	8002900 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	333d      	adds	r3, #61	; 0x3d
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f003 fd4b 	bl	80063a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	2310      	movs	r3, #16
 8002920:	6093      	str	r3, [r2, #8]
}
 8002922:	e1e2      	b.n	8002cea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b80      	cmp	r3, #128	; 0x80
 8002938:	d164      	bne.n	8002a04 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d111      	bne.n	8002966 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3361      	adds	r3, #97	; 0x61
 8002950:	2206      	movs	r2, #6
 8002952:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f003 fd21 	bl	80063a6 <USB_HC_Halt>
 8002964:	e044      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	335c      	adds	r3, #92	; 0x5c
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	202c      	movs	r0, #44	; 0x2c
 800297e:	fb00 f303 	mul.w	r3, r0, r3
 8002982:	440b      	add	r3, r1
 8002984:	335c      	adds	r3, #92	; 0x5c
 8002986:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	335c      	adds	r3, #92	; 0x5c
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d920      	bls.n	80029de <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	335c      	adds	r3, #92	; 0x5c
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3360      	adds	r3, #96	; 0x60
 80029bc:	2204      	movs	r2, #4
 80029be:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	b2d9      	uxtb	r1, r3
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	202c      	movs	r0, #44	; 0x2c
 80029ca:	fb00 f303 	mul.w	r3, r0, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3360      	adds	r3, #96	; 0x60
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f005 ff88 	bl	80088ec <HAL_HCD_HC_NotifyURBChange_Callback>
 80029dc:	e008      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3360      	adds	r3, #96	; 0x60
 80029ec:	2202      	movs	r2, #2
 80029ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	461a      	mov	r2, r3
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	6093      	str	r3, [r2, #8]
}
 8002a02:	e172      	b.n	8002cea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1a:	d11b      	bne.n	8002a54 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3361      	adds	r3, #97	; 0x61
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f003 fcb4 	bl	80063a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a50:	6093      	str	r3, [r2, #8]
}
 8002a52:	e14a      	b.n	8002cea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	f040 813f 	bne.w	8002cea <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3361      	adds	r3, #97	; 0x61
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d17d      	bne.n	8002b7c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3360      	adds	r3, #96	; 0x60
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	333f      	adds	r3, #63	; 0x3f
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d00a      	beq.n	8002abc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	333f      	adds	r3, #63	; 0x3f
 8002ab4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	f040 8100 	bne.w	8002cbc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d113      	bne.n	8002aec <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3355      	adds	r3, #85	; 0x55
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	f083 0301 	eor.w	r3, r3, #1
 8002ad8:	b2d8      	uxtb	r0, r3
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3355      	adds	r3, #85	; 0x55
 8002ae8:	4602      	mov	r2, r0
 8002aea:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	f040 80e3 	bne.w	8002cbc <HCD_HC_OUT_IRQHandler+0x69c>
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	334c      	adds	r3, #76	; 0x4c
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80d8 	beq.w	8002cbc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	334c      	adds	r3, #76	; 0x4c
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	202c      	movs	r0, #44	; 0x2c
 8002b22:	fb00 f202 	mul.w	r2, r0, r2
 8002b26:	440a      	add	r2, r1
 8002b28:	3240      	adds	r2, #64	; 0x40
 8002b2a:	8812      	ldrh	r2, [r2, #0]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	202c      	movs	r0, #44	; 0x2c
 8002b36:	fb00 f202 	mul.w	r2, r0, r2
 8002b3a:	440a      	add	r2, r1
 8002b3c:	3240      	adds	r2, #64	; 0x40
 8002b3e:	8812      	ldrh	r2, [r2, #0]
 8002b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80b5 	beq.w	8002cbc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3355      	adds	r3, #85	; 0x55
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	f083 0301 	eor.w	r3, r3, #1
 8002b66:	b2d8      	uxtb	r0, r3
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3355      	adds	r3, #85	; 0x55
 8002b76:	4602      	mov	r2, r0
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e09f      	b.n	8002cbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3361      	adds	r3, #97	; 0x61
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d109      	bne.n	8002ba4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3360      	adds	r3, #96	; 0x60
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e08b      	b.n	8002cbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3361      	adds	r3, #97	; 0x61
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d109      	bne.n	8002bcc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3360      	adds	r3, #96	; 0x60
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e077      	b.n	8002cbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3361      	adds	r3, #97	; 0x61
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	d109      	bne.n	8002bf4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3360      	adds	r3, #96	; 0x60
 8002bee:	2205      	movs	r2, #5
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e063      	b.n	8002cbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3361      	adds	r3, #97	; 0x61
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b06      	cmp	r3, #6
 8002c06:	d009      	beq.n	8002c1c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3361      	adds	r3, #97	; 0x61
 8002c16:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d14f      	bne.n	8002cbc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	335c      	adds	r3, #92	; 0x5c
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	202c      	movs	r0, #44	; 0x2c
 8002c34:	fb00 f303 	mul.w	r3, r0, r3
 8002c38:	440b      	add	r3, r1
 8002c3a:	335c      	adds	r3, #92	; 0x5c
 8002c3c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	335c      	adds	r3, #92	; 0x5c
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d912      	bls.n	8002c78 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	335c      	adds	r3, #92	; 0x5c
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3360      	adds	r3, #96	; 0x60
 8002c72:	2204      	movs	r2, #4
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e021      	b.n	8002cbc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3360      	adds	r3, #96	; 0x60
 8002c86:	2202      	movs	r2, #2
 8002c88:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ca0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ca8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2302      	movs	r3, #2
 8002ccc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	b2d9      	uxtb	r1, r3
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	202c      	movs	r0, #44	; 0x2c
 8002cd8:	fb00 f303 	mul.w	r3, r0, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3360      	adds	r3, #96	; 0x60
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f005 fe01 	bl	80088ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cea:	bf00      	nop
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b08a      	sub	sp, #40	; 0x28
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	0c5b      	lsrs	r3, r3, #17
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d26:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d004      	beq.n	8002d38 <HCD_RXQLVL_IRQHandler+0x46>
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	f000 80a9 	beq.w	8002e88 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d36:	e0aa      	b.n	8002e8e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80a6 	beq.w	8002e8c <HCD_RXQLVL_IRQHandler+0x19a>
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3344      	adds	r3, #68	; 0x44
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 809b 	beq.w	8002e8c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3350      	adds	r3, #80	; 0x50
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	441a      	add	r2, r3
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	202c      	movs	r0, #44	; 0x2c
 8002d70:	fb00 f303 	mul.w	r3, r0, r3
 8002d74:	440b      	add	r3, r1
 8002d76:	334c      	adds	r3, #76	; 0x4c
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d87a      	bhi.n	8002e74 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3344      	adds	r3, #68	; 0x44
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	b292      	uxth	r2, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f002 fe5c 	bl	8005a54 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3344      	adds	r3, #68	; 0x44
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	441a      	add	r2, r3
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	202c      	movs	r0, #44	; 0x2c
 8002db6:	fb00 f303 	mul.w	r3, r0, r3
 8002dba:	440b      	add	r3, r1
 8002dbc:	3344      	adds	r3, #68	; 0x44
 8002dbe:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	3350      	adds	r3, #80	; 0x50
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	441a      	add	r2, r3
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	202c      	movs	r0, #44	; 0x2c
 8002dda:	fb00 f303 	mul.w	r3, r0, r3
 8002dde:	440b      	add	r3, r1
 8002de0:	3350      	adds	r3, #80	; 0x50
 8002de2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	0cdb      	lsrs	r3, r3, #19
 8002df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	3340      	adds	r3, #64	; 0x40
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d13c      	bne.n	8002e8c <HCD_RXQLVL_IRQHandler+0x19a>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d039      	beq.n	8002e8c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e2e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e36:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3354      	adds	r3, #84	; 0x54
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	f083 0301 	eor.w	r3, r3, #1
 8002e5e:	b2d8      	uxtb	r0, r3
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3354      	adds	r3, #84	; 0x54
 8002e6e:	4602      	mov	r2, r0
 8002e70:	701a      	strb	r2, [r3, #0]
      break;
 8002e72:	e00b      	b.n	8002e8c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3360      	adds	r3, #96	; 0x60
 8002e82:	2204      	movs	r2, #4
 8002e84:	701a      	strb	r2, [r3, #0]
      break;
 8002e86:	e001      	b.n	8002e8c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e88:	bf00      	nop
 8002e8a:	e000      	b.n	8002e8e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e8c:	bf00      	nop
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3728      	adds	r7, #40	; 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ec2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d10b      	bne.n	8002ee6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d102      	bne.n	8002ede <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f005 fceb 	bl	80088b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d132      	bne.n	8002f56 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f043 0308 	orr.w	r3, r3, #8
 8002ef6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d126      	bne.n	8002f50 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d113      	bne.n	8002f32 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f14:	d106      	bne.n	8002f24 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f002 ff07 	bl	8005d30 <USB_InitFSLSPClkSel>
 8002f22:	e011      	b.n	8002f48 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2101      	movs	r1, #1
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 ff00 	bl	8005d30 <USB_InitFSLSPClkSel>
 8002f30:	e00a      	b.n	8002f48 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d106      	bne.n	8002f48 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f40:	461a      	mov	r2, r3
 8002f42:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f46:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f005 fcdd 	bl	8008908 <HAL_HCD_PortEnabled_Callback>
 8002f4e:	e002      	b.n	8002f56 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f005 fce7 	bl	8008924 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d103      	bne.n	8002f68 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f043 0320 	orr.w	r3, r3, #32
 8002f66:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e12b      	b.n	80031e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd fdf0 	bl	8000b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	; 0x24
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fe0:	f001 fa20 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8002fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	4a81      	ldr	r2, [pc, #516]	; (80031f0 <HAL_I2C_Init+0x274>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d807      	bhi.n	8003000 <HAL_I2C_Init+0x84>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a80      	ldr	r2, [pc, #512]	; (80031f4 <HAL_I2C_Init+0x278>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	bf94      	ite	ls
 8002ff8:	2301      	movls	r3, #1
 8002ffa:	2300      	movhi	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e006      	b.n	800300e <HAL_I2C_Init+0x92>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a7d      	ldr	r2, [pc, #500]	; (80031f8 <HAL_I2C_Init+0x27c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	bf94      	ite	ls
 8003008:	2301      	movls	r3, #1
 800300a:	2300      	movhi	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0e7      	b.n	80031e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4a78      	ldr	r2, [pc, #480]	; (80031fc <HAL_I2C_Init+0x280>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	0c9b      	lsrs	r3, r3, #18
 8003020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4a6a      	ldr	r2, [pc, #424]	; (80031f0 <HAL_I2C_Init+0x274>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d802      	bhi.n	8003050 <HAL_I2C_Init+0xd4>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	3301      	adds	r3, #1
 800304e:	e009      	b.n	8003064 <HAL_I2C_Init+0xe8>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	4a69      	ldr	r2, [pc, #420]	; (8003200 <HAL_I2C_Init+0x284>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	3301      	adds	r3, #1
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	430b      	orrs	r3, r1
 800306a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003076:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	495c      	ldr	r1, [pc, #368]	; (80031f0 <HAL_I2C_Init+0x274>)
 8003080:	428b      	cmp	r3, r1
 8003082:	d819      	bhi.n	80030b8 <HAL_I2C_Init+0x13c>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1e59      	subs	r1, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003092:	1c59      	adds	r1, r3, #1
 8003094:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003098:	400b      	ands	r3, r1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_I2C_Init+0x138>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1e59      	subs	r1, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b2:	e051      	b.n	8003158 <HAL_I2C_Init+0x1dc>
 80030b4:	2304      	movs	r3, #4
 80030b6:	e04f      	b.n	8003158 <HAL_I2C_Init+0x1dc>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d111      	bne.n	80030e4 <HAL_I2C_Init+0x168>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e58      	subs	r0, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	440b      	add	r3, r1
 80030ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d2:	3301      	adds	r3, #1
 80030d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e012      	b.n	800310a <HAL_I2C_Init+0x18e>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1e58      	subs	r0, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	0099      	lsls	r1, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Init+0x196>
 800310e:	2301      	movs	r3, #1
 8003110:	e022      	b.n	8003158 <HAL_I2C_Init+0x1dc>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10e      	bne.n	8003138 <HAL_I2C_Init+0x1bc>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1e58      	subs	r0, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6859      	ldr	r1, [r3, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	440b      	add	r3, r1
 8003128:	fbb0 f3f3 	udiv	r3, r0, r3
 800312c:	3301      	adds	r3, #1
 800312e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003136:	e00f      	b.n	8003158 <HAL_I2C_Init+0x1dc>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e58      	subs	r0, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	0099      	lsls	r1, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	fbb0 f3f3 	udiv	r3, r0, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	6809      	ldr	r1, [r1, #0]
 800315c:	4313      	orrs	r3, r2
 800315e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003186:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6911      	ldr	r1, [r2, #16]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68d2      	ldr	r2, [r2, #12]
 8003192:	4311      	orrs	r1, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	430b      	orrs	r3, r1
 800319a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	000186a0 	.word	0x000186a0
 80031f4:	001e847f 	.word	0x001e847f
 80031f8:	003d08ff 	.word	0x003d08ff
 80031fc:	431bde83 	.word	0x431bde83
 8003200:	10624dd3 	.word	0x10624dd3

08003204 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e128      	b.n	8003468 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a90      	ldr	r2, [pc, #576]	; (8003470 <HAL_I2S_Init+0x26c>)
 800322e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fd fcf1 	bl	8000c18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800324c:	f023 030f 	bic.w	r3, r3, #15
 8003250:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2202      	movs	r2, #2
 8003258:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d060      	beq.n	8003324 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800326a:	2310      	movs	r3, #16
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e001      	b.n	8003274 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003270:	2320      	movs	r3, #32
 8003272:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b20      	cmp	r3, #32
 800327a:	d802      	bhi.n	8003282 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003282:	2001      	movs	r0, #1
 8003284:	f001 f9d2 	bl	800462c <HAL_RCCEx_GetPeriphCLKFreq>
 8003288:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003292:	d125      	bne.n	80032e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d010      	beq.n	80032be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	461a      	mov	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	3305      	adds	r3, #5
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	e01f      	b.n	80032fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	461a      	mov	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032da:	3305      	adds	r3, #5
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	e00e      	b.n	80032fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	461a      	mov	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	3305      	adds	r3, #5
 80032fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4a5c      	ldr	r2, [pc, #368]	; (8003474 <HAL_I2S_Init+0x270>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	08db      	lsrs	r3, r3, #3
 8003308:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	e003      	b.n	800332c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003324:	2302      	movs	r3, #2
 8003326:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d902      	bls.n	8003338 <HAL_I2S_Init+0x134>
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2bff      	cmp	r3, #255	; 0xff
 8003336:	d907      	bls.n	8003348 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f043 0210 	orr.w	r2, r3, #16
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e08f      	b.n	8003468 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	ea42 0103 	orr.w	r1, r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	430a      	orrs	r2, r1
 800335a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003366:	f023 030f 	bic.w	r3, r3, #15
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6851      	ldr	r1, [r2, #4]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6892      	ldr	r2, [r2, #8]
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	68d2      	ldr	r2, [r2, #12]
 8003378:	4311      	orrs	r1, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6992      	ldr	r2, [r2, #24]
 800337e:	430a      	orrs	r2, r1
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800338a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d161      	bne.n	8003458 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a38      	ldr	r2, [pc, #224]	; (8003478 <HAL_I2S_Init+0x274>)
 8003398:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a37      	ldr	r2, [pc, #220]	; (800347c <HAL_I2S_Init+0x278>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d101      	bne.n	80033a8 <HAL_I2S_Init+0x1a4>
 80033a4:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_I2S_Init+0x27c>)
 80033a6:	e001      	b.n	80033ac <HAL_I2S_Init+0x1a8>
 80033a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	4932      	ldr	r1, [pc, #200]	; (800347c <HAL_I2S_Init+0x278>)
 80033b4:	428a      	cmp	r2, r1
 80033b6:	d101      	bne.n	80033bc <HAL_I2S_Init+0x1b8>
 80033b8:	4a31      	ldr	r2, [pc, #196]	; (8003480 <HAL_I2S_Init+0x27c>)
 80033ba:	e001      	b.n	80033c0 <HAL_I2S_Init+0x1bc>
 80033bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033c4:	f023 030f 	bic.w	r3, r3, #15
 80033c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2b      	ldr	r2, [pc, #172]	; (800347c <HAL_I2S_Init+0x278>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_I2S_Init+0x1d4>
 80033d4:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <HAL_I2S_Init+0x27c>)
 80033d6:	e001      	b.n	80033dc <HAL_I2S_Init+0x1d8>
 80033d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033dc:	2202      	movs	r2, #2
 80033de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a25      	ldr	r2, [pc, #148]	; (800347c <HAL_I2S_Init+0x278>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d101      	bne.n	80033ee <HAL_I2S_Init+0x1ea>
 80033ea:	4b25      	ldr	r3, [pc, #148]	; (8003480 <HAL_I2S_Init+0x27c>)
 80033ec:	e001      	b.n	80033f2 <HAL_I2S_Init+0x1ee>
 80033ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033fe:	d003      	beq.n	8003408 <HAL_I2S_Init+0x204>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d103      	bne.n	8003410 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	e001      	b.n	8003414 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800341e:	4313      	orrs	r3, r2
 8003420:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003428:	4313      	orrs	r3, r2
 800342a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003432:	4313      	orrs	r3, r2
 8003434:	b29a      	uxth	r2, r3
 8003436:	897b      	ldrh	r3, [r7, #10]
 8003438:	4313      	orrs	r3, r2
 800343a:	b29b      	uxth	r3, r3
 800343c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003440:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a0d      	ldr	r2, [pc, #52]	; (800347c <HAL_I2S_Init+0x278>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_I2S_Init+0x24c>
 800344c:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <HAL_I2S_Init+0x27c>)
 800344e:	e001      	b.n	8003454 <HAL_I2S_Init+0x250>
 8003450:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003454:	897a      	ldrh	r2, [r7, #10]
 8003456:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3720      	adds	r7, #32
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	0800357b 	.word	0x0800357b
 8003474:	cccccccd 	.word	0xcccccccd
 8003478:	08003691 	.word	0x08003691
 800347c:	40003800 	.word	0x40003800
 8003480:	40003400 	.word	0x40003400

08003484 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	881a      	ldrh	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	1c9a      	adds	r2, r3, #2
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10e      	bne.n	8003514 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003504:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ffb8 	bl	8003484 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	b292      	uxth	r2, r2
 8003530:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	1c9a      	adds	r2, r3, #2
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10e      	bne.n	8003572 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003562:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff93 	bl	8003498 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b04      	cmp	r3, #4
 8003594:	d13a      	bne.n	800360c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d109      	bne.n	80035b4 <I2S_IRQHandler+0x3a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	d102      	bne.n	80035b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff ffb4 	bl	800351c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d126      	bne.n	800360c <I2S_IRQHandler+0x92>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d11f      	bne.n	800360c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035dc:	2300      	movs	r3, #0
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f043 0202 	orr.w	r2, r3, #2
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ff50 	bl	80034ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b03      	cmp	r3, #3
 8003616:	d136      	bne.n	8003686 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d109      	bne.n	8003636 <I2S_IRQHandler+0xbc>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362c:	2b80      	cmp	r3, #128	; 0x80
 800362e:	d102      	bne.n	8003636 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff45 	bl	80034c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b08      	cmp	r3, #8
 800363e:	d122      	bne.n	8003686 <I2S_IRQHandler+0x10c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b20      	cmp	r3, #32
 800364c:	d11b      	bne.n	8003686 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800365c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	f043 0204 	orr.w	r2, r3, #4
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ff13 	bl	80034ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003686:	bf00      	nop
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a92      	ldr	r2, [pc, #584]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d101      	bne.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036aa:	4b92      	ldr	r3, [pc, #584]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ac:	e001      	b.n	80036b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a8b      	ldr	r2, [pc, #556]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036c8:	4b8a      	ldr	r3, [pc, #552]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ca:	e001      	b.n	80036d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036dc:	d004      	beq.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f040 8099 	bne.w	800381a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d107      	bne.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f925 	bl	800394c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f9c8 	bl	8003aac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d13a      	bne.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d035      	beq.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a6e      	ldr	r2, [pc, #440]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800373a:	4b6e      	ldr	r3, [pc, #440]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800373c:	e001      	b.n	8003742 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800373e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4969      	ldr	r1, [pc, #420]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800374a:	428b      	cmp	r3, r1
 800374c:	d101      	bne.n	8003752 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800374e:	4b69      	ldr	r3, [pc, #420]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003750:	e001      	b.n	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003752:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003756:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800375a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800376a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f043 0202 	orr.w	r2, r3, #2
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff fe88 	bl	80034ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	f040 80c3 	bne.w	800392e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80bd 	beq.w	800392e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a49      	ldr	r2, [pc, #292]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037ce:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037d0:	e001      	b.n	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4944      	ldr	r1, [pc, #272]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037de:	428b      	cmp	r3, r1
 80037e0:	d101      	bne.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037e2:	4b44      	ldr	r3, [pc, #272]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037e4:	e001      	b.n	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037f0:	2300      	movs	r3, #0
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f043 0204 	orr.w	r2, r3, #4
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff fe4a 	bl	80034ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003818:	e089      	b.n	800392e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d107      	bne.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8be 	bl	80039b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d107      	bne.n	800384e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f8fd 	bl	8003a48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d12f      	bne.n	80038b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d02a      	beq.n	80038b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003870:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800387c:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800387e:	e001      	b.n	8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4919      	ldr	r1, [pc, #100]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800388c:	428b      	cmp	r3, r1
 800388e:	d101      	bne.n	8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003890:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003892:	e001      	b.n	8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003898:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800389c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f043 0202 	orr.w	r2, r3, #2
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff fdfa 	bl	80034ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d136      	bne.n	8003930 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d031      	beq.n	8003930 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038d8:	e001      	b.n	80038de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4902      	ldr	r1, [pc, #8]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038e6:	428b      	cmp	r3, r1
 80038e8:	d106      	bne.n	80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80038ea:	4b02      	ldr	r3, [pc, #8]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038ec:	e006      	b.n	80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80038ee:	bf00      	nop
 80038f0:	40003800 	.word	0x40003800
 80038f4:	40003400 	.word	0x40003400
 80038f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003900:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003910:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	f043 0204 	orr.w	r2, r3, #4
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff fdc0 	bl	80034ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800392c:	e000      	b.n	8003930 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800392e:	bf00      	nop
}
 8003930:	bf00      	nop
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	1c99      	adds	r1, r3, #2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6251      	str	r1, [r2, #36]	; 0x24
 800395e:	881a      	ldrh	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d113      	bne.n	80039a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800398c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d106      	bne.n	80039a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ffc9 	bl	8003938 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	1c99      	adds	r1, r3, #2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6251      	str	r1, [r2, #36]	; 0x24
 80039c2:	8819      	ldrh	r1, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <I2SEx_TxISR_I2SExt+0x90>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <I2SEx_TxISR_I2SExt+0x22>
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <I2SEx_TxISR_I2SExt+0x94>)
 80039d0:	e001      	b.n	80039d6 <I2SEx_TxISR_I2SExt+0x26>
 80039d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d6:	460a      	mov	r2, r1
 80039d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d121      	bne.n	8003a36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <I2SEx_TxISR_I2SExt+0x90>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d101      	bne.n	8003a00 <I2SEx_TxISR_I2SExt+0x50>
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <I2SEx_TxISR_I2SExt+0x94>)
 80039fe:	e001      	b.n	8003a04 <I2SEx_TxISR_I2SExt+0x54>
 8003a00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	490d      	ldr	r1, [pc, #52]	; (8003a40 <I2SEx_TxISR_I2SExt+0x90>)
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	d101      	bne.n	8003a14 <I2SEx_TxISR_I2SExt+0x64>
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <I2SEx_TxISR_I2SExt+0x94>)
 8003a12:	e001      	b.n	8003a18 <I2SEx_TxISR_I2SExt+0x68>
 8003a14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff81 	bl	8003938 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40003800 	.word	0x40003800
 8003a44:	40003400 	.word	0x40003400

08003a48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68d8      	ldr	r0, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	1c99      	adds	r1, r3, #2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a60:	b282      	uxth	r2, r0
 8003a62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d113      	bne.n	8003aa4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ff4a 	bl	8003938 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a20      	ldr	r2, [pc, #128]	; (8003b3c <I2SEx_RxISR_I2SExt+0x90>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <I2SEx_RxISR_I2SExt+0x16>
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <I2SEx_RxISR_I2SExt+0x94>)
 8003ac0:	e001      	b.n	8003ac6 <I2SEx_RxISR_I2SExt+0x1a>
 8003ac2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac6:	68d8      	ldr	r0, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	1c99      	adds	r1, r3, #2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ad2:	b282      	uxth	r2, r0
 8003ad4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d121      	bne.n	8003b32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <I2SEx_RxISR_I2SExt+0x90>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <I2SEx_RxISR_I2SExt+0x50>
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <I2SEx_RxISR_I2SExt+0x94>)
 8003afa:	e001      	b.n	8003b00 <I2SEx_RxISR_I2SExt+0x54>
 8003afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	490d      	ldr	r1, [pc, #52]	; (8003b3c <I2SEx_RxISR_I2SExt+0x90>)
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	d101      	bne.n	8003b10 <I2SEx_RxISR_I2SExt+0x64>
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <I2SEx_RxISR_I2SExt+0x94>)
 8003b0e:	e001      	b.n	8003b14 <I2SEx_RxISR_I2SExt+0x68>
 8003b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff03 	bl	8003938 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40003800 	.word	0x40003800
 8003b40:	40003400 	.word	0x40003400

08003b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e267      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d075      	beq.n	8003c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b62:	4b88      	ldr	r3, [pc, #544]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d00c      	beq.n	8003b88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6e:	4b85      	ldr	r3, [pc, #532]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d112      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b7a:	4b82      	ldr	r3, [pc, #520]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b86:	d10b      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b88:	4b7e      	ldr	r3, [pc, #504]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d05b      	beq.n	8003c4c <HAL_RCC_OscConfig+0x108>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d157      	bne.n	8003c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e242      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba8:	d106      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x74>
 8003baa:	4b76      	ldr	r3, [pc, #472]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a75      	ldr	r2, [pc, #468]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e01d      	b.n	8003bf4 <HAL_RCC_OscConfig+0xb0>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x98>
 8003bc2:	4b70      	ldr	r3, [pc, #448]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6f      	ldr	r2, [pc, #444]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a6c      	ldr	r2, [pc, #432]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e00b      	b.n	8003bf4 <HAL_RCC_OscConfig+0xb0>
 8003bdc:	4b69      	ldr	r3, [pc, #420]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a68      	ldr	r2, [pc, #416]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	4b66      	ldr	r3, [pc, #408]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a65      	ldr	r2, [pc, #404]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fd faba 	bl	8001174 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c04:	f7fd fab6 	bl	8001174 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e207      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	4b5b      	ldr	r3, [pc, #364]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0xc0>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7fd faa6 	bl	8001174 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7fd faa2 	bl	8001174 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	; 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e1f3      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3e:	4b51      	ldr	r3, [pc, #324]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0xe8>
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d063      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c5a:	4b4a      	ldr	r3, [pc, #296]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c66:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d11c      	bne.n	8003cac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c72:	4b44      	ldr	r3, [pc, #272]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d116      	bne.n	8003cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7e:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_RCC_OscConfig+0x152>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d001      	beq.n	8003c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e1c7      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c96:	4b3b      	ldr	r3, [pc, #236]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4937      	ldr	r1, [pc, #220]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003caa:	e03a      	b.n	8003d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d020      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb4:	4b34      	ldr	r3, [pc, #208]	; (8003d88 <HAL_RCC_OscConfig+0x244>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cba:	f7fd fa5b 	bl	8001174 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc2:	f7fd fa57 	bl	8001174 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e1a8      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce0:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4925      	ldr	r1, [pc, #148]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]
 8003cf4:	e015      	b.n	8003d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf6:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <HAL_RCC_OscConfig+0x244>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfc:	f7fd fa3a 	bl	8001174 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d04:	f7fd fa36 	bl	8001174 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e187      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d036      	beq.n	8003d9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d016      	beq.n	8003d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d36:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <HAL_RCC_OscConfig+0x248>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fd fa1a 	bl	8001174 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d44:	f7fd fa16 	bl	8001174 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e167      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x200>
 8003d62:	e01b      	b.n	8003d9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d64:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_RCC_OscConfig+0x248>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fa03 	bl	8001174 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d70:	e00e      	b.n	8003d90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d72:	f7fd f9ff 	bl	8001174 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d907      	bls.n	8003d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e150      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
 8003d84:	40023800 	.word	0x40023800
 8003d88:	42470000 	.word	0x42470000
 8003d8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d90:	4b88      	ldr	r3, [pc, #544]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1ea      	bne.n	8003d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8097 	beq.w	8003ed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003daa:	2300      	movs	r3, #0
 8003dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dae:	4b81      	ldr	r3, [pc, #516]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10f      	bne.n	8003dda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	4b7d      	ldr	r3, [pc, #500]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	4a7c      	ldr	r2, [pc, #496]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dca:	4b7a      	ldr	r3, [pc, #488]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dda:	4b77      	ldr	r3, [pc, #476]	; (8003fb8 <HAL_RCC_OscConfig+0x474>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d118      	bne.n	8003e18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de6:	4b74      	ldr	r3, [pc, #464]	; (8003fb8 <HAL_RCC_OscConfig+0x474>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a73      	ldr	r2, [pc, #460]	; (8003fb8 <HAL_RCC_OscConfig+0x474>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df2:	f7fd f9bf 	bl	8001174 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7fd f9bb 	bl	8001174 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e10c      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0c:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <HAL_RCC_OscConfig+0x474>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCC_OscConfig+0x2ea>
 8003e20:	4b64      	ldr	r3, [pc, #400]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e24:	4a63      	ldr	r2, [pc, #396]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2c:	e01c      	b.n	8003e68 <HAL_RCC_OscConfig+0x324>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b05      	cmp	r3, #5
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x30c>
 8003e36:	4b5f      	ldr	r3, [pc, #380]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	4a5e      	ldr	r2, [pc, #376]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	f043 0304 	orr.w	r3, r3, #4
 8003e40:	6713      	str	r3, [r2, #112]	; 0x70
 8003e42:	4b5c      	ldr	r3, [pc, #368]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	4a5b      	ldr	r2, [pc, #364]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0x324>
 8003e50:	4b58      	ldr	r3, [pc, #352]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a57      	ldr	r2, [pc, #348]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e56:	f023 0301 	bic.w	r3, r3, #1
 8003e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5c:	4b55      	ldr	r3, [pc, #340]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	4a54      	ldr	r2, [pc, #336]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e62:	f023 0304 	bic.w	r3, r3, #4
 8003e66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fd f980 	bl	8001174 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7fd f97c 	bl	8001174 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0cb      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8e:	4b49      	ldr	r3, [pc, #292]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0ee      	beq.n	8003e78 <HAL_RCC_OscConfig+0x334>
 8003e9a:	e014      	b.n	8003ec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9c:	f7fd f96a 	bl	8001174 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea4:	f7fd f966 	bl	8001174 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e0b5      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eba:	4b3e      	ldr	r3, [pc, #248]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1ee      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d105      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ecc:	4b39      	ldr	r3, [pc, #228]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	4a38      	ldr	r2, [pc, #224]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80a1 	beq.w	8004024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ee2:	4b34      	ldr	r3, [pc, #208]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d05c      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d141      	bne.n	8003f7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef6:	4b31      	ldr	r3, [pc, #196]	; (8003fbc <HAL_RCC_OscConfig+0x478>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efc:	f7fd f93a 	bl	8001174 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fd f936 	bl	8001174 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e087      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f16:	4b27      	ldr	r3, [pc, #156]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	019b      	lsls	r3, r3, #6
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	061b      	lsls	r3, r3, #24
 8003f46:	491b      	ldr	r1, [pc, #108]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_RCC_OscConfig+0x478>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f52:	f7fd f90f 	bl	8001174 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fd f90b 	bl	8001174 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e05c      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x416>
 8003f78:	e054      	b.n	8004024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <HAL_RCC_OscConfig+0x478>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fd f8f8 	bl	8001174 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fd f8f4 	bl	8001174 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e045      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x444>
 8003fa6:	e03d      	b.n	8004024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d107      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e038      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40007000 	.word	0x40007000
 8003fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x4ec>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d028      	beq.n	8004020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d121      	bne.n	8004020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d11a      	bne.n	8004020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d111      	bne.n	8004020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	3b01      	subs	r3, #1
 800400a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d107      	bne.n	8004020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40023800 	.word	0x40023800

08004034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0cc      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004048:	4b68      	ldr	r3, [pc, #416]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d90c      	bls.n	8004070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004056:	4b65      	ldr	r3, [pc, #404]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405e:	4b63      	ldr	r3, [pc, #396]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0b8      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004088:	4b59      	ldr	r3, [pc, #356]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4a58      	ldr	r2, [pc, #352]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a0:	4b53      	ldr	r3, [pc, #332]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a52      	ldr	r2, [pc, #328]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ac:	4b50      	ldr	r3, [pc, #320]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	494d      	ldr	r1, [pc, #308]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d044      	beq.n	8004154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	4b47      	ldr	r3, [pc, #284]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d119      	bne.n	8004112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e07f      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d003      	beq.n	80040f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f2:	4b3f      	ldr	r3, [pc, #252]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e06f      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	4b3b      	ldr	r3, [pc, #236]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e067      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004112:	4b37      	ldr	r3, [pc, #220]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f023 0203 	bic.w	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4934      	ldr	r1, [pc, #208]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	4313      	orrs	r3, r2
 8004122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004124:	f7fd f826 	bl	8001174 <HAL_GetTick>
 8004128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412a:	e00a      	b.n	8004142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412c:	f7fd f822 	bl	8001174 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	f241 3288 	movw	r2, #5000	; 0x1388
 800413a:	4293      	cmp	r3, r2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e04f      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004142:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 020c 	and.w	r2, r3, #12
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	429a      	cmp	r2, r3
 8004152:	d1eb      	bne.n	800412c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004154:	4b25      	ldr	r3, [pc, #148]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d20c      	bcs.n	800417c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b22      	ldr	r3, [pc, #136]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b20      	ldr	r3, [pc, #128]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e032      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4916      	ldr	r1, [pc, #88]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041a6:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	490e      	ldr	r1, [pc, #56]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ba:	f000 f821 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 80041be:	4602      	mov	r2, r0
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	091b      	lsrs	r3, r3, #4
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	490a      	ldr	r1, [pc, #40]	; (80041f4 <HAL_RCC_ClockConfig+0x1c0>)
 80041cc:	5ccb      	ldrb	r3, [r1, r3]
 80041ce:	fa22 f303 	lsr.w	r3, r2, r3
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041d6:	4b09      	ldr	r3, [pc, #36]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fc ff86 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40023c00 	.word	0x40023c00
 80041f0:	40023800 	.word	0x40023800
 80041f4:	08008fc4 	.word	0x08008fc4
 80041f8:	20000000 	.word	0x20000000
 80041fc:	20000004 	.word	0x20000004

08004200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004204:	b094      	sub	sp, #80	; 0x50
 8004206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	647b      	str	r3, [r7, #68]	; 0x44
 800420c:	2300      	movs	r3, #0
 800420e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004210:	2300      	movs	r3, #0
 8004212:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004218:	4b79      	ldr	r3, [pc, #484]	; (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	2b08      	cmp	r3, #8
 8004222:	d00d      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x40>
 8004224:	2b08      	cmp	r3, #8
 8004226:	f200 80e1 	bhi.w	80043ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0x34>
 800422e:	2b04      	cmp	r3, #4
 8004230:	d003      	beq.n	800423a <HAL_RCC_GetSysClockFreq+0x3a>
 8004232:	e0db      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004234:	4b73      	ldr	r3, [pc, #460]	; (8004404 <HAL_RCC_GetSysClockFreq+0x204>)
 8004236:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004238:	e0db      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800423a:	4b73      	ldr	r3, [pc, #460]	; (8004408 <HAL_RCC_GetSysClockFreq+0x208>)
 800423c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800423e:	e0d8      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004240:	4b6f      	ldr	r3, [pc, #444]	; (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004248:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800424a:	4b6d      	ldr	r3, [pc, #436]	; (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d063      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004256:	4b6a      	ldr	r3, [pc, #424]	; (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	099b      	lsrs	r3, r3, #6
 800425c:	2200      	movs	r2, #0
 800425e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004260:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004268:	633b      	str	r3, [r7, #48]	; 0x30
 800426a:	2300      	movs	r3, #0
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
 800426e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004272:	4622      	mov	r2, r4
 8004274:	462b      	mov	r3, r5
 8004276:	f04f 0000 	mov.w	r0, #0
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	0159      	lsls	r1, r3, #5
 8004280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004284:	0150      	lsls	r0, r2, #5
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4621      	mov	r1, r4
 800428c:	1a51      	subs	r1, r2, r1
 800428e:	6139      	str	r1, [r7, #16]
 8004290:	4629      	mov	r1, r5
 8004292:	eb63 0301 	sbc.w	r3, r3, r1
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042a4:	4659      	mov	r1, fp
 80042a6:	018b      	lsls	r3, r1, #6
 80042a8:	4651      	mov	r1, sl
 80042aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ae:	4651      	mov	r1, sl
 80042b0:	018a      	lsls	r2, r1, #6
 80042b2:	4651      	mov	r1, sl
 80042b4:	ebb2 0801 	subs.w	r8, r2, r1
 80042b8:	4659      	mov	r1, fp
 80042ba:	eb63 0901 	sbc.w	r9, r3, r1
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042d2:	4690      	mov	r8, r2
 80042d4:	4699      	mov	r9, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	eb18 0303 	adds.w	r3, r8, r3
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	462b      	mov	r3, r5
 80042e0:	eb49 0303 	adc.w	r3, r9, r3
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042f2:	4629      	mov	r1, r5
 80042f4:	024b      	lsls	r3, r1, #9
 80042f6:	4621      	mov	r1, r4
 80042f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042fc:	4621      	mov	r1, r4
 80042fe:	024a      	lsls	r2, r1, #9
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004306:	2200      	movs	r2, #0
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
 800430a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800430c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004310:	f7fb ff62 	bl	80001d8 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4613      	mov	r3, r2
 800431a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800431c:	e058      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800431e:	4b38      	ldr	r3, [pc, #224]	; (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	099b      	lsrs	r3, r3, #6
 8004324:	2200      	movs	r2, #0
 8004326:	4618      	mov	r0, r3
 8004328:	4611      	mov	r1, r2
 800432a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	2300      	movs	r3, #0
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
 8004334:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004338:	4642      	mov	r2, r8
 800433a:	464b      	mov	r3, r9
 800433c:	f04f 0000 	mov.w	r0, #0
 8004340:	f04f 0100 	mov.w	r1, #0
 8004344:	0159      	lsls	r1, r3, #5
 8004346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800434a:	0150      	lsls	r0, r2, #5
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4641      	mov	r1, r8
 8004352:	ebb2 0a01 	subs.w	sl, r2, r1
 8004356:	4649      	mov	r1, r9
 8004358:	eb63 0b01 	sbc.w	fp, r3, r1
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004368:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800436c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004370:	ebb2 040a 	subs.w	r4, r2, sl
 8004374:	eb63 050b 	sbc.w	r5, r3, fp
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	00eb      	lsls	r3, r5, #3
 8004382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004386:	00e2      	lsls	r2, r4, #3
 8004388:	4614      	mov	r4, r2
 800438a:	461d      	mov	r5, r3
 800438c:	4643      	mov	r3, r8
 800438e:	18e3      	adds	r3, r4, r3
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	464b      	mov	r3, r9
 8004394:	eb45 0303 	adc.w	r3, r5, r3
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043a6:	4629      	mov	r1, r5
 80043a8:	028b      	lsls	r3, r1, #10
 80043aa:	4621      	mov	r1, r4
 80043ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043b0:	4621      	mov	r1, r4
 80043b2:	028a      	lsls	r2, r1, #10
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ba:	2200      	movs	r2, #0
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	61fa      	str	r2, [r7, #28]
 80043c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c4:	f7fb ff08 	bl	80001d8 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4613      	mov	r3, r2
 80043ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	3301      	adds	r3, #1
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ea:	e002      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3750      	adds	r7, #80	; 0x50
 80043f8:	46bd      	mov	sp, r7
 80043fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
 8004404:	00f42400 	.word	0x00f42400
 8004408:	007a1200 	.word	0x007a1200

0800440c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_RCC_GetHCLKFreq+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000000 	.word	0x20000000

08004424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004428:	f7ff fff0 	bl	800440c <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0a9b      	lsrs	r3, r3, #10
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4903      	ldr	r1, [pc, #12]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800
 8004448:	08008fd4 	.word	0x08008fd4

0800444c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d105      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004470:	2b00      	cmp	r3, #0
 8004472:	d038      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004474:	4b68      	ldr	r3, [pc, #416]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800447a:	f7fc fe7b 	bl	8001174 <HAL_GetTick>
 800447e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004480:	e008      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004482:	f7fc fe77 	bl	8001174 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e0bd      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004494:	4b61      	ldr	r3, [pc, #388]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f0      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	019b      	lsls	r3, r3, #6
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	071b      	lsls	r3, r3, #28
 80044b2:	495a      	ldr	r1, [pc, #360]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044ba:	4b57      	ldr	r3, [pc, #348]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044c0:	f7fc fe58 	bl	8001174 <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044c8:	f7fc fe54 	bl	8001174 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e09a      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044da:	4b50      	ldr	r3, [pc, #320]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8083 	beq.w	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	4b48      	ldr	r3, [pc, #288]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	4a47      	ldr	r2, [pc, #284]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004502:	6413      	str	r3, [r2, #64]	; 0x40
 8004504:	4b45      	ldr	r3, [pc, #276]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004510:	4b43      	ldr	r3, [pc, #268]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a42      	ldr	r2, [pc, #264]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800451c:	f7fc fe2a 	bl	8001174 <HAL_GetTick>
 8004520:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004524:	f7fc fe26 	bl	8001174 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e06c      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004536:	4b3a      	ldr	r3, [pc, #232]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004542:	4b36      	ldr	r3, [pc, #216]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d02f      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	429a      	cmp	r2, r3
 800455e:	d028      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004560:	4b2e      	ldr	r3, [pc, #184]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004568:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800456a:	4b2e      	ldr	r3, [pc, #184]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004570:	4b2c      	ldr	r3, [pc, #176]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004576:	4a29      	ldr	r2, [pc, #164]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800457c:	4b27      	ldr	r3, [pc, #156]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b01      	cmp	r3, #1
 8004586:	d114      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004588:	f7fc fdf4 	bl	8001174 <HAL_GetTick>
 800458c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458e:	e00a      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004590:	f7fc fdf0 	bl	8001174 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	; 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e034      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0ee      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045be:	d10d      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80045c0:	4b16      	ldr	r3, [pc, #88]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d4:	4911      	ldr	r1, [pc, #68]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
 80045da:	e005      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80045dc:	4b0f      	ldr	r3, [pc, #60]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a0e      	ldr	r2, [pc, #56]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045e6:	6093      	str	r3, [r2, #8]
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f4:	4909      	ldr	r1, [pc, #36]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	7d1a      	ldrb	r2, [r3, #20]
 800460a:	4b07      	ldr	r3, [pc, #28]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800460c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	42470068 	.word	0x42470068
 800461c:	40023800 	.word	0x40023800
 8004620:	40007000 	.word	0x40007000
 8004624:	42470e40 	.word	0x42470e40
 8004628:	424711e0 	.word	0x424711e0

0800462c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d140      	bne.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d131      	bne.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004660:	4b1f      	ldr	r3, [pc, #124]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004662:	617b      	str	r3, [r7, #20]
          break;
 8004664:	e031      	b.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004666:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004672:	d109      	bne.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004674:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800467e:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004680:	fbb2 f3f3 	udiv	r3, r2, r3
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	e008      	b.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004688:	4b14      	ldr	r3, [pc, #80]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800468a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004692:	4a15      	ldr	r2, [pc, #84]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800469a:	4b10      	ldr	r3, [pc, #64]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800469c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a0:	099b      	lsrs	r3, r3, #6
 80046a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	fb02 f303 	mul.w	r3, r2, r3
 80046ac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046ae:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b4:	0f1b      	lsrs	r3, r3, #28
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	617b      	str	r3, [r7, #20]
          break;
 80046c2:	e002      	b.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
          break;
 80046c8:	bf00      	nop
        }
      }
      break;
 80046ca:	bf00      	nop
    }
  }
  return frequency;
 80046cc:	697b      	ldr	r3, [r7, #20]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800
 80046e0:	00bb8000 	.word	0x00bb8000
 80046e4:	007a1200 	.word	0x007a1200
 80046e8:	00f42400 	.word	0x00f42400

080046ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e07b      	b.n	80047f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	2b00      	cmp	r3, #0
 8004704:	d108      	bne.n	8004718 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470e:	d009      	beq.n	8004724 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	61da      	str	r2, [r3, #28]
 8004716:	e005      	b.n	8004724 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc fb38 	bl	8000db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a8:	ea42 0103 	orr.w	r1, r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	f003 0104 	and.w	r1, r3, #4
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	f003 0210 	and.w	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e041      	b.n	8004894 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fc fb0d 	bl	8000e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f000 fc49 	bl	80050d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d001      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e044      	b.n	800493e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1e      	ldr	r2, [pc, #120]	; (800494c <HAL_TIM_Base_Start_IT+0xb0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d018      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x6c>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048de:	d013      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x6c>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1a      	ldr	r2, [pc, #104]	; (8004950 <HAL_TIM_Base_Start_IT+0xb4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00e      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x6c>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a19      	ldr	r2, [pc, #100]	; (8004954 <HAL_TIM_Base_Start_IT+0xb8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x6c>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a17      	ldr	r2, [pc, #92]	; (8004958 <HAL_TIM_Base_Start_IT+0xbc>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x6c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a16      	ldr	r2, [pc, #88]	; (800495c <HAL_TIM_Base_Start_IT+0xc0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d111      	bne.n	800492c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b06      	cmp	r3, #6
 8004918:	d010      	beq.n	800493c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492a:	e007      	b.n	800493c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40014000 	.word	0x40014000

08004960 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e041      	b.n	80049f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc fa82 	bl	8000e90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f000 fb98 	bl	80050d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <HAL_TIM_PWM_Start+0x24>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	bf14      	ite	ne
 8004a1c:	2301      	movne	r3, #1
 8004a1e:	2300      	moveq	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e022      	b.n	8004a6a <HAL_TIM_PWM_Start+0x6a>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d109      	bne.n	8004a3e <HAL_TIM_PWM_Start+0x3e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	bf14      	ite	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	2300      	moveq	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	e015      	b.n	8004a6a <HAL_TIM_PWM_Start+0x6a>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d109      	bne.n	8004a58 <HAL_TIM_PWM_Start+0x58>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e008      	b.n	8004a6a <HAL_TIM_PWM_Start+0x6a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	bf14      	ite	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	2300      	moveq	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e068      	b.n	8004b44 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start+0x82>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a80:	e013      	b.n	8004aaa <HAL_TIM_PWM_Start+0xaa>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Start+0x92>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a90:	e00b      	b.n	8004aaa <HAL_TIM_PWM_Start+0xaa>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0xa2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa0:	e003      	b.n	8004aaa <HAL_TIM_PWM_Start+0xaa>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	6839      	ldr	r1, [r7, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fdb4 	bl	8005620 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a23      	ldr	r2, [pc, #140]	; (8004b4c <HAL_TIM_PWM_Start+0x14c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d107      	bne.n	8004ad2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ad0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1d      	ldr	r2, [pc, #116]	; (8004b4c <HAL_TIM_PWM_Start+0x14c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d018      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x10e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae4:	d013      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x10e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <HAL_TIM_PWM_Start+0x150>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00e      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x10e>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <HAL_TIM_PWM_Start+0x154>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d009      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x10e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <HAL_TIM_PWM_Start+0x158>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d004      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x10e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <HAL_TIM_PWM_Start+0x15c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d111      	bne.n	8004b32 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b06      	cmp	r3, #6
 8004b1e:	d010      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b30:	e007      	b.n	8004b42 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40000800 	.word	0x40000800
 8004b58:	40000c00 	.word	0x40000c00
 8004b5c:	40014000 	.word	0x40014000

08004b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d122      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d11b      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0202 	mvn.w	r2, #2
 8004b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fa77 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e005      	b.n	8004bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa69 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fa7a 	bl	80050aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d122      	bne.n	8004c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d11b      	bne.n	8004c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0204 	mvn.w	r2, #4
 8004be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fa4d 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004bfc:	e005      	b.n	8004c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa3f 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fa50 	bl	80050aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d122      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d11b      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0208 	mvn.w	r2, #8
 8004c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2204      	movs	r2, #4
 8004c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa23 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004c50:	e005      	b.n	8004c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa15 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa26 	bl	80050aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d122      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0210 	mvn.w	r2, #16
 8004c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f9f9 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f9eb 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f9fc 	bl	80050aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d107      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0201 	mvn.w	r2, #1
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fb fc48 	bl	8000574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cee:	2b80      	cmp	r3, #128	; 0x80
 8004cf0:	d10e      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfc:	2b80      	cmp	r3, #128	; 0x80
 8004cfe:	d107      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fd26 	bl	800575c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d10e      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	d107      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f9c1 	bl	80050be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d10e      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d107      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0220 	mvn.w	r2, #32
 8004d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fcf0 	bl	8005748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e0ae      	b.n	8004eec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b0c      	cmp	r3, #12
 8004d9a:	f200 809f 	bhi.w	8004edc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d9e:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004edd 	.word	0x08004edd
 8004dac:	08004edd 	.word	0x08004edd
 8004db0:	08004edd 	.word	0x08004edd
 8004db4:	08004e19 	.word	0x08004e19
 8004db8:	08004edd 	.word	0x08004edd
 8004dbc:	08004edd 	.word	0x08004edd
 8004dc0:	08004edd 	.word	0x08004edd
 8004dc4:	08004e5b 	.word	0x08004e5b
 8004dc8:	08004edd 	.word	0x08004edd
 8004dcc:	08004edd 	.word	0x08004edd
 8004dd0:	08004edd 	.word	0x08004edd
 8004dd4:	08004e9b 	.word	0x08004e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f9f8 	bl	80051d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0208 	orr.w	r2, r2, #8
 8004df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0204 	bic.w	r2, r2, #4
 8004e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6999      	ldr	r1, [r3, #24]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	619a      	str	r2, [r3, #24]
      break;
 8004e16:	e064      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa3e 	bl	80052a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6999      	ldr	r1, [r3, #24]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	021a      	lsls	r2, r3, #8
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	619a      	str	r2, [r3, #24]
      break;
 8004e58:	e043      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fa89 	bl	8005378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0208 	orr.w	r2, r2, #8
 8004e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0204 	bic.w	r2, r2, #4
 8004e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69d9      	ldr	r1, [r3, #28]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	61da      	str	r2, [r3, #28]
      break;
 8004e98:	e023      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fad3 	bl	800544c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69d9      	ldr	r1, [r3, #28]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	021a      	lsls	r2, r3, #8
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	61da      	str	r2, [r3, #28]
      break;
 8004eda:	e002      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIM_ConfigClockSource+0x1c>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e0b4      	b.n	800507a <HAL_TIM_ConfigClockSource+0x186>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f48:	d03e      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4e:	f200 8087 	bhi.w	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f56:	f000 8086 	beq.w	8005066 <HAL_TIM_ConfigClockSource+0x172>
 8004f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5e:	d87f      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b70      	cmp	r3, #112	; 0x70
 8004f62:	d01a      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0xa6>
 8004f64:	2b70      	cmp	r3, #112	; 0x70
 8004f66:	d87b      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d050      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x11a>
 8004f6c:	2b60      	cmp	r3, #96	; 0x60
 8004f6e:	d877      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f70:	2b50      	cmp	r3, #80	; 0x50
 8004f72:	d03c      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0xfa>
 8004f74:	2b50      	cmp	r3, #80	; 0x50
 8004f76:	d873      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d058      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x13a>
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d86f      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b30      	cmp	r3, #48	; 0x30
 8004f82:	d064      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f84:	2b30      	cmp	r3, #48	; 0x30
 8004f86:	d86b      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d060      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d867      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d05c      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f94:	2b10      	cmp	r3, #16
 8004f96:	d05a      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f98:	e062      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6899      	ldr	r1, [r3, #8]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f000 fb19 	bl	80055e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	609a      	str	r2, [r3, #8]
      break;
 8004fc6:	e04f      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	6899      	ldr	r1, [r3, #8]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f000 fb02 	bl	80055e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fea:	609a      	str	r2, [r3, #8]
      break;
 8004fec:	e03c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 fa76 	bl	80054ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2150      	movs	r1, #80	; 0x50
 8005006:	4618      	mov	r0, r3
 8005008:	f000 facf 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 800500c:	e02c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 fa95 	bl	800554a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2160      	movs	r1, #96	; 0x60
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fabf 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 800502c:	e01c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	461a      	mov	r2, r3
 800503c:	f000 fa56 	bl	80054ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2140      	movs	r1, #64	; 0x40
 8005046:	4618      	mov	r0, r3
 8005048:	f000 faaf 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 800504c:	e00c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f000 faa6 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 800505e:	e003      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      break;
 8005064:	e000      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a34      	ldr	r2, [pc, #208]	; (80051b8 <TIM_Base_SetConfig+0xe4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00f      	beq.n	800510c <TIM_Base_SetConfig+0x38>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f2:	d00b      	beq.n	800510c <TIM_Base_SetConfig+0x38>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a31      	ldr	r2, [pc, #196]	; (80051bc <TIM_Base_SetConfig+0xe8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d007      	beq.n	800510c <TIM_Base_SetConfig+0x38>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a30      	ldr	r2, [pc, #192]	; (80051c0 <TIM_Base_SetConfig+0xec>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_Base_SetConfig+0x38>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a2f      	ldr	r2, [pc, #188]	; (80051c4 <TIM_Base_SetConfig+0xf0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d108      	bne.n	800511e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a25      	ldr	r2, [pc, #148]	; (80051b8 <TIM_Base_SetConfig+0xe4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01b      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512c:	d017      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a22      	ldr	r2, [pc, #136]	; (80051bc <TIM_Base_SetConfig+0xe8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <TIM_Base_SetConfig+0xec>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00f      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <TIM_Base_SetConfig+0xf0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00b      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1f      	ldr	r2, [pc, #124]	; (80051c8 <TIM_Base_SetConfig+0xf4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1e      	ldr	r2, [pc, #120]	; (80051cc <TIM_Base_SetConfig+0xf8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <TIM_Base_SetConfig+0xfc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <TIM_Base_SetConfig+0xe4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d103      	bne.n	80051a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	615a      	str	r2, [r3, #20]
}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800
 80051c4:	40000c00 	.word	0x40000c00
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40014400 	.word	0x40014400
 80051d0:	40014800 	.word	0x40014800

080051d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f023 0201 	bic.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0303 	bic.w	r3, r3, #3
 800520a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f023 0302 	bic.w	r3, r3, #2
 800521c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a1c      	ldr	r2, [pc, #112]	; (800529c <TIM_OC1_SetConfig+0xc8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d10c      	bne.n	800524a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 0308 	bic.w	r3, r3, #8
 8005236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 0304 	bic.w	r3, r3, #4
 8005248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a13      	ldr	r2, [pc, #76]	; (800529c <TIM_OC1_SetConfig+0xc8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d111      	bne.n	8005276 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	621a      	str	r2, [r3, #32]
}
 8005290:	bf00      	nop
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	40010000 	.word	0x40010000

080052a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f023 0210 	bic.w	r2, r3, #16
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0320 	bic.w	r3, r3, #32
 80052ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a1e      	ldr	r2, [pc, #120]	; (8005374 <TIM_OC2_SetConfig+0xd4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d10d      	bne.n	800531c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a15      	ldr	r2, [pc, #84]	; (8005374 <TIM_OC2_SetConfig+0xd4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d113      	bne.n	800534c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005332:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010000 	.word	0x40010000

08005378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0303 	bic.w	r3, r3, #3
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <TIM_OC3_SetConfig+0xd0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d10d      	bne.n	80053f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a14      	ldr	r2, [pc, #80]	; (8005448 <TIM_OC3_SetConfig+0xd0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d113      	bne.n	8005422 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	621a      	str	r2, [r3, #32]
}
 800543c:	bf00      	nop
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	40010000 	.word	0x40010000

0800544c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	031b      	lsls	r3, r3, #12
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a10      	ldr	r2, [pc, #64]	; (80054e8 <TIM_OC4_SetConfig+0x9c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d109      	bne.n	80054c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	019b      	lsls	r3, r3, #6
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40010000 	.word	0x40010000

080054ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f023 0201 	bic.w	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f023 030a 	bic.w	r3, r3, #10
 8005528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554a:	b480      	push	{r7}
 800554c:	b087      	sub	sp, #28
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f023 0210 	bic.w	r2, r3, #16
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	031b      	lsls	r3, r3, #12
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005586:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f043 0307 	orr.w	r3, r3, #7
 80055cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	431a      	orrs	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4313      	orrs	r3, r2
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	609a      	str	r2, [r3, #8]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	2201      	movs	r2, #1
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1a      	ldr	r2, [r3, #32]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	fa01 f303 	lsl.w	r3, r1, r3
 8005658:	431a      	orrs	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005680:	2302      	movs	r3, #2
 8005682:	e050      	b.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1c      	ldr	r2, [pc, #112]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d018      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d0:	d013      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a18      	ldr	r2, [pc, #96]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00e      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a16      	ldr	r2, [pc, #88]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d009      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a15      	ldr	r2, [pc, #84]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d004      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a13      	ldr	r2, [pc, #76]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d10c      	bne.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	4313      	orrs	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40010000 	.word	0x40010000
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40014000 	.word	0x40014000

08005748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005770:	b084      	sub	sp, #16
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	f107 001c 	add.w	r0, r7, #28
 800577e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	2b01      	cmp	r3, #1
 8005786:	d122      	bne.n	80057ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800579c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d105      	bne.n	80057c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f9c0 	bl	8005b48 <USB_CoreReset>
 80057c8:	4603      	mov	r3, r0
 80057ca:	73fb      	strb	r3, [r7, #15]
 80057cc:	e01a      	b.n	8005804 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f9b4 	bl	8005b48 <USB_CoreReset>
 80057e0:	4603      	mov	r3, r0
 80057e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	639a      	str	r2, [r3, #56]	; 0x38
 80057f6:	e005      	b.n	8005804 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	2b01      	cmp	r3, #1
 8005808:	d10b      	bne.n	8005822 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f043 0206 	orr.w	r2, r3, #6
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800582e:	b004      	add	sp, #16
 8005830:	4770      	bx	lr

08005832 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f043 0201 	orr.w	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f023 0201 	bic.w	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d115      	bne.n	80058c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058a4:	2001      	movs	r0, #1
 80058a6:	f7fb fc71 	bl	800118c <HAL_Delay>
      ms++;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3301      	adds	r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f93a 	bl	8005b2a <USB_GetMode>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d01e      	beq.n	80058fa <USB_SetCurrentMode+0x84>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b31      	cmp	r3, #49	; 0x31
 80058c0:	d9f0      	bls.n	80058a4 <USB_SetCurrentMode+0x2e>
 80058c2:	e01a      	b.n	80058fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d115      	bne.n	80058f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058d6:	2001      	movs	r0, #1
 80058d8:	f7fb fc58 	bl	800118c <HAL_Delay>
      ms++;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3301      	adds	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f921 	bl	8005b2a <USB_GetMode>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <USB_SetCurrentMode+0x84>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b31      	cmp	r3, #49	; 0x31
 80058f2:	d9f0      	bls.n	80058d6 <USB_SetCurrentMode+0x60>
 80058f4:	e001      	b.n	80058fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e005      	b.n	8005906 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b32      	cmp	r3, #50	; 0x32
 80058fe:	d101      	bne.n	8005904 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4a13      	ldr	r2, [pc, #76]	; (8005974 <USB_FlushTxFifo+0x64>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d901      	bls.n	8005930 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e01b      	b.n	8005968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	daf2      	bge.n	800591e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	019b      	lsls	r3, r3, #6
 8005940:	f043 0220 	orr.w	r2, r3, #32
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3301      	adds	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a08      	ldr	r2, [pc, #32]	; (8005974 <USB_FlushTxFifo+0x64>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d901      	bls.n	800595a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e006      	b.n	8005968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b20      	cmp	r3, #32
 8005964:	d0f0      	beq.n	8005948 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	00030d40 	.word	0x00030d40

08005978 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3301      	adds	r3, #1
 8005988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4a11      	ldr	r2, [pc, #68]	; (80059d4 <USB_FlushRxFifo+0x5c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e018      	b.n	80059c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	daf2      	bge.n	8005984 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2210      	movs	r2, #16
 80059a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a08      	ldr	r2, [pc, #32]	; (80059d4 <USB_FlushRxFifo+0x5c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e006      	b.n	80059c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d0f0      	beq.n	80059a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	00030d40 	.word	0x00030d40

080059d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059d8:	b480      	push	{r7}
 80059da:	b089      	sub	sp, #36	; 0x24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	4611      	mov	r1, r2
 80059e4:	461a      	mov	r2, r3
 80059e6:	460b      	mov	r3, r1
 80059e8:	71fb      	strb	r3, [r7, #7]
 80059ea:	4613      	mov	r3, r2
 80059ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d123      	bne.n	8005a46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059fe:	88bb      	ldrh	r3, [r7, #4]
 8005a00:	3303      	adds	r3, #3
 8005a02:	089b      	lsrs	r3, r3, #2
 8005a04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a06:	2300      	movs	r3, #0
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	e018      	b.n	8005a3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	031a      	lsls	r2, r3, #12
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a18:	461a      	mov	r2, r3
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	3301      	adds	r3, #1
 8005a24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3301      	adds	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d3e2      	bcc.n	8005a0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3724      	adds	r7, #36	; 0x24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b08b      	sub	sp, #44	; 0x2c
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	089b      	lsrs	r3, r3, #2
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	623b      	str	r3, [r7, #32]
 8005a7e:	e014      	b.n	8005aaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	3301      	adds	r3, #1
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	3301      	adds	r3, #1
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	623b      	str	r3, [r7, #32]
 8005aaa:	6a3a      	ldr	r2, [r7, #32]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d3e6      	bcc.n	8005a80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ab2:	8bfb      	ldrh	r3, [r7, #30]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01e      	beq.n	8005af6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f107 0310 	add.w	r3, r7, #16
 8005ac8:	6812      	ldr	r2, [r2, #0]
 8005aca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	701a      	strb	r2, [r3, #0]
      i++;
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005aea:	8bfb      	ldrh	r3, [r7, #30]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005af0:	8bfb      	ldrh	r3, [r7, #30]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1ea      	bne.n	8005acc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	372c      	adds	r7, #44	; 0x2c
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f003 0301 	and.w	r3, r3, #1
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3301      	adds	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4a13      	ldr	r2, [pc, #76]	; (8005bac <USB_CoreReset+0x64>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e01b      	b.n	8005b9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	daf2      	bge.n	8005b54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f043 0201 	orr.w	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3301      	adds	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4a09      	ldr	r2, [pc, #36]	; (8005bac <USB_CoreReset+0x64>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d901      	bls.n	8005b90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e006      	b.n	8005b9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d0f0      	beq.n	8005b7e <USB_CoreReset+0x36>

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	00030d40 	.word	0x00030d40

08005bb0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b086      	sub	sp, #24
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d018      	beq.n	8005c38 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d10a      	bne.n	8005c22 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c1a:	f043 0304 	orr.w	r3, r3, #4
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	e014      	b.n	8005c4c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c30:	f023 0304 	bic.w	r3, r3, #4
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	e009      	b.n	8005c4c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c46:	f023 0304 	bic.w	r3, r3, #4
 8005c4a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c4c:	2110      	movs	r1, #16
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff fe5e 	bl	8005910 <USB_FlushTxFifo>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff fe8a 	bl	8005978 <USB_FlushRxFifo>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c6e:	2300      	movs	r3, #0
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	e015      	b.n	8005ca0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c80:	461a      	mov	r2, r3
 8005c82:	f04f 33ff 	mov.w	r3, #4294967295
 8005c86:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c94:	461a      	mov	r2, r3
 8005c96:	2300      	movs	r3, #0
 8005c98:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d3e5      	bcc.n	8005c74 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a13      	ldr	r2, [pc, #76]	; (8005d1c <USB_HostInit+0x16c>)
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <USB_HostInit+0x170>)
 8005cd4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005cd8:	e009      	b.n	8005cee <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2280      	movs	r2, #128	; 0x80
 8005cde:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <USB_HostInit+0x174>)
 8005ce4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a0f      	ldr	r2, [pc, #60]	; (8005d28 <USB_HostInit+0x178>)
 8005cea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d105      	bne.n	8005d00 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	f043 0210 	orr.w	r2, r3, #16
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699a      	ldr	r2, [r3, #24]
 8005d04:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <USB_HostInit+0x17c>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d18:	b004      	add	sp, #16
 8005d1a:	4770      	bx	lr
 8005d1c:	01000200 	.word	0x01000200
 8005d20:	00e00300 	.word	0x00e00300
 8005d24:	00600080 	.word	0x00600080
 8005d28:	004000e0 	.word	0x004000e0
 8005d2c:	a3200008 	.word	0xa3200008

08005d30 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	68f9      	ldr	r1, [r7, #12]
 8005d64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d107      	bne.n	8005d82 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d7e:	6053      	str	r3, [r2, #4]
 8005d80:	e009      	b.n	8005d96 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d106      	bne.n	8005d96 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d94:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dc4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005dd4:	2064      	movs	r0, #100	; 0x64
 8005dd6:	f7fb f9d9 	bl	800118c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005de2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005de6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005de8:	200a      	movs	r0, #10
 8005dea:	f7fb f9cf 	bl	800118c <HAL_Delay>

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e1c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d109      	bne.n	8005e3c <USB_DriveVbus+0x44>
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d106      	bne.n	8005e3c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e3a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e46:	d109      	bne.n	8005e5c <USB_DriveVbus+0x64>
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e5a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	0c5b      	lsrs	r3, r3, #17
 8005e88:	f003 0303 	and.w	r3, r3, #3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	b29b      	uxth	r3, r3
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4603      	mov	r3, r0
 8005ecc:	70fb      	strb	r3, [r7, #3]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70bb      	strb	r3, [r7, #2]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eea:	461a      	mov	r2, r3
 8005eec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ef2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d87e      	bhi.n	8005ff8 <USB_HC_Init+0x13c>
 8005efa:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <USB_HC_Init+0x44>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f11 	.word	0x08005f11
 8005f04:	08005fbb 	.word	0x08005fbb
 8005f08:	08005f11 	.word	0x08005f11
 8005f0c:	08005f7d 	.word	0x08005f7d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	da10      	bge.n	8005f4e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f4c:	e057      	b.n	8005ffe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d051      	beq.n	8005ffe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f78:	60d3      	str	r3, [r2, #12]
      break;
 8005f7a:	e040      	b.n	8005ffe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	da34      	bge.n	8006002 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005fb8:	e023      	b.n	8006002 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f240 2325 	movw	r3, #549	; 0x225
 8005fcc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	da17      	bge.n	8006006 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	78fa      	ldrb	r2, [r7, #3]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ff4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ff6:	e006      	b.n	8006006 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	77fb      	strb	r3, [r7, #31]
      break;
 8005ffc:	e004      	b.n	8006008 <USB_HC_Init+0x14c>
      break;
 8005ffe:	bf00      	nop
 8006000:	e002      	b.n	8006008 <USB_HC_Init+0x14c>
      break;
 8006002:	bf00      	nop
 8006004:	e000      	b.n	8006008 <USB_HC_Init+0x14c>
      break;
 8006006:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	4413      	add	r3, r2
 8006010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	440a      	add	r2, r1
 800601e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006022:	f043 0302 	orr.w	r3, r3, #2
 8006026:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800602e:	699a      	ldr	r2, [r3, #24]
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	2101      	movs	r1, #1
 8006038:	fa01 f303 	lsl.w	r3, r1, r3
 800603c:	6939      	ldr	r1, [r7, #16]
 800603e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006042:	4313      	orrs	r3, r2
 8006044:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006052:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006056:	2b00      	cmp	r3, #0
 8006058:	da03      	bge.n	8006062 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800605a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	e001      	b.n	8006066 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff feff 	bl	8005e6a <USB_GetHostSpeed>
 800606c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800606e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006072:	2b02      	cmp	r3, #2
 8006074:	d106      	bne.n	8006084 <USB_HC_Init+0x1c8>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b02      	cmp	r3, #2
 800607a:	d003      	beq.n	8006084 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800607c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	e001      	b.n	8006088 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006088:	787b      	ldrb	r3, [r7, #1]
 800608a:	059b      	lsls	r3, r3, #22
 800608c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006090:	78bb      	ldrb	r3, [r7, #2]
 8006092:	02db      	lsls	r3, r3, #11
 8006094:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006098:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800609a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800609e:	049b      	lsls	r3, r3, #18
 80060a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060a4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80060a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	0159      	lsls	r1, r3, #5
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	440b      	add	r3, r1
 80060ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060be:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060c4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80060c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d003      	beq.n	80060d6 <USB_HC_Init+0x21a>
 80060ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d10f      	bne.n	80060f6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	78fa      	ldrb	r2, [r7, #3]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060f4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80060f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3720      	adds	r7, #32
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08c      	sub	sp, #48	; 0x30
 8006104:	af02      	add	r7, sp, #8
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800611c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006126:	2b00      	cmp	r3, #0
 8006128:	d02d      	beq.n	8006186 <USB_HC_StartXfer+0x86>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	791b      	ldrb	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d129      	bne.n	8006186 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d117      	bne.n	8006168 <USB_HC_StartXfer+0x68>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	79db      	ldrb	r3, [r3, #7]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d003      	beq.n	8006148 <USB_HC_StartXfer+0x48>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	79db      	ldrb	r3, [r3, #7]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d10f      	bne.n	8006168 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	4413      	add	r3, r2
 8006150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	6a3a      	ldr	r2, [r7, #32]
 800615c:	440a      	add	r2, r1
 800615e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006166:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10b      	bne.n	8006186 <USB_HC_StartXfer+0x86>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	795b      	ldrb	r3, [r3, #5]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d107      	bne.n	8006186 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	4619      	mov	r1, r3
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 fa0f 	bl	80065a0 <USB_DoPing>
      return HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	e0f8      	b.n	8006378 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d018      	beq.n	80061c0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	8912      	ldrh	r2, [r2, #8]
 8006196:	4413      	add	r3, r2
 8006198:	3b01      	subs	r3, #1
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	8912      	ldrh	r2, [r2, #8]
 800619e:	fbb3 f3f2 	udiv	r3, r3, r2
 80061a2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80061a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061a6:	8b7b      	ldrh	r3, [r7, #26]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d90b      	bls.n	80061c4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80061ac:	8b7b      	ldrh	r3, [r7, #26]
 80061ae:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	8912      	ldrh	r2, [r2, #8]
 80061b6:	fb03 f202 	mul.w	r2, r3, r2
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	611a      	str	r2, [r3, #16]
 80061be:	e001      	b.n	80061c4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80061c0:	2301      	movs	r3, #1
 80061c2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	78db      	ldrb	r3, [r3, #3]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	8912      	ldrh	r2, [r2, #8]
 80061d2:	fb03 f202 	mul.w	r2, r3, r2
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	611a      	str	r2, [r3, #16]
 80061da:	e003      	b.n	80061e4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	695a      	ldr	r2, [r3, #20]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ee:	04d9      	lsls	r1, r3, #19
 80061f0:	4b63      	ldr	r3, [pc, #396]	; (8006380 <USB_HC_StartXfer+0x280>)
 80061f2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061f4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	7a9b      	ldrb	r3, [r3, #10]
 80061fa:	075b      	lsls	r3, r3, #29
 80061fc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006200:	69f9      	ldr	r1, [r7, #28]
 8006202:	0148      	lsls	r0, r1, #5
 8006204:	6a39      	ldr	r1, [r7, #32]
 8006206:	4401      	add	r1, r0
 8006208:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800620c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800620e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	68d9      	ldr	r1, [r3, #12]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	460a      	mov	r2, r1
 8006228:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	bf0c      	ite	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	2300      	movne	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	4413      	add	r3, r2
 800624a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	6a3a      	ldr	r2, [r7, #32]
 8006256:	440a      	add	r2, r1
 8006258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800625c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006260:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	7e7b      	ldrb	r3, [r7, #25]
 8006272:	075b      	lsls	r3, r3, #29
 8006274:	69f9      	ldr	r1, [r7, #28]
 8006276:	0148      	lsls	r0, r1, #5
 8006278:	6a39      	ldr	r1, [r7, #32]
 800627a:	4401      	add	r1, r0
 800627c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006280:	4313      	orrs	r3, r2
 8006282:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	4413      	add	r3, r2
 800628c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800629a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	78db      	ldrb	r3, [r3, #3]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	e003      	b.n	80062b6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062b4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062bc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ca:	461a      	mov	r2, r3
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80062d0:	79fb      	ldrb	r3, [r7, #7]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	e04e      	b.n	8006378 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	78db      	ldrb	r3, [r3, #3]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d149      	bne.n	8006376 <USB_HC_StartXfer+0x276>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d045      	beq.n	8006376 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	79db      	ldrb	r3, [r3, #7]
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d830      	bhi.n	8006354 <USB_HC_StartXfer+0x254>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <USB_HC_StartXfer+0x1f8>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006309 	.word	0x08006309
 80062fc:	0800632d 	.word	0x0800632d
 8006300:	08006309 	.word	0x08006309
 8006304:	0800632d 	.word	0x0800632d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	3303      	adds	r3, #3
 800630e:	089b      	lsrs	r3, r3, #2
 8006310:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006312:	8afa      	ldrh	r2, [r7, #22]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	b29b      	uxth	r3, r3
 800631a:	429a      	cmp	r2, r3
 800631c:	d91c      	bls.n	8006358 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	f043 0220 	orr.w	r2, r3, #32
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	619a      	str	r2, [r3, #24]
        }
        break;
 800632a:	e015      	b.n	8006358 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	3303      	adds	r3, #3
 8006332:	089b      	lsrs	r3, r3, #2
 8006334:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006336:	8afa      	ldrh	r2, [r7, #22]
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	b29b      	uxth	r3, r3
 8006342:	429a      	cmp	r2, r3
 8006344:	d90a      	bls.n	800635c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	619a      	str	r2, [r3, #24]
        }
        break;
 8006352:	e003      	b.n	800635c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006354:	bf00      	nop
 8006356:	e002      	b.n	800635e <USB_HC_StartXfer+0x25e>
        break;
 8006358:	bf00      	nop
 800635a:	e000      	b.n	800635e <USB_HC_StartXfer+0x25e>
        break;
 800635c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	68d9      	ldr	r1, [r3, #12]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	785a      	ldrb	r2, [r3, #1]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	b29b      	uxth	r3, r3
 800636c:	2000      	movs	r0, #0
 800636e:	9000      	str	r0, [sp, #0]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff fb31 	bl	80059d8 <USB_WritePacket>
  }

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3728      	adds	r7, #40	; 0x28
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	1ff80000 	.word	0x1ff80000

08006384 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	b29b      	uxth	r3, r3
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b089      	sub	sp, #36	; 0x24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	460b      	mov	r3, r1
 80063b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	0c9b      	lsrs	r3, r3, #18
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	0fdb      	lsrs	r3, r3, #31
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d104      	bne.n	8006400 <USB_HC_Halt+0x5a>
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	e0c8      	b.n	8006592 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <USB_HC_Halt+0x66>
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b02      	cmp	r3, #2
 800640a:	d163      	bne.n	80064d4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	440a      	add	r2, r1
 8006422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006426:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800642a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	f040 80ab 	bne.w	8006590 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d133      	bne.n	80064ae <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	440a      	add	r2, r1
 800645c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006460:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006464:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	0151      	lsls	r1, r2, #5
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	440a      	add	r2, r1
 800647c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006480:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006484:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3301      	adds	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006492:	d81d      	bhi.n	80064d0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064aa:	d0ec      	beq.n	8006486 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064ac:	e070      	b.n	8006590 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064ce:	e05f      	b.n	8006590 <USB_HC_Halt+0x1ea>
            break;
 80064d0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064d2:	e05d      	b.n	8006590 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d133      	bne.n	800656c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	4413      	add	r3, r2
 800650c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	0151      	lsls	r1, r2, #5
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	440a      	add	r2, r1
 800651a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800651e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006522:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	440a      	add	r2, r1
 800653a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800653e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006542:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3301      	adds	r3, #1
 8006548:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006550:	d81d      	bhi.n	800658e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006568:	d0ec      	beq.n	8006544 <USB_HC_Halt+0x19e>
 800656a:	e011      	b.n	8006590 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	4413      	add	r3, r2
 8006574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	440a      	add	r2, r1
 8006582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006586:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	e000      	b.n	8006590 <USB_HC_Halt+0x1ea>
          break;
 800658e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3724      	adds	r7, #36	; 0x24
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
	...

080065a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80065b4:	2301      	movs	r3, #1
 80065b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	04da      	lsls	r2, r3, #19
 80065bc:	4b15      	ldr	r3, [pc, #84]	; (8006614 <USB_DoPing+0x74>)
 80065be:	4013      	ands	r3, r2
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	0151      	lsls	r1, r2, #5
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	440a      	add	r2, r1
 80065c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fe:	461a      	mov	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	1ff80000 	.word	0x1ff80000

08006618 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff f911 	bl	8005854 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006632:	2110      	movs	r1, #16
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7ff f96b 	bl	8005910 <USB_FlushTxFifo>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff f997 	bl	8005978 <USB_FlushRxFifo>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006654:	2300      	movs	r3, #0
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	e01f      	b.n	800669a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006670:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006678:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006680:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	461a      	mov	r2, r3
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	3301      	adds	r3, #1
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b0f      	cmp	r3, #15
 800669e:	d9dc      	bls.n	800665a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066a0:	2300      	movs	r3, #0
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	e034      	b.n	8006710 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066da:	461a      	mov	r2, r3
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3301      	adds	r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ec:	d80c      	bhi.n	8006708 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006704:	d0ec      	beq.n	80066e0 <USB_StopHost+0xc8>
 8006706:	e000      	b.n	800670a <USB_StopHost+0xf2>
        break;
 8006708:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	3301      	adds	r3, #1
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b0f      	cmp	r3, #15
 8006714:	d9c7      	bls.n	80066a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671c:	461a      	mov	r2, r3
 800671e:	f04f 33ff 	mov.w	r3, #4294967295
 8006722:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f04f 32ff 	mov.w	r2, #4294967295
 800672a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff f880 	bl	8005832 <USB_EnableGlobalInt>

  return ret;
 8006732:	7ffb      	ldrb	r3, [r7, #31]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3720      	adds	r7, #32
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800673c:	b590      	push	{r4, r7, lr}
 800673e:	b089      	sub	sp, #36	; 0x24
 8006740:	af04      	add	r7, sp, #16
 8006742:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006744:	2301      	movs	r3, #1
 8006746:	2202      	movs	r2, #2
 8006748:	2102      	movs	r1, #2
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fc66 	bl	800701c <USBH_FindInterface>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	2bff      	cmp	r3, #255	; 0xff
 8006758:	d002      	beq.n	8006760 <USBH_CDC_InterfaceInit+0x24>
 800675a:	7bfb      	ldrb	r3, [r7, #15]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d901      	bls.n	8006764 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006760:	2302      	movs	r3, #2
 8006762:	e13d      	b.n	80069e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fc3b 	bl	8006fe4 <USBH_SelectInterface>
 800676e:	4603      	mov	r3, r0
 8006770:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006778:	2302      	movs	r3, #2
 800677a:	e131      	b.n	80069e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006782:	2050      	movs	r0, #80	; 0x50
 8006784:	f002 fafa 	bl	8008d7c <malloc>
 8006788:	4603      	mov	r3, r0
 800678a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800679c:	2302      	movs	r3, #2
 800679e:	e11f      	b.n	80069e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80067a0:	2250      	movs	r2, #80	; 0x50
 80067a2:	2100      	movs	r1, #0
 80067a4:	68b8      	ldr	r0, [r7, #8]
 80067a6:	f002 faf9 	bl	8008d9c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	211a      	movs	r1, #26
 80067b0:	fb01 f303 	mul.w	r3, r1, r3
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b25b      	sxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	da15      	bge.n	80067ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	211a      	movs	r1, #26
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	4413      	add	r3, r2
 80067ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	211a      	movs	r1, #26
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067e8:	881a      	ldrh	r2, [r3, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	785b      	ldrb	r3, [r3, #1]
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 ff2c 	bl	8008652 <USBH_AllocPipe>
 80067fa:	4603      	mov	r3, r0
 80067fc:	461a      	mov	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	7819      	ldrb	r1, [r3, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	7858      	ldrb	r0, [r3, #1]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	8952      	ldrh	r2, [r2, #10]
 800681a:	9202      	str	r2, [sp, #8]
 800681c:	2203      	movs	r2, #3
 800681e:	9201      	str	r2, [sp, #4]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	4623      	mov	r3, r4
 8006824:	4602      	mov	r2, r0
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fee4 	bl	80085f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2200      	movs	r2, #0
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f002 f9f3 	bl	8008c20 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800683a:	2300      	movs	r3, #0
 800683c:	2200      	movs	r2, #0
 800683e:	210a      	movs	r1, #10
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fbeb 	bl	800701c <USBH_FindInterface>
 8006846:	4603      	mov	r3, r0
 8006848:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	2bff      	cmp	r3, #255	; 0xff
 800684e:	d002      	beq.n	8006856 <USBH_CDC_InterfaceInit+0x11a>
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d901      	bls.n	800685a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006856:	2302      	movs	r3, #2
 8006858:	e0c2      	b.n	80069e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	211a      	movs	r1, #26
 8006860:	fb01 f303 	mul.w	r3, r1, r3
 8006864:	4413      	add	r3, r2
 8006866:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	b25b      	sxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	da16      	bge.n	80068a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	211a      	movs	r1, #26
 8006878:	fb01 f303 	mul.w	r3, r1, r3
 800687c:	4413      	add	r3, r2
 800687e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006882:	781a      	ldrb	r2, [r3, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	211a      	movs	r1, #26
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	4413      	add	r3, r2
 8006894:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006898:	881a      	ldrh	r2, [r3, #0]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	835a      	strh	r2, [r3, #26]
 800689e:	e015      	b.n	80068cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	211a      	movs	r1, #26
 80068a6:	fb01 f303 	mul.w	r3, r1, r3
 80068aa:	4413      	add	r3, r2
 80068ac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068b0:	781a      	ldrb	r2, [r3, #0]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	211a      	movs	r1, #26
 80068bc:	fb01 f303 	mul.w	r3, r1, r3
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068c6:	881a      	ldrh	r2, [r3, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	211a      	movs	r1, #26
 80068d2:	fb01 f303 	mul.w	r3, r1, r3
 80068d6:	4413      	add	r3, r2
 80068d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b25b      	sxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	da16      	bge.n	8006912 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	211a      	movs	r1, #26
 80068ea:	fb01 f303 	mul.w	r3, r1, r3
 80068ee:	4413      	add	r3, r2
 80068f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068f4:	781a      	ldrb	r2, [r3, #0]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	211a      	movs	r1, #26
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	4413      	add	r3, r2
 8006906:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800690a:	881a      	ldrh	r2, [r3, #0]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	835a      	strh	r2, [r3, #26]
 8006910:	e015      	b.n	800693e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	211a      	movs	r1, #26
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	4413      	add	r3, r2
 800691e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006922:	781a      	ldrb	r2, [r3, #0]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	211a      	movs	r1, #26
 800692e:	fb01 f303 	mul.w	r3, r1, r3
 8006932:	4413      	add	r3, r2
 8006934:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006938:	881a      	ldrh	r2, [r3, #0]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	7b9b      	ldrb	r3, [r3, #14]
 8006942:	4619      	mov	r1, r3
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 fe84 	bl	8008652 <USBH_AllocPipe>
 800694a:	4603      	mov	r3, r0
 800694c:	461a      	mov	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	7bdb      	ldrb	r3, [r3, #15]
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fe7a 	bl	8008652 <USBH_AllocPipe>
 800695e:	4603      	mov	r3, r0
 8006960:	461a      	mov	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	7b59      	ldrb	r1, [r3, #13]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	7b98      	ldrb	r0, [r3, #14]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	8b12      	ldrh	r2, [r2, #24]
 800697e:	9202      	str	r2, [sp, #8]
 8006980:	2202      	movs	r2, #2
 8006982:	9201      	str	r2, [sp, #4]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	4623      	mov	r3, r4
 8006988:	4602      	mov	r2, r0
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 fe32 	bl	80085f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	7b19      	ldrb	r1, [r3, #12]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	7bd8      	ldrb	r0, [r3, #15]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	8b52      	ldrh	r2, [r2, #26]
 80069a8:	9202      	str	r2, [sp, #8]
 80069aa:	2202      	movs	r2, #2
 80069ac:	9201      	str	r2, [sp, #4]
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	4623      	mov	r3, r4
 80069b2:	4602      	mov	r2, r0
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 fe1d 	bl	80085f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	7b5b      	ldrb	r3, [r3, #13]
 80069c6:	2200      	movs	r2, #0
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f002 f928 	bl	8008c20 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	7b1b      	ldrb	r3, [r3, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f002 f921 	bl	8008c20 <USBH_LL_SetToggle>

  return USBH_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd90      	pop	{r4, r7, pc}

080069e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00e      	beq.n	8006a20 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 fe12 	bl	8008632 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fe3d 	bl	8008694 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	7b1b      	ldrb	r3, [r3, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00e      	beq.n	8006a46 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	7b1b      	ldrb	r3, [r3, #12]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fdff 	bl	8008632 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	7b1b      	ldrb	r3, [r3, #12]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fe2a 	bl	8008694 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	7b5b      	ldrb	r3, [r3, #13]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00e      	beq.n	8006a6c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	7b5b      	ldrb	r3, [r3, #13]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 fdec 	bl	8008632 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	7b5b      	ldrb	r3, [r3, #13]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 fe17 	bl	8008694 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f002 f983 	bl	8008d8c <free>
    phost->pActiveClass->pData = 0U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3340      	adds	r3, #64	; 0x40
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f8b1 	bl	8006c1a <GetLineCoding>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006abc:	7afb      	ldrb	r3, [r7, #11]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d105      	bne.n	8006ace <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ac8:	2102      	movs	r1, #2
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006ace:	7afb      	ldrb	r3, [r7, #11]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d877      	bhi.n	8006bec <USBH_CDC_Process+0x114>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <USBH_CDC_Process+0x2c>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b19 	.word	0x08006b19
 8006b08:	08006b1f 	.word	0x08006b1f
 8006b0c:	08006b4f 	.word	0x08006b4f
 8006b10:	08006bc3 	.word	0x08006bc3
 8006b14:	08006bd1 	.word	0x08006bd1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b1c:	e06d      	b.n	8006bfa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f897 	bl	8006c58 <SetLineCoding>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d104      	bne.n	8006b3e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b3c:	e058      	b.n	8006bf0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d055      	beq.n	8006bf0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2204      	movs	r2, #4
 8006b48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b4c:	e050      	b.n	8006bf0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	3340      	adds	r3, #64	; 0x40
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f860 	bl	8006c1a <GetLineCoding>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d126      	bne.n	8006bb2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b76:	791b      	ldrb	r3, [r3, #4]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d13b      	bne.n	8006bf4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b86:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d133      	bne.n	8006bf4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b96:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d12b      	bne.n	8006bf4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d124      	bne.n	8006bf4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f958 	bl	8006e60 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bb0:	e020      	b.n	8006bf4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d01d      	beq.n	8006bf4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2204      	movs	r2, #4
 8006bbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bc0:	e018      	b.n	8006bf4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f867 	bl	8006c96 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f8da 	bl	8006d82 <CDC_ProcessReception>
      break;
 8006bce:	e014      	b.n	8006bfa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 ffef 	bl	8007bb6 <USBH_ClrFeature>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006bea:	e005      	b.n	8006bf8 <USBH_CDC_Process+0x120>

    default:
      break;
 8006bec:	bf00      	nop
 8006bee:	e004      	b.n	8006bfa <USBH_CDC_Process+0x122>
      break;
 8006bf0:	bf00      	nop
 8006bf2:	e002      	b.n	8006bfa <USBH_CDC_Process+0x122>
      break;
 8006bf4:	bf00      	nop
 8006bf6:	e000      	b.n	8006bfa <USBH_CDC_Process+0x122>
      break;
 8006bf8:	bf00      	nop

  }

  return status;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b082      	sub	sp, #8
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	22a1      	movs	r2, #161	; 0xa1
 8006c28:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2221      	movs	r2, #33	; 0x21
 8006c2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2207      	movs	r2, #7
 8006c40:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2207      	movs	r2, #7
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 fa81 	bl	8008150 <USBH_CtlReq>
 8006c4e:	4603      	mov	r3, r0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2221      	movs	r2, #33	; 0x21
 8006c66:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2207      	movs	r2, #7
 8006c7e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2207      	movs	r2, #7
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 fa62 	bl	8008150 <USBH_CtlReq>
 8006c8c:	4603      	mov	r3, r0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b086      	sub	sp, #24
 8006c9a:	af02      	add	r7, sp, #8
 8006c9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d002      	beq.n	8006cbc <CDC_ProcessTransmission+0x26>
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d023      	beq.n	8006d02 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006cba:	e05e      	b.n	8006d7a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	8b12      	ldrh	r2, [r2, #24]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d90b      	bls.n	8006ce0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	69d9      	ldr	r1, [r3, #28]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8b1a      	ldrh	r2, [r3, #24]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	7b5b      	ldrb	r3, [r3, #13]
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	9000      	str	r0, [sp, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 fc48 	bl	800856e <USBH_BulkSendData>
 8006cde:	e00b      	b.n	8006cf8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	7b5b      	ldrb	r3, [r3, #13]
 8006cee:	2001      	movs	r0, #1
 8006cf0:	9000      	str	r0, [sp, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fc3b 	bl	800856e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d00:	e03b      	b.n	8006d7a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	7b5b      	ldrb	r3, [r3, #13]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 ff5f 	bl	8008bcc <USBH_LL_GetURBState>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d12:	7afb      	ldrb	r3, [r7, #11]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d128      	bne.n	8006d6a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	8b12      	ldrh	r2, [r2, #24]
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d90e      	bls.n	8006d42 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	8b12      	ldrh	r2, [r2, #24]
 8006d2c:	1a9a      	subs	r2, r3, r2
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	8b12      	ldrh	r2, [r2, #24]
 8006d3a:	441a      	add	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	61da      	str	r2, [r3, #28]
 8006d40:	e002      	b.n	8006d48 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d58:	e00e      	b.n	8006d78 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f868 	bl	8006e38 <USBH_CDC_TransmitCallback>
      break;
 8006d68:	e006      	b.n	8006d78 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d6a:	7afb      	ldrb	r3, [r7, #11]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d103      	bne.n	8006d78 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d78:	bf00      	nop
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b086      	sub	sp, #24
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d002      	beq.n	8006da8 <CDC_ProcessReception+0x26>
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d00e      	beq.n	8006dc4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006da6:	e043      	b.n	8006e30 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	6a19      	ldr	r1, [r3, #32]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	8b5a      	ldrh	r2, [r3, #26]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	7b1b      	ldrb	r3, [r3, #12]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 fbff 	bl	80085b8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006dc2:	e035      	b.n	8006e30 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	7b1b      	ldrb	r3, [r3, #12]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fefe 	bl	8008bcc <USBH_LL_GetURBState>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006dd4:	7cfb      	ldrb	r3, [r7, #19]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d129      	bne.n	8006e2e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	7b1b      	ldrb	r3, [r3, #12]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 fe61 	bl	8008aa8 <USBH_LL_GetLastXferSize>
 8006de6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d016      	beq.n	8006e20 <CDC_ProcessReception+0x9e>
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	8b5b      	ldrh	r3, [r3, #26]
 8006df6:	461a      	mov	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d910      	bls.n	8006e20 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1ad2      	subs	r2, r2, r3
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	6a1a      	ldr	r2, [r3, #32]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	441a      	add	r2, r3
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2203      	movs	r2, #3
 8006e1a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e1e:	e006      	b.n	8006e2e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f80f 	bl	8006e4c <USBH_CDC_ReceiveCallback>
      break;
 8006e2e:	bf00      	nop
  }
}
 8006e30:	bf00      	nop
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e029      	b.n	8006ee0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	79fa      	ldrb	r2, [r7, #7]
 8006e90:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f81f 	bl	8006ee8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f001 fd31 	bl	8008940 <USBH_LL_Init>

  return USBH_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	e009      	b.n	8006f0e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	33e0      	adds	r3, #224	; 0xe0
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	2200      	movs	r2, #0
 8006f06:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b0f      	cmp	r3, #15
 8006f12:	d9f2      	bls.n	8006efa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	e009      	b.n	8006f2e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f24:	2200      	movs	r2, #0
 8006f26:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f34:	d3f1      	bcc.n	8006f1a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2240      	movs	r2, #64	; 0x40
 8006f5a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d016      	beq.n	8006fd2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10e      	bne.n	8006fcc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fb4:	1c59      	adds	r1, r3, #1
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	33de      	adds	r3, #222	; 0xde
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]
 8006fca:	e004      	b.n	8006fd6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	73fb      	strb	r3, [r7, #15]
 8006fd0:	e001      	b.n	8006fd6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006ffa:	78fa      	ldrb	r2, [r7, #3]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d204      	bcs.n	800700a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	78fa      	ldrb	r2, [r7, #3]
 8007004:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007008:	e001      	b.n	800700e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800700a:	2302      	movs	r3, #2
 800700c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800700e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	4608      	mov	r0, r1
 8007026:	4611      	mov	r1, r2
 8007028:	461a      	mov	r2, r3
 800702a:	4603      	mov	r3, r0
 800702c:	70fb      	strb	r3, [r7, #3]
 800702e:	460b      	mov	r3, r1
 8007030:	70bb      	strb	r3, [r7, #2]
 8007032:	4613      	mov	r3, r2
 8007034:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007044:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007046:	e025      	b.n	8007094 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	221a      	movs	r2, #26
 800704c:	fb02 f303 	mul.w	r3, r2, r3
 8007050:	3308      	adds	r3, #8
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4413      	add	r3, r2
 8007056:	3302      	adds	r3, #2
 8007058:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	795b      	ldrb	r3, [r3, #5]
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	429a      	cmp	r2, r3
 8007062:	d002      	beq.n	800706a <USBH_FindInterface+0x4e>
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	2bff      	cmp	r3, #255	; 0xff
 8007068:	d111      	bne.n	800708e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800706e:	78ba      	ldrb	r2, [r7, #2]
 8007070:	429a      	cmp	r2, r3
 8007072:	d002      	beq.n	800707a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007074:	78bb      	ldrb	r3, [r7, #2]
 8007076:	2bff      	cmp	r3, #255	; 0xff
 8007078:	d109      	bne.n	800708e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800707e:	787a      	ldrb	r2, [r7, #1]
 8007080:	429a      	cmp	r2, r3
 8007082:	d002      	beq.n	800708a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007084:	787b      	ldrb	r3, [r7, #1]
 8007086:	2bff      	cmp	r3, #255	; 0xff
 8007088:	d101      	bne.n	800708e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	e006      	b.n	800709c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	3301      	adds	r3, #1
 8007092:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d9d6      	bls.n	8007048 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800709a:	23ff      	movs	r3, #255	; 0xff
}
 800709c:	4618      	mov	r0, r3
 800709e:	371c      	adds	r7, #28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 fc81 	bl	80089b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80070b6:	2101      	movs	r1, #1
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 fd9a 	bl	8008bf2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af04      	add	r7, sp, #16
 80070ce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80070d0:	2302      	movs	r3, #2
 80070d2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d102      	bne.n	80070ea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2203      	movs	r2, #3
 80070e8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b0b      	cmp	r3, #11
 80070f2:	f200 81be 	bhi.w	8007472 <USBH_Process+0x3aa>
 80070f6:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <USBH_Process+0x34>)
 80070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fc:	0800712d 	.word	0x0800712d
 8007100:	0800715f 	.word	0x0800715f
 8007104:	080071c7 	.word	0x080071c7
 8007108:	0800740d 	.word	0x0800740d
 800710c:	08007473 	.word	0x08007473
 8007110:	0800726b 	.word	0x0800726b
 8007114:	080073b3 	.word	0x080073b3
 8007118:	080072a1 	.word	0x080072a1
 800711c:	080072c1 	.word	0x080072c1
 8007120:	080072e1 	.word	0x080072e1
 8007124:	08007325 	.word	0x08007325
 8007128:	080073f5 	.word	0x080073f5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 819e 	beq.w	8007476 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007140:	20c8      	movs	r0, #200	; 0xc8
 8007142:	f001 fd9d 	bl	8008c80 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 fc93 	bl	8008a72 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800715c:	e18b      	b.n	8007476 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007164:	2b01      	cmp	r3, #1
 8007166:	d107      	bne.n	8007178 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007176:	e18d      	b.n	8007494 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800717e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007182:	d914      	bls.n	80071ae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800718a:	3301      	adds	r3, #1
 800718c:	b2da      	uxtb	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800719a:	2b03      	cmp	r3, #3
 800719c:	d903      	bls.n	80071a6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	220d      	movs	r2, #13
 80071a2:	701a      	strb	r2, [r3, #0]
      break;
 80071a4:	e176      	b.n	8007494 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
      break;
 80071ac:	e172      	b.n	8007494 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071b4:	f103 020a 	add.w	r2, r3, #10
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80071be:	200a      	movs	r0, #10
 80071c0:	f001 fd5e 	bl	8008c80 <USBH_Delay>
      break;
 80071c4:	e166      	b.n	8007494 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071d6:	2104      	movs	r1, #4
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80071dc:	2064      	movs	r0, #100	; 0x64
 80071de:	f001 fd4f 	bl	8008c80 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fc1e 	bl	8008a24 <USBH_LL_GetSpeed>
 80071e8:	4603      	mov	r3, r0
 80071ea:	461a      	mov	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2205      	movs	r2, #5
 80071f6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80071f8:	2100      	movs	r1, #0
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 fa29 	bl	8008652 <USBH_AllocPipe>
 8007200:	4603      	mov	r3, r0
 8007202:	461a      	mov	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007208:	2180      	movs	r1, #128	; 0x80
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 fa21 	bl	8008652 <USBH_AllocPipe>
 8007210:	4603      	mov	r3, r0
 8007212:	461a      	mov	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	7919      	ldrb	r1, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800722c:	b292      	uxth	r2, r2
 800722e:	9202      	str	r2, [sp, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	9201      	str	r2, [sp, #4]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	4603      	mov	r3, r0
 8007238:	2280      	movs	r2, #128	; 0x80
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 f9da 	bl	80085f4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	7959      	ldrb	r1, [r3, #5]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007254:	b292      	uxth	r2, r2
 8007256:	9202      	str	r2, [sp, #8]
 8007258:	2200      	movs	r2, #0
 800725a:	9201      	str	r2, [sp, #4]
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	4603      	mov	r3, r0
 8007260:	2200      	movs	r2, #0
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 f9c6 	bl	80085f4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007268:	e114      	b.n	8007494 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f918 	bl	80074a0 <USBH_HandleEnum>
 8007270:	4603      	mov	r3, r0
 8007272:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	f040 80fe 	bne.w	800747a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800728c:	2b01      	cmp	r3, #1
 800728e:	d103      	bne.n	8007298 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2208      	movs	r2, #8
 8007294:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007296:	e0f0      	b.n	800747a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2207      	movs	r2, #7
 800729c:	701a      	strb	r2, [r3, #0]
      break;
 800729e:	e0ec      	b.n	800747a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 80e9 	beq.w	800747e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072b2:	2101      	movs	r1, #1
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2208      	movs	r2, #8
 80072bc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80072be:	e0de      	b.n	800747e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fc2c 	bl	8007b28 <USBH_SetCfg>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f040 80d5 	bne.w	8007482 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2209      	movs	r2, #9
 80072dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072de:	e0d0      	b.n	8007482 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d016      	beq.n	800731c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80072ee:	2101      	movs	r1, #1
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fc3c 	bl	8007b6e <USBH_SetFeature>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d103      	bne.n	800730a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	220a      	movs	r2, #10
 8007306:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007308:	e0bd      	b.n	8007486 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b03      	cmp	r3, #3
 8007310:	f040 80b9 	bne.w	8007486 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	220a      	movs	r2, #10
 8007318:	701a      	strb	r2, [r3, #0]
      break;
 800731a:	e0b4      	b.n	8007486 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	220a      	movs	r2, #10
 8007320:	701a      	strb	r2, [r3, #0]
      break;
 8007322:	e0b0      	b.n	8007486 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 80ad 	beq.w	800748a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
 800733c:	e016      	b.n	800736c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800733e:	7bfa      	ldrb	r2, [r7, #15]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	32de      	adds	r2, #222	; 0xde
 8007344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007348:	791a      	ldrb	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007350:	429a      	cmp	r2, r3
 8007352:	d108      	bne.n	8007366 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007354:	7bfa      	ldrb	r2, [r7, #15]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32de      	adds	r2, #222	; 0xde
 800735a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007364:	e005      	b.n	8007372 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	3301      	adds	r3, #1
 800736a:	73fb      	strb	r3, [r7, #15]
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0e5      	beq.n	800733e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007378:	2b00      	cmp	r3, #0
 800737a:	d016      	beq.n	80073aa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d109      	bne.n	80073a2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2206      	movs	r2, #6
 8007392:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800739a:	2103      	movs	r1, #3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073a0:	e073      	b.n	800748a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	220d      	movs	r2, #13
 80073a6:	701a      	strb	r2, [r3, #0]
      break;
 80073a8:	e06f      	b.n	800748a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	220d      	movs	r2, #13
 80073ae:	701a      	strb	r2, [r3, #0]
      break;
 80073b0:	e06b      	b.n	800748a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d017      	beq.n	80073ec <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	4798      	blx	r3
 80073c8:	4603      	mov	r3, r0
 80073ca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d103      	bne.n	80073dc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	220b      	movs	r2, #11
 80073d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073da:	e058      	b.n	800748e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d154      	bne.n	800748e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	220d      	movs	r2, #13
 80073e8:	701a      	strb	r2, [r3, #0]
      break;
 80073ea:	e050      	b.n	800748e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	220d      	movs	r2, #13
 80073f0:	701a      	strb	r2, [r3, #0]
      break;
 80073f2:	e04c      	b.n	800748e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d049      	beq.n	8007492 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	4798      	blx	r3
      }
      break;
 800740a:	e042      	b.n	8007492 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7ff fd67 	bl	8006ee8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d009      	beq.n	8007438 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800743e:	2b00      	cmp	r3, #0
 8007440:	d005      	beq.n	800744e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007448:	2105      	movs	r1, #5
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b01      	cmp	r3, #1
 8007458:	d107      	bne.n	800746a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7ff fe20 	bl	80070a8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007468:	e014      	b.n	8007494 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 faa4 	bl	80089b8 <USBH_LL_Start>
      break;
 8007470:	e010      	b.n	8007494 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007472:	bf00      	nop
 8007474:	e00e      	b.n	8007494 <USBH_Process+0x3cc>
      break;
 8007476:	bf00      	nop
 8007478:	e00c      	b.n	8007494 <USBH_Process+0x3cc>
      break;
 800747a:	bf00      	nop
 800747c:	e00a      	b.n	8007494 <USBH_Process+0x3cc>
    break;
 800747e:	bf00      	nop
 8007480:	e008      	b.n	8007494 <USBH_Process+0x3cc>
      break;
 8007482:	bf00      	nop
 8007484:	e006      	b.n	8007494 <USBH_Process+0x3cc>
      break;
 8007486:	bf00      	nop
 8007488:	e004      	b.n	8007494 <USBH_Process+0x3cc>
      break;
 800748a:	bf00      	nop
 800748c:	e002      	b.n	8007494 <USBH_Process+0x3cc>
      break;
 800748e:	bf00      	nop
 8007490:	e000      	b.n	8007494 <USBH_Process+0x3cc>
      break;
 8007492:	bf00      	nop
  }
  return USBH_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop

080074a0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b088      	sub	sp, #32
 80074a4:	af04      	add	r7, sp, #16
 80074a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074a8:	2301      	movs	r3, #1
 80074aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80074ac:	2301      	movs	r3, #1
 80074ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	785b      	ldrb	r3, [r3, #1]
 80074b4:	2b07      	cmp	r3, #7
 80074b6:	f200 81c1 	bhi.w	800783c <USBH_HandleEnum+0x39c>
 80074ba:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <USBH_HandleEnum+0x20>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074e1 	.word	0x080074e1
 80074c4:	0800759f 	.word	0x0800759f
 80074c8:	08007609 	.word	0x08007609
 80074cc:	08007697 	.word	0x08007697
 80074d0:	08007701 	.word	0x08007701
 80074d4:	08007771 	.word	0x08007771
 80074d8:	080077b7 	.word	0x080077b7
 80074dc:	080077fd 	.word	0x080077fd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80074e0:	2108      	movs	r1, #8
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa50 	bl	8007988 <USBH_Get_DevDesc>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d130      	bne.n	8007554 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	7919      	ldrb	r1, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007516:	b292      	uxth	r2, r2
 8007518:	9202      	str	r2, [sp, #8]
 800751a:	2200      	movs	r2, #0
 800751c:	9201      	str	r2, [sp, #4]
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	4603      	mov	r3, r0
 8007522:	2280      	movs	r2, #128	; 0x80
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 f865 	bl	80085f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7959      	ldrb	r1, [r3, #5]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800753e:	b292      	uxth	r2, r2
 8007540:	9202      	str	r2, [sp, #8]
 8007542:	2200      	movs	r2, #0
 8007544:	9201      	str	r2, [sp, #4]
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	4603      	mov	r3, r0
 800754a:	2200      	movs	r2, #0
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 f851 	bl	80085f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007552:	e175      	b.n	8007840 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	2b03      	cmp	r3, #3
 8007558:	f040 8172 	bne.w	8007840 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007562:	3301      	adds	r3, #1
 8007564:	b2da      	uxtb	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007572:	2b03      	cmp	r3, #3
 8007574:	d903      	bls.n	800757e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	220d      	movs	r2, #13
 800757a:	701a      	strb	r2, [r3, #0]
      break;
 800757c:	e160      	b.n	8007840 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	795b      	ldrb	r3, [r3, #5]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 f885 	bl	8008694 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	791b      	ldrb	r3, [r3, #4]
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 f87f 	bl	8008694 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
      break;
 800759c:	e150      	b.n	8007840 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800759e:	2112      	movs	r1, #18
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f9f1 	bl	8007988 <USBH_Get_DevDesc>
 80075a6:	4603      	mov	r3, r0
 80075a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d103      	bne.n	80075b8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075b6:	e145      	b.n	8007844 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	f040 8142 	bne.w	8007844 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075c6:	3301      	adds	r3, #1
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d903      	bls.n	80075e2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	220d      	movs	r2, #13
 80075de:	701a      	strb	r2, [r3, #0]
      break;
 80075e0:	e130      	b.n	8007844 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	795b      	ldrb	r3, [r3, #5]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 f853 	bl	8008694 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	791b      	ldrb	r3, [r3, #4]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 f84d 	bl	8008694 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]
      break;
 8007606:	e11d      	b.n	8007844 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007608:	2101      	movs	r1, #1
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fa68 	bl	8007ae0 <USBH_SetAddress>
 8007610:	4603      	mov	r3, r0
 8007612:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d132      	bne.n	8007680 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800761a:	2002      	movs	r0, #2
 800761c:	f001 fb30 	bl	8008c80 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2203      	movs	r2, #3
 800762c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	7919      	ldrb	r1, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007642:	b292      	uxth	r2, r2
 8007644:	9202      	str	r2, [sp, #8]
 8007646:	2200      	movs	r2, #0
 8007648:	9201      	str	r2, [sp, #4]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4603      	mov	r3, r0
 800764e:	2280      	movs	r2, #128	; 0x80
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 ffcf 	bl	80085f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7959      	ldrb	r1, [r3, #5]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800766a:	b292      	uxth	r2, r2
 800766c:	9202      	str	r2, [sp, #8]
 800766e:	2200      	movs	r2, #0
 8007670:	9201      	str	r2, [sp, #4]
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	4603      	mov	r3, r0
 8007676:	2200      	movs	r2, #0
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 ffbb 	bl	80085f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800767e:	e0e3      	b.n	8007848 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	2b03      	cmp	r3, #3
 8007684:	f040 80e0 	bne.w	8007848 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	220d      	movs	r2, #13
 800768c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	705a      	strb	r2, [r3, #1]
      break;
 8007694:	e0d8      	b.n	8007848 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007696:	2109      	movs	r1, #9
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f99d 	bl	80079d8 <USBH_Get_CfgDesc>
 800769e:	4603      	mov	r3, r0
 80076a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d103      	bne.n	80076b0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2204      	movs	r2, #4
 80076ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ae:	e0cd      	b.n	800784c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	f040 80ca 	bne.w	800784c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076be:	3301      	adds	r3, #1
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d903      	bls.n	80076da <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	220d      	movs	r2, #13
 80076d6:	701a      	strb	r2, [r3, #0]
      break;
 80076d8:	e0b8      	b.n	800784c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	795b      	ldrb	r3, [r3, #5]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 ffd7 	bl	8008694 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	791b      	ldrb	r3, [r3, #4]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 ffd1 	bl	8008694 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]
      break;
 80076fe:	e0a5      	b.n	800784c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f965 	bl	80079d8 <USBH_Get_CfgDesc>
 800770e:	4603      	mov	r3, r0
 8007710:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d103      	bne.n	8007720 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2205      	movs	r2, #5
 800771c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800771e:	e097      	b.n	8007850 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	2b03      	cmp	r3, #3
 8007724:	f040 8094 	bne.w	8007850 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800772e:	3301      	adds	r3, #1
 8007730:	b2da      	uxtb	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800773e:	2b03      	cmp	r3, #3
 8007740:	d903      	bls.n	800774a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	220d      	movs	r2, #13
 8007746:	701a      	strb	r2, [r3, #0]
      break;
 8007748:	e082      	b.n	8007850 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	795b      	ldrb	r3, [r3, #5]
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 ff9f 	bl	8008694 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	791b      	ldrb	r3, [r3, #4]
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 ff99 	bl	8008694 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	701a      	strb	r2, [r3, #0]
      break;
 800776e:	e06f      	b.n	8007850 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007776:	2b00      	cmp	r3, #0
 8007778:	d019      	beq.n	80077ae <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007786:	23ff      	movs	r3, #255	; 0xff
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f949 	bl	8007a20 <USBH_Get_StringDesc>
 800778e:	4603      	mov	r3, r0
 8007790:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d103      	bne.n	80077a0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2206      	movs	r2, #6
 800779c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800779e:	e059      	b.n	8007854 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d156      	bne.n	8007854 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2206      	movs	r2, #6
 80077aa:	705a      	strb	r2, [r3, #1]
      break;
 80077ac:	e052      	b.n	8007854 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2206      	movs	r2, #6
 80077b2:	705a      	strb	r2, [r3, #1]
      break;
 80077b4:	e04e      	b.n	8007854 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d019      	beq.n	80077f4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077cc:	23ff      	movs	r3, #255	; 0xff
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f926 	bl	8007a20 <USBH_Get_StringDesc>
 80077d4:	4603      	mov	r3, r0
 80077d6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d103      	bne.n	80077e6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2207      	movs	r2, #7
 80077e2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077e4:	e038      	b.n	8007858 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d135      	bne.n	8007858 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2207      	movs	r2, #7
 80077f0:	705a      	strb	r2, [r3, #1]
      break;
 80077f2:	e031      	b.n	8007858 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2207      	movs	r2, #7
 80077f8:	705a      	strb	r2, [r3, #1]
      break;
 80077fa:	e02d      	b.n	8007858 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007802:	2b00      	cmp	r3, #0
 8007804:	d017      	beq.n	8007836 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007812:	23ff      	movs	r3, #255	; 0xff
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f903 	bl	8007a20 <USBH_Get_StringDesc>
 800781a:	4603      	mov	r3, r0
 800781c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d102      	bne.n	800782a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007828:	e018      	b.n	800785c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	2b03      	cmp	r3, #3
 800782e:	d115      	bne.n	800785c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
      break;
 8007834:	e012      	b.n	800785c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]
      break;
 800783a:	e00f      	b.n	800785c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800783c:	bf00      	nop
 800783e:	e00e      	b.n	800785e <USBH_HandleEnum+0x3be>
      break;
 8007840:	bf00      	nop
 8007842:	e00c      	b.n	800785e <USBH_HandleEnum+0x3be>
      break;
 8007844:	bf00      	nop
 8007846:	e00a      	b.n	800785e <USBH_HandleEnum+0x3be>
      break;
 8007848:	bf00      	nop
 800784a:	e008      	b.n	800785e <USBH_HandleEnum+0x3be>
      break;
 800784c:	bf00      	nop
 800784e:	e006      	b.n	800785e <USBH_HandleEnum+0x3be>
      break;
 8007850:	bf00      	nop
 8007852:	e004      	b.n	800785e <USBH_HandleEnum+0x3be>
      break;
 8007854:	bf00      	nop
 8007856:	e002      	b.n	800785e <USBH_HandleEnum+0x3be>
      break;
 8007858:	bf00      	nop
 800785a:	e000      	b.n	800785e <USBH_HandleEnum+0x3be>
      break;
 800785c:	bf00      	nop
  }
  return Status;
 800785e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007894:	1c5a      	adds	r2, r3, #1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f804 	bl	80078aa <USBH_HandleSof>
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b0b      	cmp	r3, #11
 80078ba:	d10a      	bne.n	80078d2 <USBH_HandleSof+0x28>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
  }
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80078ea:	bf00      	nop
}
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007906:	bf00      	nop
}
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 f844 	bl	80089ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	791b      	ldrb	r3, [r3, #4]
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fe91 	bl	8008694 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	795b      	ldrb	r3, [r3, #5]
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fe8b 	bl	8008694 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af02      	add	r7, sp, #8
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	b29b      	uxth	r3, r3
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	4613      	mov	r3, r2
 80079a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079a6:	2100      	movs	r1, #0
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f864 	bl	8007a76 <USBH_GetDescriptor>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f203 3026 	addw	r0, r3, #806	; 0x326
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079c4:	78fa      	ldrb	r2, [r7, #3]
 80079c6:	b292      	uxth	r2, r2
 80079c8:	4619      	mov	r1, r3
 80079ca:	f000 f918 	bl	8007bfe <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af02      	add	r7, sp, #8
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	331c      	adds	r3, #28
 80079e8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80079ea:	887b      	ldrh	r3, [r7, #2]
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079f4:	2100      	movs	r1, #0
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f83d 	bl	8007a76 <USBH_GetDescriptor>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d107      	bne.n	8007a16 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007a06:	887b      	ldrh	r3, [r7, #2]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	68b9      	ldr	r1, [r7, #8]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f987 	bl	8007d20 <USBH_ParseCfgDesc>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b088      	sub	sp, #32
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	607a      	str	r2, [r7, #4]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	72fb      	strb	r3, [r7, #11]
 8007a30:	4613      	mov	r3, r2
 8007a32:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007a34:	7afb      	ldrb	r3, [r7, #11]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a3c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a44:	893b      	ldrh	r3, [r7, #8]
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 f812 	bl	8007a76 <USBH_GetDescriptor>
 8007a52:	4603      	mov	r3, r0
 8007a54:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d107      	bne.n	8007a6c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a62:	893a      	ldrh	r2, [r7, #8]
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 fb24 	bl	80080b4 <USBH_ParseStringDesc>
  }

  return status;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	607b      	str	r3, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	72fb      	strb	r3, [r7, #11]
 8007a84:	4613      	mov	r3, r2
 8007a86:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	789b      	ldrb	r3, [r3, #2]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d11c      	bne.n	8007aca <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007a90:	7afb      	ldrb	r3, [r7, #11]
 8007a92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2206      	movs	r2, #6
 8007aa0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	893a      	ldrh	r2, [r7, #8]
 8007aa6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007aa8:	893b      	ldrh	r3, [r7, #8]
 8007aaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ab2:	d104      	bne.n	8007abe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f240 4209 	movw	r2, #1033	; 0x409
 8007aba:	829a      	strh	r2, [r3, #20]
 8007abc:	e002      	b.n	8007ac4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8b3a      	ldrh	r2, [r7, #24]
 8007ac8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007aca:	8b3b      	ldrh	r3, [r7, #24]
 8007acc:	461a      	mov	r2, r3
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 fb3d 	bl	8008150 <USBH_CtlReq>
 8007ad6:	4603      	mov	r3, r0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	789b      	ldrb	r3, [r3, #2]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d10f      	bne.n	8007b14 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2205      	movs	r2, #5
 8007afe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007b00:	78fb      	ldrb	r3, [r7, #3]
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b14:	2200      	movs	r2, #0
 8007b16:	2100      	movs	r1, #0
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fb19 	bl	8008150 <USBH_CtlReq>
 8007b1e:	4603      	mov	r3, r0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	789b      	ldrb	r3, [r3, #2]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d10e      	bne.n	8007b5a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2209      	movs	r2, #9
 8007b46:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	887a      	ldrh	r2, [r7, #2]
 8007b4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 faf6 	bl	8008150 <USBH_CtlReq>
 8007b64:	4603      	mov	r3, r0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	460b      	mov	r3, r1
 8007b78:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	789b      	ldrb	r3, [r3, #2]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d10f      	bne.n	8007ba2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007b8e:	78fb      	ldrb	r3, [r7, #3]
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fad2 	bl	8008150 <USBH_CtlReq>
 8007bac:	4603      	mov	r3, r0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	789b      	ldrb	r3, [r3, #2]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d10f      	bne.n	8007bea <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2202      	movs	r2, #2
 8007bce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007bdc:	78fb      	ldrb	r3, [r7, #3]
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007bea:	2200      	movs	r2, #0
 8007bec:	2100      	movs	r1, #0
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 faae 	bl	8008150 <USBH_CtlReq>
 8007bf4:	4603      	mov	r3, r0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	781a      	ldrb	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	785a      	ldrb	r2, [r3, #1]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	3302      	adds	r3, #2
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	3303      	adds	r3, #3
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	4313      	orrs	r3, r2
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	791a      	ldrb	r2, [r3, #4]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	795a      	ldrb	r2, [r3, #5]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	799a      	ldrb	r2, [r3, #6]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	79da      	ldrb	r2, [r3, #7]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	79db      	ldrb	r3, [r3, #7]
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	dc11      	bgt.n	8007c84 <USBH_ParseDevDesc+0x86>
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	db16      	blt.n	8007c92 <USBH_ParseDevDesc+0x94>
 8007c64:	3b08      	subs	r3, #8
 8007c66:	2201      	movs	r2, #1
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bf14      	ite	ne
 8007c78:	2301      	movne	r3, #1
 8007c7a:	2300      	moveq	r3, #0
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d102      	bne.n	8007c88 <USBH_ParseDevDesc+0x8a>
 8007c82:	e006      	b.n	8007c92 <USBH_ParseDevDesc+0x94>
 8007c84:	2b40      	cmp	r3, #64	; 0x40
 8007c86:	d104      	bne.n	8007c92 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	79da      	ldrb	r2, [r3, #7]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	71da      	strb	r2, [r3, #7]
      break;
 8007c90:	e003      	b.n	8007c9a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2240      	movs	r2, #64	; 0x40
 8007c96:	71da      	strb	r2, [r3, #7]
      break;
 8007c98:	bf00      	nop
  }

  if (length > 8U)
 8007c9a:	88fb      	ldrh	r3, [r7, #6]
 8007c9c:	2b08      	cmp	r3, #8
 8007c9e:	d939      	bls.n	8007d14 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	3308      	adds	r3, #8
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	3309      	adds	r3, #9
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	330a      	adds	r3, #10
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	330b      	adds	r3, #11
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	330c      	adds	r3, #12
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	330d      	adds	r3, #13
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	021b      	lsls	r3, r3, #8
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	4313      	orrs	r3, r2
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	7b9a      	ldrb	r2, [r3, #14]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	7bda      	ldrb	r2, [r3, #15]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	7c1a      	ldrb	r2, [r3, #16]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	7c5a      	ldrb	r2, [r3, #17]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	745a      	strb	r2, [r3, #17]
  }
}
 8007d14:	bf00      	nop
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08c      	sub	sp, #48	; 0x30
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d34:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	781a      	ldrb	r2, [r3, #0]
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	785a      	ldrb	r2, [r3, #1]
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	3302      	adds	r3, #2
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	3303      	adds	r3, #3
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	4313      	orrs	r3, r2
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d7c:	bf28      	it	cs
 8007d7e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	791a      	ldrb	r2, [r3, #4]
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	795a      	ldrb	r2, [r3, #5]
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	799a      	ldrb	r2, [r3, #6]
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	79da      	ldrb	r2, [r3, #7]
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	7a1a      	ldrb	r2, [r3, #8]
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b09      	cmp	r3, #9
 8007db6:	d002      	beq.n	8007dbe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	2209      	movs	r2, #9
 8007dbc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007dbe:	88fb      	ldrh	r3, [r7, #6]
 8007dc0:	2b09      	cmp	r3, #9
 8007dc2:	f240 809d 	bls.w	8007f00 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007dc6:	2309      	movs	r3, #9
 8007dc8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007dce:	e081      	b.n	8007ed4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007dd0:	f107 0316 	add.w	r3, r7, #22
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd8:	f000 f99f 	bl	800811a <USBH_GetNextDesc>
 8007ddc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	785b      	ldrb	r3, [r3, #1]
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d176      	bne.n	8007ed4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2b09      	cmp	r3, #9
 8007dec:	d002      	beq.n	8007df4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	2209      	movs	r2, #9
 8007df2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007df8:	221a      	movs	r2, #26
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
 8007dfe:	3308      	adds	r3, #8
 8007e00:	6a3a      	ldr	r2, [r7, #32]
 8007e02:	4413      	add	r3, r2
 8007e04:	3302      	adds	r3, #2
 8007e06:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e0a:	69f8      	ldr	r0, [r7, #28]
 8007e0c:	f000 f87e 	bl	8007f0c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e1a:	e043      	b.n	8007ea4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e1c:	f107 0316 	add.w	r3, r7, #22
 8007e20:	4619      	mov	r1, r3
 8007e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e24:	f000 f979 	bl	800811a <USBH_GetNextDesc>
 8007e28:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	785b      	ldrb	r3, [r3, #1]
 8007e2e:	2b05      	cmp	r3, #5
 8007e30:	d138      	bne.n	8007ea4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	795b      	ldrb	r3, [r3, #5]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d10f      	bne.n	8007e5a <USBH_ParseCfgDesc+0x13a>
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	799b      	ldrb	r3, [r3, #6]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d10b      	bne.n	8007e5a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	79db      	ldrb	r3, [r3, #7]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10f      	bne.n	8007e6a <USBH_ParseCfgDesc+0x14a>
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	2b09      	cmp	r3, #9
 8007e50:	d00b      	beq.n	8007e6a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e54:	2209      	movs	r2, #9
 8007e56:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e58:	e007      	b.n	8007e6a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b07      	cmp	r3, #7
 8007e60:	d004      	beq.n	8007e6c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e64:	2207      	movs	r2, #7
 8007e66:	701a      	strb	r2, [r3, #0]
 8007e68:	e000      	b.n	8007e6c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e6a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e74:	3201      	adds	r2, #1
 8007e76:	00d2      	lsls	r2, r2, #3
 8007e78:	211a      	movs	r1, #26
 8007e7a:	fb01 f303 	mul.w	r3, r1, r3
 8007e7e:	4413      	add	r3, r2
 8007e80:	3308      	adds	r3, #8
 8007e82:	6a3a      	ldr	r2, [r7, #32]
 8007e84:	4413      	add	r3, r2
 8007e86:	3304      	adds	r3, #4
 8007e88:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e8c:	69b9      	ldr	r1, [r7, #24]
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 f86b 	bl	8007f6a <USBH_ParseEPDesc>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007e9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	791b      	ldrb	r3, [r3, #4]
 8007ea8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d204      	bcs.n	8007eba <USBH_ParseCfgDesc+0x19a>
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	885a      	ldrh	r2, [r3, #2]
 8007eb4:	8afb      	ldrh	r3, [r7, #22]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d8b0      	bhi.n	8007e1c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	791b      	ldrb	r3, [r3, #4]
 8007ebe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d201      	bcs.n	8007eca <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e01c      	b.n	8007f04 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ece:	3301      	adds	r3, #1
 8007ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d805      	bhi.n	8007ee8 <USBH_ParseCfgDesc+0x1c8>
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	885a      	ldrh	r2, [r3, #2]
 8007ee0:	8afb      	ldrh	r3, [r7, #22]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	f63f af74 	bhi.w	8007dd0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	791b      	ldrb	r3, [r3, #4]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	bf28      	it	cs
 8007ef0:	2302      	movcs	r3, #2
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d201      	bcs.n	8007f00 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e001      	b.n	8007f04 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007f00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3730      	adds	r7, #48	; 0x30
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	785a      	ldrb	r2, [r3, #1]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	789a      	ldrb	r2, [r3, #2]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	78da      	ldrb	r2, [r3, #3]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	791a      	ldrb	r2, [r3, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	795a      	ldrb	r2, [r3, #5]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	799a      	ldrb	r2, [r3, #6]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	79da      	ldrb	r2, [r3, #7]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	7a1a      	ldrb	r2, [r3, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	721a      	strb	r2, [r3, #8]
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b087      	sub	sp, #28
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	781a      	ldrb	r2, [r3, #0]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	785a      	ldrb	r2, [r3, #1]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	789a      	ldrb	r2, [r3, #2]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	78da      	ldrb	r2, [r3, #3]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3305      	adds	r3, #5
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	021b      	lsls	r3, r3, #8
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	799a      	ldrb	r2, [r3, #6]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	889b      	ldrh	r3, [r3, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d102      	bne.n	8007fcc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	75fb      	strb	r3, [r7, #23]
 8007fca:	e033      	b.n	8008034 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	889b      	ldrh	r3, [r3, #4]
 8007fd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007fd4:	f023 0307 	bic.w	r3, r3, #7
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	889b      	ldrh	r3, [r3, #4]
 8007fe2:	b21a      	sxth	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	b299      	uxth	r1, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3305      	adds	r3, #5
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	021b      	lsls	r3, r3, #8
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008000:	2b00      	cmp	r3, #0
 8008002:	d110      	bne.n	8008026 <USBH_ParseEPDesc+0xbc>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3304      	adds	r3, #4
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	b299      	uxth	r1, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3305      	adds	r3, #5
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b29b      	uxth	r3, r3
 8008014:	021b      	lsls	r3, r3, #8
 8008016:	b29b      	uxth	r3, r3
 8008018:	430b      	orrs	r3, r1
 800801a:	b29b      	uxth	r3, r3
 800801c:	b21b      	sxth	r3, r3
 800801e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008022:	b21b      	sxth	r3, r3
 8008024:	e001      	b.n	800802a <USBH_ParseEPDesc+0xc0>
 8008026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800802a:	4313      	orrs	r3, r2
 800802c:	b21b      	sxth	r3, r3
 800802e:	b29a      	uxth	r2, r3
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800803a:	2b00      	cmp	r3, #0
 800803c:	d116      	bne.n	800806c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	78db      	ldrb	r3, [r3, #3]
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	2b01      	cmp	r3, #1
 8008048:	d005      	beq.n	8008056 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	78db      	ldrb	r3, [r3, #3]
 800804e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008052:	2b03      	cmp	r3, #3
 8008054:	d127      	bne.n	80080a6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	799b      	ldrb	r3, [r3, #6]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <USBH_ParseEPDesc+0xfc>
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	799b      	ldrb	r3, [r3, #6]
 8008062:	2b10      	cmp	r3, #16
 8008064:	d91f      	bls.n	80080a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008066:	2303      	movs	r3, #3
 8008068:	75fb      	strb	r3, [r7, #23]
 800806a:	e01c      	b.n	80080a6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	78db      	ldrb	r3, [r3, #3]
 8008070:	f003 0303 	and.w	r3, r3, #3
 8008074:	2b01      	cmp	r3, #1
 8008076:	d10a      	bne.n	800808e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	799b      	ldrb	r3, [r3, #6]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <USBH_ParseEPDesc+0x11e>
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	799b      	ldrb	r3, [r3, #6]
 8008084:	2b10      	cmp	r3, #16
 8008086:	d90e      	bls.n	80080a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008088:	2303      	movs	r3, #3
 800808a:	75fb      	strb	r3, [r7, #23]
 800808c:	e00b      	b.n	80080a6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	78db      	ldrb	r3, [r3, #3]
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	2b03      	cmp	r3, #3
 8008098:	d105      	bne.n	80080a6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	799b      	ldrb	r3, [r3, #6]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080a2:	2303      	movs	r3, #3
 80080a4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	371c      	adds	r7, #28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	4613      	mov	r3, r2
 80080c0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3301      	adds	r3, #1
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d120      	bne.n	800810e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	1e9a      	subs	r2, r3, #2
 80080d2:	88fb      	ldrh	r3, [r7, #6]
 80080d4:	4293      	cmp	r3, r2
 80080d6:	bf28      	it	cs
 80080d8:	4613      	movcs	r3, r2
 80080da:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	3302      	adds	r3, #2
 80080e0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80080e2:	2300      	movs	r3, #0
 80080e4:	82fb      	strh	r3, [r7, #22]
 80080e6:	e00b      	b.n	8008100 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80080e8:	8afb      	ldrh	r3, [r7, #22]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4413      	add	r3, r2
 80080ee:	781a      	ldrb	r2, [r3, #0]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	3301      	adds	r3, #1
 80080f8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80080fa:	8afb      	ldrh	r3, [r7, #22]
 80080fc:	3302      	adds	r3, #2
 80080fe:	82fb      	strh	r3, [r7, #22]
 8008100:	8afa      	ldrh	r2, [r7, #22]
 8008102:	8abb      	ldrh	r3, [r7, #20]
 8008104:	429a      	cmp	r2, r3
 8008106:	d3ef      	bcc.n	80080e8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
  }
}
 800810e:	bf00      	nop
 8008110:	371c      	adds	r7, #28
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	881a      	ldrh	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	b29b      	uxth	r3, r3
 800812e:	4413      	add	r3, r2
 8008130:	b29a      	uxth	r2, r3
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4413      	add	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008142:	68fb      	ldr	r3, [r7, #12]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800815e:	2301      	movs	r3, #1
 8008160:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	789b      	ldrb	r3, [r3, #2]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d002      	beq.n	8008170 <USBH_CtlReq+0x20>
 800816a:	2b02      	cmp	r3, #2
 800816c:	d00f      	beq.n	800818e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800816e:	e027      	b.n	80081c0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	88fa      	ldrh	r2, [r7, #6]
 800817a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2202      	movs	r2, #2
 8008186:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008188:	2301      	movs	r3, #1
 800818a:	75fb      	strb	r3, [r7, #23]
      break;
 800818c:	e018      	b.n	80081c0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 f81c 	bl	80081cc <USBH_HandleControl>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <USBH_CtlReq+0x54>
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d106      	bne.n	80081b2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	761a      	strb	r2, [r3, #24]
      break;
 80081b0:	e005      	b.n	80081be <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d102      	bne.n	80081be <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2201      	movs	r2, #1
 80081bc:	709a      	strb	r2, [r3, #2]
      break;
 80081be:	bf00      	nop
  }
  return status;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
	...

080081cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af02      	add	r7, sp, #8
 80081d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80081d4:	2301      	movs	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081d8:	2300      	movs	r3, #0
 80081da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	7e1b      	ldrb	r3, [r3, #24]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	2b0a      	cmp	r3, #10
 80081e4:	f200 8156 	bhi.w	8008494 <USBH_HandleControl+0x2c8>
 80081e8:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <USBH_HandleControl+0x24>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	0800821d 	.word	0x0800821d
 80081f4:	08008237 	.word	0x08008237
 80081f8:	080082a1 	.word	0x080082a1
 80081fc:	080082c7 	.word	0x080082c7
 8008200:	080082ff 	.word	0x080082ff
 8008204:	08008329 	.word	0x08008329
 8008208:	0800837b 	.word	0x0800837b
 800820c:	0800839d 	.word	0x0800839d
 8008210:	080083d9 	.word	0x080083d9
 8008214:	080083ff 	.word	0x080083ff
 8008218:	0800843d 	.word	0x0800843d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f103 0110 	add.w	r1, r3, #16
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	795b      	ldrb	r3, [r3, #5]
 8008226:	461a      	mov	r2, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f943 	bl	80084b4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2202      	movs	r2, #2
 8008232:	761a      	strb	r2, [r3, #24]
      break;
 8008234:	e139      	b.n	80084aa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	795b      	ldrb	r3, [r3, #5]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fcc5 	bl	8008bcc <USBH_LL_GetURBState>
 8008242:	4603      	mov	r3, r0
 8008244:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008246:	7bbb      	ldrb	r3, [r7, #14]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d11e      	bne.n	800828a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	7c1b      	ldrb	r3, [r3, #16]
 8008250:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008254:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	8adb      	ldrh	r3, [r3, #22]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800825e:	7b7b      	ldrb	r3, [r7, #13]
 8008260:	2b80      	cmp	r3, #128	; 0x80
 8008262:	d103      	bne.n	800826c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2203      	movs	r2, #3
 8008268:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800826a:	e115      	b.n	8008498 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2205      	movs	r2, #5
 8008270:	761a      	strb	r2, [r3, #24]
      break;
 8008272:	e111      	b.n	8008498 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008274:	7b7b      	ldrb	r3, [r7, #13]
 8008276:	2b80      	cmp	r3, #128	; 0x80
 8008278:	d103      	bne.n	8008282 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2209      	movs	r2, #9
 800827e:	761a      	strb	r2, [r3, #24]
      break;
 8008280:	e10a      	b.n	8008498 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2207      	movs	r2, #7
 8008286:	761a      	strb	r2, [r3, #24]
      break;
 8008288:	e106      	b.n	8008498 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800828a:	7bbb      	ldrb	r3, [r7, #14]
 800828c:	2b04      	cmp	r3, #4
 800828e:	d003      	beq.n	8008298 <USBH_HandleControl+0xcc>
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b02      	cmp	r3, #2
 8008294:	f040 8100 	bne.w	8008498 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	220b      	movs	r2, #11
 800829c:	761a      	strb	r2, [r3, #24]
      break;
 800829e:	e0fb      	b.n	8008498 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6899      	ldr	r1, [r3, #8]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	899a      	ldrh	r2, [r3, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	791b      	ldrb	r3, [r3, #4]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f93a 	bl	8008532 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2204      	movs	r2, #4
 80082c2:	761a      	strb	r2, [r3, #24]
      break;
 80082c4:	e0f1      	b.n	80084aa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	791b      	ldrb	r3, [r3, #4]
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fc7d 	bl	8008bcc <USBH_LL_GetURBState>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d102      	bne.n	80082e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2209      	movs	r2, #9
 80082e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b05      	cmp	r3, #5
 80082e6:	d102      	bne.n	80082ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80082e8:	2303      	movs	r3, #3
 80082ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082ec:	e0d6      	b.n	800849c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	f040 80d3 	bne.w	800849c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	220b      	movs	r2, #11
 80082fa:	761a      	strb	r2, [r3, #24]
      break;
 80082fc:	e0ce      	b.n	800849c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6899      	ldr	r1, [r3, #8]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	899a      	ldrh	r2, [r3, #12]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	795b      	ldrb	r3, [r3, #5]
 800830a:	2001      	movs	r0, #1
 800830c:	9000      	str	r0, [sp, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f8ea 	bl	80084e8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800831a:	b29a      	uxth	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2206      	movs	r2, #6
 8008324:	761a      	strb	r2, [r3, #24]
      break;
 8008326:	e0c0      	b.n	80084aa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	795b      	ldrb	r3, [r3, #5]
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fc4c 	bl	8008bcc <USBH_LL_GetURBState>
 8008334:	4603      	mov	r3, r0
 8008336:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d103      	bne.n	8008346 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2207      	movs	r2, #7
 8008342:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008344:	e0ac      	b.n	80084a0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b05      	cmp	r3, #5
 800834a:	d105      	bne.n	8008358 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	220c      	movs	r2, #12
 8008350:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008352:	2303      	movs	r3, #3
 8008354:	73fb      	strb	r3, [r7, #15]
      break;
 8008356:	e0a3      	b.n	80084a0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d103      	bne.n	8008366 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2205      	movs	r2, #5
 8008362:	761a      	strb	r2, [r3, #24]
      break;
 8008364:	e09c      	b.n	80084a0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b04      	cmp	r3, #4
 800836a:	f040 8099 	bne.w	80084a0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	220b      	movs	r2, #11
 8008372:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008374:	2302      	movs	r3, #2
 8008376:	73fb      	strb	r3, [r7, #15]
      break;
 8008378:	e092      	b.n	80084a0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	791b      	ldrb	r3, [r3, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	2100      	movs	r1, #0
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f8d5 	bl	8008532 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800838e:	b29a      	uxth	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2208      	movs	r2, #8
 8008398:	761a      	strb	r2, [r3, #24]

      break;
 800839a:	e086      	b.n	80084aa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	791b      	ldrb	r3, [r3, #4]
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fc12 	bl	8008bcc <USBH_LL_GetURBState>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d105      	bne.n	80083be <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	220d      	movs	r2, #13
 80083b6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083bc:	e072      	b.n	80084a4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d103      	bne.n	80083cc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	220b      	movs	r2, #11
 80083c8:	761a      	strb	r2, [r3, #24]
      break;
 80083ca:	e06b      	b.n	80084a4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b05      	cmp	r3, #5
 80083d0:	d168      	bne.n	80084a4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80083d2:	2303      	movs	r3, #3
 80083d4:	73fb      	strb	r3, [r7, #15]
      break;
 80083d6:	e065      	b.n	80084a4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	795b      	ldrb	r3, [r3, #5]
 80083dc:	2201      	movs	r2, #1
 80083de:	9200      	str	r2, [sp, #0]
 80083e0:	2200      	movs	r2, #0
 80083e2:	2100      	movs	r1, #0
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f87f 	bl	80084e8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	220a      	movs	r2, #10
 80083fa:	761a      	strb	r2, [r3, #24]
      break;
 80083fc:	e055      	b.n	80084aa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	795b      	ldrb	r3, [r3, #5]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fbe1 	bl	8008bcc <USBH_LL_GetURBState>
 800840a:	4603      	mov	r3, r0
 800840c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d105      	bne.n	8008420 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	220d      	movs	r2, #13
 800841c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800841e:	e043      	b.n	80084a8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d103      	bne.n	800842e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2209      	movs	r2, #9
 800842a:	761a      	strb	r2, [r3, #24]
      break;
 800842c:	e03c      	b.n	80084a8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	2b04      	cmp	r3, #4
 8008432:	d139      	bne.n	80084a8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	220b      	movs	r2, #11
 8008438:	761a      	strb	r2, [r3, #24]
      break;
 800843a:	e035      	b.n	80084a8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	7e5b      	ldrb	r3, [r3, #25]
 8008440:	3301      	adds	r3, #1
 8008442:	b2da      	uxtb	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	765a      	strb	r2, [r3, #25]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	7e5b      	ldrb	r3, [r3, #25]
 800844c:	2b02      	cmp	r3, #2
 800844e:	d806      	bhi.n	800845e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800845c:	e025      	b.n	80084aa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008464:	2106      	movs	r1, #6
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	795b      	ldrb	r3, [r3, #5]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f90c 	bl	8008694 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	791b      	ldrb	r3, [r3, #4]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f906 	bl	8008694 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800848e:	2302      	movs	r3, #2
 8008490:	73fb      	strb	r3, [r7, #15]
      break;
 8008492:	e00a      	b.n	80084aa <USBH_HandleControl+0x2de>

    default:
      break;
 8008494:	bf00      	nop
 8008496:	e008      	b.n	80084aa <USBH_HandleControl+0x2de>
      break;
 8008498:	bf00      	nop
 800849a:	e006      	b.n	80084aa <USBH_HandleControl+0x2de>
      break;
 800849c:	bf00      	nop
 800849e:	e004      	b.n	80084aa <USBH_HandleControl+0x2de>
      break;
 80084a0:	bf00      	nop
 80084a2:	e002      	b.n	80084aa <USBH_HandleControl+0x2de>
      break;
 80084a4:	bf00      	nop
 80084a6:	e000      	b.n	80084aa <USBH_HandleControl+0x2de>
      break;
 80084a8:	bf00      	nop
  }

  return status;
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af04      	add	r7, sp, #16
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	4613      	mov	r3, r2
 80084c0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084c2:	79f9      	ldrb	r1, [r7, #7]
 80084c4:	2300      	movs	r3, #0
 80084c6:	9303      	str	r3, [sp, #12]
 80084c8:	2308      	movs	r3, #8
 80084ca:	9302      	str	r3, [sp, #8]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	2300      	movs	r3, #0
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	2300      	movs	r3, #0
 80084d6:	2200      	movs	r2, #0
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 fb46 	bl	8008b6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b088      	sub	sp, #32
 80084ec:	af04      	add	r7, sp, #16
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4611      	mov	r1, r2
 80084f4:	461a      	mov	r2, r3
 80084f6:	460b      	mov	r3, r1
 80084f8:	80fb      	strh	r3, [r7, #6]
 80084fa:	4613      	mov	r3, r2
 80084fc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008508:	2300      	movs	r3, #0
 800850a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800850c:	7979      	ldrb	r1, [r7, #5]
 800850e:	7e3b      	ldrb	r3, [r7, #24]
 8008510:	9303      	str	r3, [sp, #12]
 8008512:	88fb      	ldrh	r3, [r7, #6]
 8008514:	9302      	str	r3, [sp, #8]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	9301      	str	r3, [sp, #4]
 800851a:	2301      	movs	r3, #1
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	2300      	movs	r3, #0
 8008520:	2200      	movs	r2, #0
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 fb21 	bl	8008b6a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b088      	sub	sp, #32
 8008536:	af04      	add	r7, sp, #16
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	4611      	mov	r1, r2
 800853e:	461a      	mov	r2, r3
 8008540:	460b      	mov	r3, r1
 8008542:	80fb      	strh	r3, [r7, #6]
 8008544:	4613      	mov	r3, r2
 8008546:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008548:	7979      	ldrb	r1, [r7, #5]
 800854a:	2300      	movs	r3, #0
 800854c:	9303      	str	r3, [sp, #12]
 800854e:	88fb      	ldrh	r3, [r7, #6]
 8008550:	9302      	str	r3, [sp, #8]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	2301      	movs	r3, #1
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	2300      	movs	r3, #0
 800855c:	2201      	movs	r2, #1
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 fb03 	bl	8008b6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008564:	2300      	movs	r3, #0

}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b088      	sub	sp, #32
 8008572:	af04      	add	r7, sp, #16
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	4611      	mov	r1, r2
 800857a:	461a      	mov	r2, r3
 800857c:	460b      	mov	r3, r1
 800857e:	80fb      	strh	r3, [r7, #6]
 8008580:	4613      	mov	r3, r2
 8008582:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800858e:	2300      	movs	r3, #0
 8008590:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008592:	7979      	ldrb	r1, [r7, #5]
 8008594:	7e3b      	ldrb	r3, [r7, #24]
 8008596:	9303      	str	r3, [sp, #12]
 8008598:	88fb      	ldrh	r3, [r7, #6]
 800859a:	9302      	str	r3, [sp, #8]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	9301      	str	r3, [sp, #4]
 80085a0:	2301      	movs	r3, #1
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	2302      	movs	r3, #2
 80085a6:	2200      	movs	r2, #0
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 fade 	bl	8008b6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b088      	sub	sp, #32
 80085bc:	af04      	add	r7, sp, #16
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4611      	mov	r1, r2
 80085c4:	461a      	mov	r2, r3
 80085c6:	460b      	mov	r3, r1
 80085c8:	80fb      	strh	r3, [r7, #6]
 80085ca:	4613      	mov	r3, r2
 80085cc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085ce:	7979      	ldrb	r1, [r7, #5]
 80085d0:	2300      	movs	r3, #0
 80085d2:	9303      	str	r3, [sp, #12]
 80085d4:	88fb      	ldrh	r3, [r7, #6]
 80085d6:	9302      	str	r3, [sp, #8]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	2301      	movs	r3, #1
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	2302      	movs	r3, #2
 80085e2:	2201      	movs	r2, #1
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 fac0 	bl	8008b6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af04      	add	r7, sp, #16
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	4608      	mov	r0, r1
 80085fe:	4611      	mov	r1, r2
 8008600:	461a      	mov	r2, r3
 8008602:	4603      	mov	r3, r0
 8008604:	70fb      	strb	r3, [r7, #3]
 8008606:	460b      	mov	r3, r1
 8008608:	70bb      	strb	r3, [r7, #2]
 800860a:	4613      	mov	r3, r2
 800860c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800860e:	7878      	ldrb	r0, [r7, #1]
 8008610:	78ba      	ldrb	r2, [r7, #2]
 8008612:	78f9      	ldrb	r1, [r7, #3]
 8008614:	8b3b      	ldrh	r3, [r7, #24]
 8008616:	9302      	str	r3, [sp, #8]
 8008618:	7d3b      	ldrb	r3, [r7, #20]
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	7c3b      	ldrb	r3, [r7, #16]
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	4603      	mov	r3, r0
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa53 	bl	8008ace <USBH_LL_OpenPipe>

  return USBH_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	460b      	mov	r3, r1
 800863c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800863e:	78fb      	ldrb	r3, [r7, #3]
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa72 	bl	8008b2c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f836 	bl	80086d0 <USBH_GetFreePipe>
 8008664:	4603      	mov	r3, r0
 8008666:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008668:	89fb      	ldrh	r3, [r7, #14]
 800866a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800866e:	4293      	cmp	r3, r2
 8008670:	d00a      	beq.n	8008688 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008672:	78fa      	ldrb	r2, [r7, #3]
 8008674:	89fb      	ldrh	r3, [r7, #14]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800867e:	6879      	ldr	r1, [r7, #4]
 8008680:	33e0      	adds	r3, #224	; 0xe0
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	440b      	add	r3, r1
 8008686:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008688:	89fb      	ldrh	r3, [r7, #14]
 800868a:	b2db      	uxtb	r3, r3
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	2b0f      	cmp	r3, #15
 80086a4:	d80d      	bhi.n	80086c2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086a6:	78fb      	ldrb	r3, [r7, #3]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	33e0      	adds	r3, #224	; 0xe0
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	33e0      	adds	r3, #224	; 0xe0
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	440b      	add	r3, r1
 80086c0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
 80086e0:	e00f      	b.n	8008702 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	33e0      	adds	r3, #224	; 0xe0
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d102      	bne.n	80086fc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	e007      	b.n	800870c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	3301      	adds	r3, #1
 8008700:	73fb      	strb	r3, [r7, #15]
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	2b0f      	cmp	r3, #15
 8008706:	d9ec      	bls.n	80086e2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008708:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800871c:	2201      	movs	r2, #1
 800871e:	490e      	ldr	r1, [pc, #56]	; (8008758 <MX_USB_HOST_Init+0x40>)
 8008720:	480e      	ldr	r0, [pc, #56]	; (800875c <MX_USB_HOST_Init+0x44>)
 8008722:	f7fe fba7 	bl	8006e74 <USBH_Init>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800872c:	f7f8 f9fe 	bl	8000b2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008730:	490b      	ldr	r1, [pc, #44]	; (8008760 <MX_USB_HOST_Init+0x48>)
 8008732:	480a      	ldr	r0, [pc, #40]	; (800875c <MX_USB_HOST_Init+0x44>)
 8008734:	f7fe fc2c 	bl	8006f90 <USBH_RegisterClass>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800873e:	f7f8 f9f5 	bl	8000b2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008742:	4806      	ldr	r0, [pc, #24]	; (800875c <MX_USB_HOST_Init+0x44>)
 8008744:	f7fe fcb0 	bl	80070a8 <USBH_Start>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800874e:	f7f8 f9ed 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008752:	bf00      	nop
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	08008779 	.word	0x08008779
 800875c:	20000280 	.word	0x20000280
 8008760:	2000000c 	.word	0x2000000c

08008764 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008768:	4802      	ldr	r0, [pc, #8]	; (8008774 <MX_USB_HOST_Process+0x10>)
 800876a:	f7fe fcad 	bl	80070c8 <USBH_Process>
}
 800876e:	bf00      	nop
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20000280 	.word	0x20000280

08008778 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	3b01      	subs	r3, #1
 8008788:	2b04      	cmp	r3, #4
 800878a:	d819      	bhi.n	80087c0 <USBH_UserProcess+0x48>
 800878c:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <USBH_UserProcess+0x1c>)
 800878e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008792:	bf00      	nop
 8008794:	080087c1 	.word	0x080087c1
 8008798:	080087b1 	.word	0x080087b1
 800879c:	080087c1 	.word	0x080087c1
 80087a0:	080087b9 	.word	0x080087b9
 80087a4:	080087a9 	.word	0x080087a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80087a8:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <USBH_UserProcess+0x58>)
 80087aa:	2203      	movs	r2, #3
 80087ac:	701a      	strb	r2, [r3, #0]
  break;
 80087ae:	e008      	b.n	80087c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80087b0:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <USBH_UserProcess+0x58>)
 80087b2:	2202      	movs	r2, #2
 80087b4:	701a      	strb	r2, [r3, #0]
  break;
 80087b6:	e004      	b.n	80087c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80087b8:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <USBH_UserProcess+0x58>)
 80087ba:	2201      	movs	r2, #1
 80087bc:	701a      	strb	r2, [r3, #0]
  break;
 80087be:	e000      	b.n	80087c2 <USBH_UserProcess+0x4a>

  default:
  break;
 80087c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	20000658 	.word	0x20000658

080087d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08a      	sub	sp, #40	; 0x28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087dc:	f107 0314 	add.w	r3, r7, #20
 80087e0:	2200      	movs	r2, #0
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	605a      	str	r2, [r3, #4]
 80087e6:	609a      	str	r2, [r3, #8]
 80087e8:	60da      	str	r2, [r3, #12]
 80087ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087f4:	d147      	bne.n	8008886 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087f6:	2300      	movs	r3, #0
 80087f8:	613b      	str	r3, [r7, #16]
 80087fa:	4b25      	ldr	r3, [pc, #148]	; (8008890 <HAL_HCD_MspInit+0xbc>)
 80087fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fe:	4a24      	ldr	r2, [pc, #144]	; (8008890 <HAL_HCD_MspInit+0xbc>)
 8008800:	f043 0301 	orr.w	r3, r3, #1
 8008804:	6313      	str	r3, [r2, #48]	; 0x30
 8008806:	4b22      	ldr	r3, [pc, #136]	; (8008890 <HAL_HCD_MspInit+0xbc>)
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	613b      	str	r3, [r7, #16]
 8008810:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008818:	2300      	movs	r3, #0
 800881a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800881c:	2300      	movs	r3, #0
 800881e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008820:	f107 0314 	add.w	r3, r7, #20
 8008824:	4619      	mov	r1, r3
 8008826:	481b      	ldr	r0, [pc, #108]	; (8008894 <HAL_HCD_MspInit+0xc0>)
 8008828:	f7f8 fde6 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800882c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008832:	2302      	movs	r3, #2
 8008834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008836:	2300      	movs	r3, #0
 8008838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800883a:	2303      	movs	r3, #3
 800883c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800883e:	230a      	movs	r3, #10
 8008840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008842:	f107 0314 	add.w	r3, r7, #20
 8008846:	4619      	mov	r1, r3
 8008848:	4812      	ldr	r0, [pc, #72]	; (8008894 <HAL_HCD_MspInit+0xc0>)
 800884a:	f7f8 fdd5 	bl	80013f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800884e:	4b10      	ldr	r3, [pc, #64]	; (8008890 <HAL_HCD_MspInit+0xbc>)
 8008850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008852:	4a0f      	ldr	r2, [pc, #60]	; (8008890 <HAL_HCD_MspInit+0xbc>)
 8008854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008858:	6353      	str	r3, [r2, #52]	; 0x34
 800885a:	2300      	movs	r3, #0
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	4b0c      	ldr	r3, [pc, #48]	; (8008890 <HAL_HCD_MspInit+0xbc>)
 8008860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008862:	4a0b      	ldr	r2, [pc, #44]	; (8008890 <HAL_HCD_MspInit+0xbc>)
 8008864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008868:	6453      	str	r3, [r2, #68]	; 0x44
 800886a:	4b09      	ldr	r3, [pc, #36]	; (8008890 <HAL_HCD_MspInit+0xbc>)
 800886c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008876:	2200      	movs	r2, #0
 8008878:	2100      	movs	r1, #0
 800887a:	2043      	movs	r0, #67	; 0x43
 800887c:	f7f8 fd85 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008880:	2043      	movs	r0, #67	; 0x43
 8008882:	f7f8 fd9e 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008886:	bf00      	nop
 8008888:	3728      	adds	r7, #40	; 0x28
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	40023800 	.word	0x40023800
 8008894:	40020000 	.word	0x40020000

08008898 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe ffed 	bl	8007886 <USBH_LL_IncTimer>
}
 80088ac:	bf00      	nop
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff f825 	bl	8007912 <USBH_LL_Connect>
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088de:	4618      	mov	r0, r3
 80088e0:	f7ff f82e 	bl	8007940 <USBH_LL_Disconnect>
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	70fb      	strb	r3, [r7, #3]
 80088f8:	4613      	mov	r3, r2
 80088fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe ffdf 	bl	80078da <USBH_LL_PortEnabled>
}
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe ffdf 	bl	80078f6 <USBH_LL_PortDisabled>
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800894e:	2b01      	cmp	r3, #1
 8008950:	d12a      	bne.n	80089a8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008952:	4a18      	ldr	r2, [pc, #96]	; (80089b4 <USBH_LL_Init+0x74>)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a15      	ldr	r2, [pc, #84]	; (80089b4 <USBH_LL_Init+0x74>)
 800895e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008962:	4b14      	ldr	r3, [pc, #80]	; (80089b4 <USBH_LL_Init+0x74>)
 8008964:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008968:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800896a:	4b12      	ldr	r3, [pc, #72]	; (80089b4 <USBH_LL_Init+0x74>)
 800896c:	2208      	movs	r2, #8
 800896e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008970:	4b10      	ldr	r3, [pc, #64]	; (80089b4 <USBH_LL_Init+0x74>)
 8008972:	2201      	movs	r2, #1
 8008974:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008976:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <USBH_LL_Init+0x74>)
 8008978:	2200      	movs	r2, #0
 800897a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800897c:	4b0d      	ldr	r3, [pc, #52]	; (80089b4 <USBH_LL_Init+0x74>)
 800897e:	2202      	movs	r2, #2
 8008980:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008982:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <USBH_LL_Init+0x74>)
 8008984:	2200      	movs	r2, #0
 8008986:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008988:	480a      	ldr	r0, [pc, #40]	; (80089b4 <USBH_LL_Init+0x74>)
 800898a:	f7f8 feec 	bl	8001766 <HAL_HCD_Init>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008994:	f7f8 f8ca 	bl	8000b2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008998:	4806      	ldr	r0, [pc, #24]	; (80089b4 <USBH_LL_Init+0x74>)
 800899a:	f7f9 fad0 	bl	8001f3e <HAL_HCD_GetCurrentFrame>
 800899e:	4603      	mov	r3, r0
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7fe ff60 	bl	8007868 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	2000065c 	.word	0x2000065c

080089b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f9 fa3f 	bl	8001e52 <HAL_HCD_Start>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f95c 	bl	8008c98 <USBH_Get_USB_Status>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7f9 fa47 	bl	8001e98 <HAL_HCD_Stop>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 f941 	bl	8008c98 <USBH_Get_USB_Status>
 8008a16:	4603      	mov	r3, r0
 8008a18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7f9 fa8f 	bl	8001f5a <HAL_HCD_GetCurrentSpeed>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d00c      	beq.n	8008a5c <USBH_LL_GetSpeed+0x38>
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d80d      	bhi.n	8008a62 <USBH_LL_GetSpeed+0x3e>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <USBH_LL_GetSpeed+0x2c>
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d003      	beq.n	8008a56 <USBH_LL_GetSpeed+0x32>
 8008a4e:	e008      	b.n	8008a62 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]
    break;
 8008a54:	e008      	b.n	8008a68 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a56:	2301      	movs	r3, #1
 8008a58:	73fb      	strb	r3, [r7, #15]
    break;
 8008a5a:	e005      	b.n	8008a68 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a60:	e002      	b.n	8008a68 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008a62:	2301      	movs	r3, #1
 8008a64:	73fb      	strb	r3, [r7, #15]
    break;
 8008a66:	bf00      	nop
  }
  return  speed;
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7f9 fa22 	bl	8001ed2 <HAL_HCD_ResetPort>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 f8ff 	bl	8008c98 <USBH_Get_USB_Status>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aba:	78fa      	ldrb	r2, [r7, #3]
 8008abc:	4611      	mov	r1, r2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7f9 fa29 	bl	8001f16 <HAL_HCD_HC_GetXferCount>
 8008ac4:	4603      	mov	r3, r0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ace:	b590      	push	{r4, r7, lr}
 8008ad0:	b089      	sub	sp, #36	; 0x24
 8008ad2:	af04      	add	r7, sp, #16
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	4611      	mov	r1, r2
 8008ada:	461a      	mov	r2, r3
 8008adc:	4603      	mov	r3, r0
 8008ade:	70fb      	strb	r3, [r7, #3]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70bb      	strb	r3, [r7, #2]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008af6:	787c      	ldrb	r4, [r7, #1]
 8008af8:	78ba      	ldrb	r2, [r7, #2]
 8008afa:	78f9      	ldrb	r1, [r7, #3]
 8008afc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008afe:	9302      	str	r3, [sp, #8]
 8008b00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	4623      	mov	r3, r4
 8008b0e:	f7f8 fe8c 	bl	800182a <HAL_HCD_HC_Init>
 8008b12:	4603      	mov	r3, r0
 8008b14:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 f8bd 	bl	8008c98 <USBH_Get_USB_Status>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd90      	pop	{r4, r7, pc}

08008b2c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7f8 fefc 	bl	8001948 <HAL_HCD_HC_Halt>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 f89e 	bl	8008c98 <USBH_Get_USB_Status>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b6a:	b590      	push	{r4, r7, lr}
 8008b6c:	b089      	sub	sp, #36	; 0x24
 8008b6e:	af04      	add	r7, sp, #16
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	4608      	mov	r0, r1
 8008b74:	4611      	mov	r1, r2
 8008b76:	461a      	mov	r2, r3
 8008b78:	4603      	mov	r3, r0
 8008b7a:	70fb      	strb	r3, [r7, #3]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70bb      	strb	r3, [r7, #2]
 8008b80:	4613      	mov	r3, r2
 8008b82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b92:	787c      	ldrb	r4, [r7, #1]
 8008b94:	78ba      	ldrb	r2, [r7, #2]
 8008b96:	78f9      	ldrb	r1, [r7, #3]
 8008b98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b9c:	9303      	str	r3, [sp, #12]
 8008b9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ba0:	9302      	str	r3, [sp, #8]
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	4623      	mov	r3, r4
 8008bae:	f7f8 feef 	bl	8001990 <HAL_HCD_HC_SubmitRequest>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 f86d 	bl	8008c98 <USBH_Get_USB_Status>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd90      	pop	{r4, r7, pc}

08008bcc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bde:	78fa      	ldrb	r2, [r7, #3]
 8008be0:	4611      	mov	r1, r2
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7f9 f983 	bl	8001eee <HAL_HCD_HC_GetURBState>
 8008be8:	4603      	mov	r3, r0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d103      	bne.n	8008c10 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 f870 	bl	8008cf0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c10:	20c8      	movs	r0, #200	; 0xc8
 8008c12:	f7f8 fabb 	bl	800118c <HAL_Delay>
  return USBH_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c36:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c38:	78fb      	ldrb	r3, [r7, #3]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	212c      	movs	r1, #44	; 0x2c
 8008c3e:	fb01 f303 	mul.w	r3, r1, r3
 8008c42:	4413      	add	r3, r2
 8008c44:	333b      	adds	r3, #59	; 0x3b
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d009      	beq.n	8008c60 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	212c      	movs	r1, #44	; 0x2c
 8008c52:	fb01 f303 	mul.w	r3, r1, r3
 8008c56:	4413      	add	r3, r2
 8008c58:	3354      	adds	r3, #84	; 0x54
 8008c5a:	78ba      	ldrb	r2, [r7, #2]
 8008c5c:	701a      	strb	r2, [r3, #0]
 8008c5e:	e008      	b.n	8008c72 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	212c      	movs	r1, #44	; 0x2c
 8008c66:	fb01 f303 	mul.w	r3, r1, r3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	3355      	adds	r3, #85	; 0x55
 8008c6e:	78ba      	ldrb	r2, [r7, #2]
 8008c70:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7f8 fa7f 	bl	800118c <HAL_Delay>
}
 8008c8e:	bf00      	nop
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ca6:	79fb      	ldrb	r3, [r7, #7]
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d817      	bhi.n	8008cdc <USBH_Get_USB_Status+0x44>
 8008cac:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <USBH_Get_USB_Status+0x1c>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008cc5 	.word	0x08008cc5
 8008cb8:	08008ccb 	.word	0x08008ccb
 8008cbc:	08008cd1 	.word	0x08008cd1
 8008cc0:	08008cd7 	.word	0x08008cd7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc8:	e00b      	b.n	8008ce2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008cca:	2302      	movs	r3, #2
 8008ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cce:	e008      	b.n	8008ce2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd4:	e005      	b.n	8008ce2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cda:	e002      	b.n	8008ce2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008cdc:	2302      	movs	r3, #2
 8008cde:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce0:	bf00      	nop
  }
  return usb_status;
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d102      	bne.n	8008d0a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73fb      	strb	r3, [r7, #15]
 8008d08:	e001      	b.n	8008d0e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	461a      	mov	r2, r3
 8008d12:	2101      	movs	r1, #1
 8008d14:	4803      	ldr	r0, [pc, #12]	; (8008d24 <MX_DriverVbusFS+0x34>)
 8008d16:	f7f8 fcf3 	bl	8001700 <HAL_GPIO_WritePin>
}
 8008d1a:	bf00      	nop
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	40020800 	.word	0x40020800

08008d28 <__errno>:
 8008d28:	4b01      	ldr	r3, [pc, #4]	; (8008d30 <__errno+0x8>)
 8008d2a:	6818      	ldr	r0, [r3, #0]
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	2000002c 	.word	0x2000002c

08008d34 <__libc_init_array>:
 8008d34:	b570      	push	{r4, r5, r6, lr}
 8008d36:	4d0d      	ldr	r5, [pc, #52]	; (8008d6c <__libc_init_array+0x38>)
 8008d38:	4c0d      	ldr	r4, [pc, #52]	; (8008d70 <__libc_init_array+0x3c>)
 8008d3a:	1b64      	subs	r4, r4, r5
 8008d3c:	10a4      	asrs	r4, r4, #2
 8008d3e:	2600      	movs	r6, #0
 8008d40:	42a6      	cmp	r6, r4
 8008d42:	d109      	bne.n	8008d58 <__libc_init_array+0x24>
 8008d44:	4d0b      	ldr	r5, [pc, #44]	; (8008d74 <__libc_init_array+0x40>)
 8008d46:	4c0c      	ldr	r4, [pc, #48]	; (8008d78 <__libc_init_array+0x44>)
 8008d48:	f000 f92e 	bl	8008fa8 <_init>
 8008d4c:	1b64      	subs	r4, r4, r5
 8008d4e:	10a4      	asrs	r4, r4, #2
 8008d50:	2600      	movs	r6, #0
 8008d52:	42a6      	cmp	r6, r4
 8008d54:	d105      	bne.n	8008d62 <__libc_init_array+0x2e>
 8008d56:	bd70      	pop	{r4, r5, r6, pc}
 8008d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d5c:	4798      	blx	r3
 8008d5e:	3601      	adds	r6, #1
 8008d60:	e7ee      	b.n	8008d40 <__libc_init_array+0xc>
 8008d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d66:	4798      	blx	r3
 8008d68:	3601      	adds	r6, #1
 8008d6a:	e7f2      	b.n	8008d52 <__libc_init_array+0x1e>
 8008d6c:	08008fe4 	.word	0x08008fe4
 8008d70:	08008fe4 	.word	0x08008fe4
 8008d74:	08008fe4 	.word	0x08008fe4
 8008d78:	08008fe8 	.word	0x08008fe8

08008d7c <malloc>:
 8008d7c:	4b02      	ldr	r3, [pc, #8]	; (8008d88 <malloc+0xc>)
 8008d7e:	4601      	mov	r1, r0
 8008d80:	6818      	ldr	r0, [r3, #0]
 8008d82:	f000 b87f 	b.w	8008e84 <_malloc_r>
 8008d86:	bf00      	nop
 8008d88:	2000002c 	.word	0x2000002c

08008d8c <free>:
 8008d8c:	4b02      	ldr	r3, [pc, #8]	; (8008d98 <free+0xc>)
 8008d8e:	4601      	mov	r1, r0
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	f000 b80b 	b.w	8008dac <_free_r>
 8008d96:	bf00      	nop
 8008d98:	2000002c 	.word	0x2000002c

08008d9c <memset>:
 8008d9c:	4402      	add	r2, r0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d100      	bne.n	8008da6 <memset+0xa>
 8008da4:	4770      	bx	lr
 8008da6:	f803 1b01 	strb.w	r1, [r3], #1
 8008daa:	e7f9      	b.n	8008da0 <memset+0x4>

08008dac <_free_r>:
 8008dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dae:	2900      	cmp	r1, #0
 8008db0:	d044      	beq.n	8008e3c <_free_r+0x90>
 8008db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db6:	9001      	str	r0, [sp, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f1a1 0404 	sub.w	r4, r1, #4
 8008dbe:	bfb8      	it	lt
 8008dc0:	18e4      	addlt	r4, r4, r3
 8008dc2:	f000 f8e3 	bl	8008f8c <__malloc_lock>
 8008dc6:	4a1e      	ldr	r2, [pc, #120]	; (8008e40 <_free_r+0x94>)
 8008dc8:	9801      	ldr	r0, [sp, #4]
 8008dca:	6813      	ldr	r3, [r2, #0]
 8008dcc:	b933      	cbnz	r3, 8008ddc <_free_r+0x30>
 8008dce:	6063      	str	r3, [r4, #4]
 8008dd0:	6014      	str	r4, [r2, #0]
 8008dd2:	b003      	add	sp, #12
 8008dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dd8:	f000 b8de 	b.w	8008f98 <__malloc_unlock>
 8008ddc:	42a3      	cmp	r3, r4
 8008dde:	d908      	bls.n	8008df2 <_free_r+0x46>
 8008de0:	6825      	ldr	r5, [r4, #0]
 8008de2:	1961      	adds	r1, r4, r5
 8008de4:	428b      	cmp	r3, r1
 8008de6:	bf01      	itttt	eq
 8008de8:	6819      	ldreq	r1, [r3, #0]
 8008dea:	685b      	ldreq	r3, [r3, #4]
 8008dec:	1949      	addeq	r1, r1, r5
 8008dee:	6021      	streq	r1, [r4, #0]
 8008df0:	e7ed      	b.n	8008dce <_free_r+0x22>
 8008df2:	461a      	mov	r2, r3
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	b10b      	cbz	r3, 8008dfc <_free_r+0x50>
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	d9fa      	bls.n	8008df2 <_free_r+0x46>
 8008dfc:	6811      	ldr	r1, [r2, #0]
 8008dfe:	1855      	adds	r5, r2, r1
 8008e00:	42a5      	cmp	r5, r4
 8008e02:	d10b      	bne.n	8008e1c <_free_r+0x70>
 8008e04:	6824      	ldr	r4, [r4, #0]
 8008e06:	4421      	add	r1, r4
 8008e08:	1854      	adds	r4, r2, r1
 8008e0a:	42a3      	cmp	r3, r4
 8008e0c:	6011      	str	r1, [r2, #0]
 8008e0e:	d1e0      	bne.n	8008dd2 <_free_r+0x26>
 8008e10:	681c      	ldr	r4, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	6053      	str	r3, [r2, #4]
 8008e16:	4421      	add	r1, r4
 8008e18:	6011      	str	r1, [r2, #0]
 8008e1a:	e7da      	b.n	8008dd2 <_free_r+0x26>
 8008e1c:	d902      	bls.n	8008e24 <_free_r+0x78>
 8008e1e:	230c      	movs	r3, #12
 8008e20:	6003      	str	r3, [r0, #0]
 8008e22:	e7d6      	b.n	8008dd2 <_free_r+0x26>
 8008e24:	6825      	ldr	r5, [r4, #0]
 8008e26:	1961      	adds	r1, r4, r5
 8008e28:	428b      	cmp	r3, r1
 8008e2a:	bf04      	itt	eq
 8008e2c:	6819      	ldreq	r1, [r3, #0]
 8008e2e:	685b      	ldreq	r3, [r3, #4]
 8008e30:	6063      	str	r3, [r4, #4]
 8008e32:	bf04      	itt	eq
 8008e34:	1949      	addeq	r1, r1, r5
 8008e36:	6021      	streq	r1, [r4, #0]
 8008e38:	6054      	str	r4, [r2, #4]
 8008e3a:	e7ca      	b.n	8008dd2 <_free_r+0x26>
 8008e3c:	b003      	add	sp, #12
 8008e3e:	bd30      	pop	{r4, r5, pc}
 8008e40:	20000960 	.word	0x20000960

08008e44 <sbrk_aligned>:
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	4e0e      	ldr	r6, [pc, #56]	; (8008e80 <sbrk_aligned+0x3c>)
 8008e48:	460c      	mov	r4, r1
 8008e4a:	6831      	ldr	r1, [r6, #0]
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	b911      	cbnz	r1, 8008e56 <sbrk_aligned+0x12>
 8008e50:	f000 f88c 	bl	8008f6c <_sbrk_r>
 8008e54:	6030      	str	r0, [r6, #0]
 8008e56:	4621      	mov	r1, r4
 8008e58:	4628      	mov	r0, r5
 8008e5a:	f000 f887 	bl	8008f6c <_sbrk_r>
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	d00a      	beq.n	8008e78 <sbrk_aligned+0x34>
 8008e62:	1cc4      	adds	r4, r0, #3
 8008e64:	f024 0403 	bic.w	r4, r4, #3
 8008e68:	42a0      	cmp	r0, r4
 8008e6a:	d007      	beq.n	8008e7c <sbrk_aligned+0x38>
 8008e6c:	1a21      	subs	r1, r4, r0
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f000 f87c 	bl	8008f6c <_sbrk_r>
 8008e74:	3001      	adds	r0, #1
 8008e76:	d101      	bne.n	8008e7c <sbrk_aligned+0x38>
 8008e78:	f04f 34ff 	mov.w	r4, #4294967295
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
 8008e80:	20000964 	.word	0x20000964

08008e84 <_malloc_r>:
 8008e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e88:	1ccd      	adds	r5, r1, #3
 8008e8a:	f025 0503 	bic.w	r5, r5, #3
 8008e8e:	3508      	adds	r5, #8
 8008e90:	2d0c      	cmp	r5, #12
 8008e92:	bf38      	it	cc
 8008e94:	250c      	movcc	r5, #12
 8008e96:	2d00      	cmp	r5, #0
 8008e98:	4607      	mov	r7, r0
 8008e9a:	db01      	blt.n	8008ea0 <_malloc_r+0x1c>
 8008e9c:	42a9      	cmp	r1, r5
 8008e9e:	d905      	bls.n	8008eac <_malloc_r+0x28>
 8008ea0:	230c      	movs	r3, #12
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	2600      	movs	r6, #0
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eac:	4e2e      	ldr	r6, [pc, #184]	; (8008f68 <_malloc_r+0xe4>)
 8008eae:	f000 f86d 	bl	8008f8c <__malloc_lock>
 8008eb2:	6833      	ldr	r3, [r6, #0]
 8008eb4:	461c      	mov	r4, r3
 8008eb6:	bb34      	cbnz	r4, 8008f06 <_malloc_r+0x82>
 8008eb8:	4629      	mov	r1, r5
 8008eba:	4638      	mov	r0, r7
 8008ebc:	f7ff ffc2 	bl	8008e44 <sbrk_aligned>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	d14d      	bne.n	8008f62 <_malloc_r+0xde>
 8008ec6:	6834      	ldr	r4, [r6, #0]
 8008ec8:	4626      	mov	r6, r4
 8008eca:	2e00      	cmp	r6, #0
 8008ecc:	d140      	bne.n	8008f50 <_malloc_r+0xcc>
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	4631      	mov	r1, r6
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	eb04 0803 	add.w	r8, r4, r3
 8008ed8:	f000 f848 	bl	8008f6c <_sbrk_r>
 8008edc:	4580      	cmp	r8, r0
 8008ede:	d13a      	bne.n	8008f56 <_malloc_r+0xd2>
 8008ee0:	6821      	ldr	r1, [r4, #0]
 8008ee2:	3503      	adds	r5, #3
 8008ee4:	1a6d      	subs	r5, r5, r1
 8008ee6:	f025 0503 	bic.w	r5, r5, #3
 8008eea:	3508      	adds	r5, #8
 8008eec:	2d0c      	cmp	r5, #12
 8008eee:	bf38      	it	cc
 8008ef0:	250c      	movcc	r5, #12
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	f7ff ffa5 	bl	8008e44 <sbrk_aligned>
 8008efa:	3001      	adds	r0, #1
 8008efc:	d02b      	beq.n	8008f56 <_malloc_r+0xd2>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	442b      	add	r3, r5
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	e00e      	b.n	8008f24 <_malloc_r+0xa0>
 8008f06:	6822      	ldr	r2, [r4, #0]
 8008f08:	1b52      	subs	r2, r2, r5
 8008f0a:	d41e      	bmi.n	8008f4a <_malloc_r+0xc6>
 8008f0c:	2a0b      	cmp	r2, #11
 8008f0e:	d916      	bls.n	8008f3e <_malloc_r+0xba>
 8008f10:	1961      	adds	r1, r4, r5
 8008f12:	42a3      	cmp	r3, r4
 8008f14:	6025      	str	r5, [r4, #0]
 8008f16:	bf18      	it	ne
 8008f18:	6059      	strne	r1, [r3, #4]
 8008f1a:	6863      	ldr	r3, [r4, #4]
 8008f1c:	bf08      	it	eq
 8008f1e:	6031      	streq	r1, [r6, #0]
 8008f20:	5162      	str	r2, [r4, r5]
 8008f22:	604b      	str	r3, [r1, #4]
 8008f24:	4638      	mov	r0, r7
 8008f26:	f104 060b 	add.w	r6, r4, #11
 8008f2a:	f000 f835 	bl	8008f98 <__malloc_unlock>
 8008f2e:	f026 0607 	bic.w	r6, r6, #7
 8008f32:	1d23      	adds	r3, r4, #4
 8008f34:	1af2      	subs	r2, r6, r3
 8008f36:	d0b6      	beq.n	8008ea6 <_malloc_r+0x22>
 8008f38:	1b9b      	subs	r3, r3, r6
 8008f3a:	50a3      	str	r3, [r4, r2]
 8008f3c:	e7b3      	b.n	8008ea6 <_malloc_r+0x22>
 8008f3e:	6862      	ldr	r2, [r4, #4]
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	bf0c      	ite	eq
 8008f44:	6032      	streq	r2, [r6, #0]
 8008f46:	605a      	strne	r2, [r3, #4]
 8008f48:	e7ec      	b.n	8008f24 <_malloc_r+0xa0>
 8008f4a:	4623      	mov	r3, r4
 8008f4c:	6864      	ldr	r4, [r4, #4]
 8008f4e:	e7b2      	b.n	8008eb6 <_malloc_r+0x32>
 8008f50:	4634      	mov	r4, r6
 8008f52:	6876      	ldr	r6, [r6, #4]
 8008f54:	e7b9      	b.n	8008eca <_malloc_r+0x46>
 8008f56:	230c      	movs	r3, #12
 8008f58:	603b      	str	r3, [r7, #0]
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	f000 f81c 	bl	8008f98 <__malloc_unlock>
 8008f60:	e7a1      	b.n	8008ea6 <_malloc_r+0x22>
 8008f62:	6025      	str	r5, [r4, #0]
 8008f64:	e7de      	b.n	8008f24 <_malloc_r+0xa0>
 8008f66:	bf00      	nop
 8008f68:	20000960 	.word	0x20000960

08008f6c <_sbrk_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	4d06      	ldr	r5, [pc, #24]	; (8008f88 <_sbrk_r+0x1c>)
 8008f70:	2300      	movs	r3, #0
 8008f72:	4604      	mov	r4, r0
 8008f74:	4608      	mov	r0, r1
 8008f76:	602b      	str	r3, [r5, #0]
 8008f78:	f7f8 f824 	bl	8000fc4 <_sbrk>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	d102      	bne.n	8008f86 <_sbrk_r+0x1a>
 8008f80:	682b      	ldr	r3, [r5, #0]
 8008f82:	b103      	cbz	r3, 8008f86 <_sbrk_r+0x1a>
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
 8008f88:	20000968 	.word	0x20000968

08008f8c <__malloc_lock>:
 8008f8c:	4801      	ldr	r0, [pc, #4]	; (8008f94 <__malloc_lock+0x8>)
 8008f8e:	f000 b809 	b.w	8008fa4 <__retarget_lock_acquire_recursive>
 8008f92:	bf00      	nop
 8008f94:	2000096c 	.word	0x2000096c

08008f98 <__malloc_unlock>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__malloc_unlock+0x8>)
 8008f9a:	f000 b804 	b.w	8008fa6 <__retarget_lock_release_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	2000096c 	.word	0x2000096c

08008fa4 <__retarget_lock_acquire_recursive>:
 8008fa4:	4770      	bx	lr

08008fa6 <__retarget_lock_release_recursive>:
 8008fa6:	4770      	bx	lr

08008fa8 <_init>:
 8008fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008faa:	bf00      	nop
 8008fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fae:	bc08      	pop	{r3}
 8008fb0:	469e      	mov	lr, r3
 8008fb2:	4770      	bx	lr

08008fb4 <_fini>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	bf00      	nop
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr
